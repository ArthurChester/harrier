{"remainingRequest":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\view\\spdb\\systemsetting\\serverManage\\Table.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\view\\spdb\\systemsetting\\serverManage\\Table.vue","mtime":1681468306550},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\.babelrc","mtime":1681468306354},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.regexp.search\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport utils from '@/common/utils';\nvar RESOURCE_PATH = '/udsServer';\nexport default {\n  props: {\n    transData: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    var _this = this;\n    return {\n      formBean: {},\n      request: {\n        delReq: {\n          method: 'DELETE',\n          url: RESOURCE_PATH\n        },\n        addReq: {\n          method: 'POST',\n          url: RESOURCE_PATH\n        }\n      },\n      // statusList: [\n      //  {\n      //    value: '1',\n      //    label: 'node-1'\n      //  },\n      //  {\n      //    value: '0',\n      //    label: 'node-0'\n      //  }\n      // ],\n      gridColumns: [\n      // {\n      // \ttype: 'index',\n      // \ttitle: ' ',\n      // \twidth: 80,\n      // \t//align: 'center',\n      // \tfixed: 'left'\n      // },\n      // {\n      // \ttype: 'selection',\n      // \twidth: 60,\n      // \t//align: 'center',\n      // \tfixed: 'left'\n      // },\n      // {\n      //   title: '对外服务名',\n      //   key: 'serverRoleName'\n      // },\n      {\n        title: '服务组名',\n        key: 'serverRoleNameGroup',\n        minWidth: 100\n      }, {\n        title: '集群名',\n        key: 'nodeClusterType',\n        minWidth: 120\n      }, {\n        title: '服务器名',\n        key: 'serverName',\n        minWidth: 160\n      }, {\n        title: '服务器iP',\n        key: 'ip',\n        minWidth: 140\n      }, {\n        title: '上次启动时间',\n        key: 'lastStart',\n        minWidth: 180\n      }, {\n        title: '关闭时间',\n        key: 'lastEnd',\n        minWidth: 180\n      },\n      // {\n      //   title: '最大并发数',\n      //   key: 'maxJobNum',\n      //   minWidth: 110\n      // },\n      {\n        title: '是否启用',\n        key: 'isEnable',\n        minWidth: 100,\n        render: function render(h, _ref) {\n          var column = _ref.column,\n            index = _ref.index,\n            row = _ref.row;\n          return h('div', [h('Span', {}, row.isEnable ? '是' : '否')]);\n        }\n      },\n      // {\n      //   title: '节点标签',\n      //   key: 'tags',\n      //   minWidth: 100\n      // },\n      // {\n      //   title: '逻辑集群',\n      //   key: 'dbControl',\n      //   minWidth: 100,\n      //   render: (h, { column, index, row }) => {\n      //     return h('div', [h('Span', {}, this.dbControlName[row.dbControl])])\n      //   }\n      // },\n      // {\n      //   title: '节点归属地',\n      //   key: 'location',\n      //   minWidth: 110,\n      //   render: (h, { column, index, row }) => {\n      //     return h('div', [h('Span', {}, this.locationName[row.location])])\n      //   }\n      // },\n      {\n        title: '描述',\n        key: 'des',\n        minWidth: 100\n      }, {\n        title: '操作',\n        width: 150,\n        // fixed: 'right',\n        render: function render(h, _ref2) {\n          var column = _ref2.column,\n            index = _ref2.index,\n            row = _ref2.row;\n          return h('div', [\n          // h(\n          //   'Button',\n          //   {\n          //     props: {\n          //       size: 'small',\n          //       type: 'info'\n          //     },\n          //     style: {\n          //       marginRight: '5px'\n          //     },\n          //     on: {\n          //       click: () => {\n          //         let id = row.serverName\n          //         let queryCache = {\n          //           formBean: this.formBean,\n          //           currentPage: this.page.current,\n          //           pageSize: this.page.size\n          //         }\n          //         this.$emit(\n          //           'switch',\n          //           Object.assign(\n          //             { id: id, statusName: 'form' },\n          //             queryCache\n          //           )\n          //         ) // 提交form事件，在parent中显示form\n          //       }\n          //     }\n          //   },\n          //   '编辑'\n          // ),\n          h('Button', {\n            props: {\n              size: 'small',\n              type: 'info'\n            },\n            style: {\n              marginRight: '5px'\n            },\n            on: {\n              click: function click() {\n                _this.$Modal.confirm({\n                  title: '提示',\n                  onOk: function onOk() {\n                    var params = {};\n                    params.serverName = row.serverName;\n                    params.isEnable = !row.isEnable;\n                    var httpConfig = {\n                      method: 'POST',\n                      url: RESOURCE_PATH + '/setEnable',\n                      data: params\n                    };\n                    _this.$ajax(httpConfig).then(function (resp) {\n                      if (resp.status && resp.status === 200) {\n                        _this.search();\n                      }\n                    });\n                  },\n                  content: row.isEnable ? '是否确定禁用该节点！' : '是否确定启用该节点！'\n                });\n                // let id = row.serverName\n                // let queryCache = {\n                //   formBean: this.formBean,\n                //   currentPage: this.page.current,\n                //   pageSize: this.page.size\n                // }\n                // this.$emit(\n                //   'switch',\n                //   Object.assign(\n                //     { id: id, statusName: 'form' },\n                //     queryCache\n                //   )\n                // ) // 提交form事件，在parent中显示form\n              }\n            }\n          }, row.isEnable ? '禁用' : '启用'), h('Button', {\n            props: {\n              size: 'small',\n              type: 'info'\n            },\n            style: {\n              marginRight: '5px'\n            },\n            on: {\n              click: function click() {\n                var queryCache = {\n                  formBean: _this.formBean,\n                  currentPage: _this.page.current,\n                  pageSize: _this.page.size\n                };\n                _this.$emit('switch', Object.assign({\n                  info: row,\n                  statusName: 'loglist'\n                }, queryCache)); // 提交form事件，在parent中显示form\n              }\n            }\n          }, '查看日志')]);\n        }\n      }],\n      gridData: [],\n      selection: [],\n      locationName: {},\n      dbControlName: {},\n      page: {\n        current: 1,\n        total: 10,\n        size: 10,\n        opt: [10, 50, 100]\n      },\n      ruleValidate: {}\n    };\n  },\n  methods: {\n    /*\r\n     *paramChange () {\r\n     *  if (this.formBean.param == 0) {\r\n     *    this.$emit('switch', {ntable: 'true'})\r\n     *  }\r\n     *}\r\n     */\n    demand: function demand() {\n      this.page.current = 1;\n      this.search();\n    },\n    /**\r\n     * 初始化\r\n     **/\n    init: function init() {\n      if (this.transData.currentPage) {\n        this.formBean = this.transData.formBean;\n        this.page.current = this.transData.currentPage;\n        this.page.size = this.transData.pageSize;\n      }\n      this.search();\n    },\n    /**\r\n     * 如果传过来的有初始数据则进行数据绑定\r\n     **/\n    bindData: function bindData(fields) {\n      try {\n        var data = Object.assign({}, this.transData.initFormBean);\n        if (fields) {\n          // 进行可选字段初始化\n          var _iterator = _createForOfIteratorHelper(fields),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var field = _step.value;\n              this.formBean[field] = data[field];\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        } else {\n          // 进行全量字段初始化（默认是只有主表的主键的）\n          this.formBean = Object.assign({}, data);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    /**\r\n     * 下载\r\n     **/\n    download: function download() {\n      var params = {};\n      Object.assign(params, this.formBean);\n      params.type = 'excel';\n      utils.download(RESOURCE_PATH + '/downLoad', params);\n    },\n    /**\r\n     * 查询\r\n     **/\n    search: function search() {\n      var _this2 = this;\n      var params = {};\n      Object.assign(params, this.formBean);\n      params.current = this.page.current;\n      params.size = this.page.size;\n      if (params.servername && params.servername !== '') {\n        params.servername = '%' + params.servername + '%';\n      } else {\n        delete params.servername;\n      }\n      var httpConfig = {\n        method: 'GET',\n        url: RESOURCE_PATH + '/selectAll',\n        params: params\n      };\n      this.$ajax(httpConfig).then(function (resp) {\n        _this2.gridData = resp.data.rows;\n        _this2.page.total = resp.data.total;\n      });\n    },\n    /**\r\n     * 清空\r\n     **/\n    clear: function clear() {\n      this.formBean = {};\n      this.selection = [];\n      this.page = {\n        current: 1,\n        size: 10\n      };\n    },\n    /**\r\n     * 新增\r\n     **/\n    add: function add() {\n      this.$emit('switch');\n    },\n    /**\r\n     * 删除\r\n     **/\n    del: function del() {\n      var _this3 = this;\n      var ids = Array.from(this.selection, function (e) {\n        return e.serverName;\n      });\n      ids.forEach(function (id) {\n        _this3.request.delReq.url = RESOURCE_PATH + '/' + id;\n        _this3.request.delReq.method = 'DELETE';\n        _this3.$ajax(_this3.request.delReq).then(function (resp) {\n          _this3.search();\n        });\n      });\n    },\n    /**\r\n     * 数据复选事件\r\n     **/\n    select: function select(selection) {\n      this.selection = selection;\n    },\n    /**\r\n     * 改变页码事件\r\n     **/\n    changePage: function changePage(currentPage) {\n      this.page.current = currentPage;\n      this.search();\n    },\n    /**\r\n     * 改变分页大小事件\r\n     **/\n    changePageSize: function changePageSize(pageSize) {\n      this.page.size = pageSize;\n      this.search();\n    },\n    queryLocationName: function queryLocationName() {\n      var _this4 = this;\n      var loadConfig = {\n        method: 'GET',\n        url: '/dictionary',\n        params: {\n          dicCode: 'location'\n        }\n      };\n      this.$ajax(loadConfig).then(function (resp) {\n        resp.data.rows.forEach(function (data) {\n          _this4.locationName[parseInt(data.dicValue)] = data.dicName;\n        });\n        // this.search()\n      });\n    },\n    queryDbControlName: function queryDbControlName() {\n      var _this5 = this;\n      var loadConfig = {\n        method: 'GET',\n        url: '/dictionary',\n        params: {\n          dicCode: 'db_control'\n        }\n      };\n      this.$ajax(loadConfig).then(function (resp) {\n        resp.data.rows.forEach(function (data) {\n          _this5.dbControlName[parseInt(data.dicValue)] = data.dicName;\n        });\n        _this5.search();\n      });\n    }\n  },\n  /**\r\n   * 视图挂载\r\n   **/\n  mounted: function mounted() {\n    this.init();\n    // this.queryLocationName()\n    // this.queryDbControlName()\n  }\n};",{"version":3,"names":["utils","RESOURCE_PATH","props","transData","type","Object","default","_default","data","_this","formBean","request","delReq","method","url","addReq","gridColumns","title","key","minWidth","render","h","_ref","column","index","row","isEnable","width","_ref2","size","style","marginRight","on","click","$Modal","confirm","onOk","params","serverName","httpConfig","$ajax","then","resp","status","search","content","queryCache","currentPage","page","current","pageSize","$emit","assign","info","statusName","gridData","selection","locationName","dbControlName","total","opt","ruleValidate","methods","demand","init","bindData","fields","initFormBean","_iterator","_createForOfIteratorHelper","_step","s","n","done","field","value","err","e","f","error","console","download","_this2","servername","rows","clear","add","del","_this3","ids","Array","from","forEach","id","select","changePage","changePageSize","queryLocationName","_this4","loadConfig","dicCode","parseInt","dicValue","dicName","queryDbControlName","_this5","mounted"],"sources":["src/view/spdb/systemsetting/serverManage/Table.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"spdb-form\">\r\n      <Form ref=\"serverForm\" :model=\"formBean\" :label-width=\"80\" :rules=\"ruleValidate\"></Form>\r\n    </div>\r\n    <Form ref=\"serverForm\" :model=\"formBean\" :label-width=\"70\" :rules=\"ruleValidate\">\r\n      <Row>\r\n        <Col span=\"3\">\r\n          <Form-Item prop=\"servername\" label=\"节点名称\">\r\n            <Input v-model=\"formBean.servername\" placeholder=\"支持模糊查询\" />\r\n          </Form-Item>\r\n        </Col>\r\n        <Col span=\"1\">&nbsp;</Col>\r\n        <Col span=\"4\">\r\n          <div class=\"spdb-toolbar\">\r\n            <Button type=\"primary\" icon=\"ios-search\" @click=\"demand\">查询</Button>\r\n            <Button type=\"primary\" icon=\"md-close\" @click=\"clear\">清除查询</Button>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n\r\n    <!--\r\n\t\t\t<S-AuthButton type=\"primary\" icon=\"md-add\" @click=\"add\" :requestConfig=request.addReq>新增</S-AuthButton>\r\n\t\t\t<S-AuthButton type=\"primary\" icon=\"ios-trash-outline\" @click=\"del\" :requestConfig=request.delReq>删除</S-AuthButton>\r\n\t\t\t<Button type=\"primary\" icon=\"ios-search\" @click=\"download\">下载</Button>\r\n    -->\r\n\r\n    <div class=\"spdb-table\">\r\n      <Table :columns=\"gridColumns\" :data=\"gridData\" stripe @on-selection-change=\"select\"></Table>\r\n    </div>\r\n\r\n    <div class=\"spdb-page\">\r\n      <Page\r\n        placement=\"top\"\r\n        :total=\"page.total\"\r\n        :current=\"page.current\"\r\n        :page-size=\"page.size\"\r\n        :page-size-opts=\"page.opt\"\r\n        show-total\r\n        show-sizer\r\n        show-elevat\r\n        @on-change=\"changePage\"\r\n        @on-page-size-change=\"changePageSize\"\r\n      ></Page>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport utils from '@/common/utils'\r\n\r\nconst RESOURCE_PATH = '/udsServer'\r\n\r\nexport default {\r\n  props: {\r\n    transData: {\r\n      type: Object,\r\n      default: function () {\r\n        return {}\r\n      }\r\n    }\r\n  },\r\n  data: function () {\r\n    return {\r\n      formBean: {},\r\n      request: {\r\n        delReq: {\r\n          method: 'DELETE',\r\n          url: RESOURCE_PATH\r\n        },\r\n        addReq: {\r\n          method: 'POST',\r\n          url: RESOURCE_PATH\r\n        }\r\n      },\r\n      // statusList: [\r\n      //  {\r\n      //    value: '1',\r\n      //    label: 'node-1'\r\n      //  },\r\n      //  {\r\n      //    value: '0',\r\n      //    label: 'node-0'\r\n      //  }\r\n      // ],\r\n      gridColumns: [\r\n        // {\r\n        // \ttype: 'index',\r\n        // \ttitle: ' ',\r\n        // \twidth: 80,\r\n        // \t//align: 'center',\r\n        // \tfixed: 'left'\r\n        // },\r\n        // {\r\n        // \ttype: 'selection',\r\n        // \twidth: 60,\r\n        // \t//align: 'center',\r\n        // \tfixed: 'left'\r\n        // },\r\n        // {\r\n        //   title: '对外服务名',\r\n        //   key: 'serverRoleName'\r\n        // },\r\n        {\r\n          title: '服务组名',\r\n          key: 'serverRoleNameGroup',\r\n          minWidth: 100\r\n        },\r\n        {\r\n          title: '集群名',\r\n          key: 'nodeClusterType',\r\n          minWidth: 120\r\n        },\r\n        {\r\n          title: '服务器名',\r\n          key: 'serverName',\r\n          minWidth: 160\r\n        },\r\n        {\r\n          title: '服务器iP',\r\n          key: 'ip',\r\n          minWidth: 140\r\n        },\r\n        {\r\n          title: '上次启动时间',\r\n          key: 'lastStart',\r\n          minWidth: 180\r\n        },\r\n        {\r\n          title: '关闭时间',\r\n          key: 'lastEnd',\r\n          minWidth: 180\r\n        },\r\n        // {\r\n        //   title: '最大并发数',\r\n        //   key: 'maxJobNum',\r\n        //   minWidth: 110\r\n        // },\r\n        {\r\n          title: '是否启用',\r\n          key: 'isEnable',\r\n          minWidth: 100,\r\n          render: (h, { column, index, row }) => {\r\n            return h('div', [h('Span', {}, row.isEnable ? '是' : '否')])\r\n          }\r\n        },\r\n        // {\r\n        //   title: '节点标签',\r\n        //   key: 'tags',\r\n        //   minWidth: 100\r\n        // },\r\n        // {\r\n        //   title: '逻辑集群',\r\n        //   key: 'dbControl',\r\n        //   minWidth: 100,\r\n        //   render: (h, { column, index, row }) => {\r\n        //     return h('div', [h('Span', {}, this.dbControlName[row.dbControl])])\r\n        //   }\r\n        // },\r\n        // {\r\n        //   title: '节点归属地',\r\n        //   key: 'location',\r\n        //   minWidth: 110,\r\n        //   render: (h, { column, index, row }) => {\r\n        //     return h('div', [h('Span', {}, this.locationName[row.location])])\r\n        //   }\r\n        // },\r\n        {\r\n        \ttitle: '描述',\r\n        \tkey: 'des',\r\n          minWidth: 100\r\n        },\r\n        {\r\n          title: '操作',\r\n          width: 150,\r\n          // fixed: 'right',\r\n          render: (h, { column, index, row }) => {\r\n            return h('div', [\r\n              // h(\r\n              //   'Button',\r\n              //   {\r\n              //     props: {\r\n              //       size: 'small',\r\n              //       type: 'info'\r\n              //     },\r\n              //     style: {\r\n              //       marginRight: '5px'\r\n              //     },\r\n              //     on: {\r\n              //       click: () => {\r\n              //         let id = row.serverName\r\n              //         let queryCache = {\r\n              //           formBean: this.formBean,\r\n              //           currentPage: this.page.current,\r\n              //           pageSize: this.page.size\r\n              //         }\r\n              //         this.$emit(\r\n              //           'switch',\r\n              //           Object.assign(\r\n              //             { id: id, statusName: 'form' },\r\n              //             queryCache\r\n              //           )\r\n              //         ) // 提交form事件，在parent中显示form\r\n              //       }\r\n              //     }\r\n              //   },\r\n              //   '编辑'\r\n              // ),\r\n              h(\r\n                'Button',\r\n                {\r\n                  props: {\r\n                    size: 'small',\r\n                    type: 'info'\r\n                  },\r\n                  style: {\r\n                    marginRight: '5px'\r\n                  },\r\n                  on: {\r\n                    click: () => {\r\n                      this.$Modal.confirm({\r\n                        title: '提示',\r\n                        onOk: () => {\r\n                          let params = {}\r\n                          params.serverName = row.serverName\r\n                          params.isEnable = !row.isEnable\r\n                          let httpConfig = {\r\n                            method: 'POST',\r\n                            url: RESOURCE_PATH + '/setEnable',\r\n                            data: params\r\n                          }\r\n                          this.$ajax(httpConfig)\r\n                            .then(resp => {\r\n                              if (resp.status && resp.status === 200) {\r\n                                this.search()\r\n                              }\r\n                            })\r\n                        },\r\n                        content: row.isEnable ? '是否确定禁用该节点！' : '是否确定启用该节点！'\r\n                      })\r\n                      // let id = row.serverName\r\n                      // let queryCache = {\r\n                      //   formBean: this.formBean,\r\n                      //   currentPage: this.page.current,\r\n                      //   pageSize: this.page.size\r\n                      // }\r\n                      // this.$emit(\r\n                      //   'switch',\r\n                      //   Object.assign(\r\n                      //     { id: id, statusName: 'form' },\r\n                      //     queryCache\r\n                      //   )\r\n                      // ) // 提交form事件，在parent中显示form\r\n                    }\r\n                  }\r\n                },\r\n                row.isEnable ? '禁用' : '启用'\r\n              ),\r\n              h(\r\n                'Button',\r\n                {\r\n                  props: {\r\n                    size: 'small',\r\n                    type: 'info'\r\n                  },\r\n                  style: {\r\n                    marginRight: '5px'\r\n                  },\r\n                  on: {\r\n                    click: () => {\r\n                      let queryCache = {\r\n                        formBean: this.formBean,\r\n                        currentPage: this.page.current,\r\n                        pageSize: this.page.size\r\n                      }\r\n                      this.$emit(\r\n                        'switch',\r\n                        Object.assign(\r\n                          { info: row, statusName: 'loglist' },\r\n                          queryCache\r\n                        )\r\n                      ) // 提交form事件，在parent中显示form\r\n                    }\r\n                  }\r\n                },\r\n                '查看日志'\r\n              )\r\n            ])\r\n          }\r\n        }\r\n      ],\r\n      gridData: [],\r\n      selection: [],\r\n      locationName: {},\r\n      dbControlName: {},\r\n      page: {\r\n        current: 1,\r\n        total: 10,\r\n        size: 10,\r\n        opt: [10, 50, 100]\r\n      },\r\n      ruleValidate: {}\r\n    }\r\n  },\r\n  methods: {\r\n    /*\r\n     *paramChange () {\r\n     *  if (this.formBean.param == 0) {\r\n     *    this.$emit('switch', {ntable: 'true'})\r\n     *  }\r\n     *}\r\n     */\r\n    demand () {\r\n      this.page.current = 1\r\n      this.search()\r\n    },\r\n    /**\r\n     * 初始化\r\n     **/\r\n    init () {\r\n      if (this.transData.currentPage) {\r\n        this.formBean = this.transData.formBean\r\n        this.page.current = this.transData.currentPage\r\n        this.page.size = this.transData.pageSize\r\n      }\r\n      this.search()\r\n    },\r\n    /**\r\n     * 如果传过来的有初始数据则进行数据绑定\r\n     **/\r\n    bindData (fields) {\r\n      try {\r\n        const data = Object.assign({}, this.transData.initFormBean)\r\n        if (fields) {\r\n          // 进行可选字段初始化\r\n          for (const field of fields) {\r\n            this.formBean[field] = data[field]\r\n          }\r\n        } else {\r\n          // 进行全量字段初始化（默认是只有主表的主键的）\r\n          this.formBean = Object.assign({}, data)\r\n        }\r\n      } catch (error) {\r\n        console.error(error)\r\n      }\r\n    },\r\n    /**\r\n     * 下载\r\n     **/\r\n    download () {\r\n      let params = {}\r\n      Object.assign(params, this.formBean)\r\n      params.type = 'excel'\r\n      utils.download(RESOURCE_PATH + '/downLoad', params)\r\n    },\r\n    /**\r\n     * 查询\r\n     **/\r\n    search () {\r\n      let params = {}\r\n      Object.assign(params, this.formBean)\r\n      params.current = this.page.current\r\n      params.size = this.page.size\r\n\r\n      if (params.servername && params.servername !== '') {\r\n        params.servername = '%' + params.servername + '%'\r\n      } else {\r\n        delete params.servername\r\n      }\r\n\r\n      let httpConfig = {\r\n        method: 'GET',\r\n        url: RESOURCE_PATH + '/selectAll',\r\n        params: params\r\n      }\r\n\r\n      this.$ajax(httpConfig).then(resp => {\r\n        this.gridData = resp.data.rows\r\n        this.page.total = resp.data.total\r\n      })\r\n    },\r\n    /**\r\n     * 清空\r\n     **/\r\n    clear () {\r\n      this.formBean = {}\r\n      this.selection = []\r\n      this.page = {\r\n        current: 1,\r\n        size: 10\r\n      }\r\n    },\r\n    /**\r\n     * 新增\r\n     **/\r\n    add () {\r\n      this.$emit('switch')\r\n    },\r\n    /**\r\n     * 删除\r\n     **/\r\n    del () {\r\n      const ids = Array.from(this.selection, e => e.serverName)\r\n      ids.forEach(id => {\r\n        this.request.delReq.url = RESOURCE_PATH + '/' + id\r\n        this.request.delReq.method = 'DELETE'\r\n        this.$ajax(this.request.delReq).then(resp => {\r\n          this.search()\r\n        })\r\n      })\r\n    },\r\n    /**\r\n     * 数据复选事件\r\n     **/\r\n    select (selection) {\r\n      this.selection = selection\r\n    },\r\n    /**\r\n     * 改变页码事件\r\n     **/\r\n    changePage (currentPage) {\r\n      this.page.current = currentPage\r\n      this.search()\r\n    },\r\n    /**\r\n     * 改变分页大小事件\r\n     **/\r\n    changePageSize (pageSize) {\r\n      this.page.size = pageSize\r\n      this.search()\r\n    },\r\n    queryLocationName () {\r\n      let loadConfig = {\r\n        method: 'GET',\r\n        url: '/dictionary',\r\n        params: { dicCode: 'location' }\r\n      }\r\n      this.$ajax(loadConfig).then(resp => {\r\n        resp.data.rows.forEach(data => {\r\n          this.locationName[parseInt(data.dicValue)] = data.dicName\r\n        })\r\n        // this.search()\r\n      })\r\n    },\r\n    queryDbControlName () {\r\n      let loadConfig = {\r\n        method: 'GET',\r\n        url: '/dictionary',\r\n        params: { dicCode: 'db_control' }\r\n      }\r\n      this.$ajax(loadConfig).then(resp => {\r\n        resp.data.rows.forEach(data => {\r\n          this.dbControlName[parseInt(data.dicValue)] = data.dicName\r\n        })\r\n        this.search()\r\n      })\r\n    }\r\n  },\r\n  /**\r\n   * 视图挂载\r\n   **/\r\n  mounted () {\r\n    this.init()\r\n    // this.queryLocationName()\r\n    // this.queryDbControlName()\r\n  }\r\n}\r\n</script>\r\n"],"mappings":";;;;;;;;;;;AAkDA,OAAAA,KAAA;AAEA,IAAAC,aAAA;AAEA;EACAC,KAAA;IACAC,SAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,OAAA,WAAAC,SAAA;QACA;MACA;IACA;EACA;EACAC,IAAA,WAAAA,KAAA;IAAA,IAAAC,KAAA;IACA;MACAC,QAAA;MACAC,OAAA;QACAC,MAAA;UACAC,MAAA;UACAC,GAAA,EAAAb;QACA;QACAc,MAAA;UACAF,MAAA;UACAC,GAAA,EAAAb;QACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAe,WAAA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;QACAC,KAAA;QACAC,GAAA;QACAC,QAAA;MACA,GACA;QACAF,KAAA;QACAC,GAAA;QACAC,QAAA;MACA,GACA;QACAF,KAAA;QACAC,GAAA;QACAC,QAAA;MACA,GACA;QACAF,KAAA;QACAC,GAAA;QACAC,QAAA;MACA,GACA;QACAF,KAAA;QACAC,GAAA;QACAC,QAAA;MACA,GACA;QACAF,KAAA;QACAC,GAAA;QACAC,QAAA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;QACAF,KAAA;QACAC,GAAA;QACAC,QAAA;QACAC,MAAA,WAAAA,OAAAC,CAAA,EAAAC,IAAA;UAAA,IAAAC,MAAA,GAAAD,IAAA,CAAAC,MAAA;YAAAC,KAAA,GAAAF,IAAA,CAAAE,KAAA;YAAAC,GAAA,GAAAH,IAAA,CAAAG,GAAA;UACA,OAAAJ,CAAA,SAAAA,CAAA,aAAAI,GAAA,CAAAC,QAAA;QACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;QACAT,KAAA;QACAC,GAAA;QACAC,QAAA;MACA,GACA;QACAF,KAAA;QACAU,KAAA;QACA;QACAP,MAAA,WAAAA,OAAAC,CAAA,EAAAO,KAAA;UAAA,IAAAL,MAAA,GAA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"}]}