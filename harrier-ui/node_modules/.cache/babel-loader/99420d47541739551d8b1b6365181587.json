{"remainingRequest":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\iview\\src\\components\\button\\button.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\iview\\src\\components\\button\\button.vue","mtime":1566806371000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Icon from '../icon';\nimport { oneOf } from '../../utils/assist';\nimport mixinsLink from '../../mixins/link';\nconst prefixCls = 'ivu-btn';\nexport default {\n  name: 'Button',\n  mixins: [mixinsLink],\n  components: {\n    Icon\n  },\n  props: {\n    type: {\n      validator(value) {\n        return oneOf(value, ['default', 'primary', 'dashed', 'text', 'info', 'success', 'warning', 'error']);\n      },\n      default: 'default'\n    },\n    shape: {\n      validator(value) {\n        return oneOf(value, ['circle', 'circle-outline']);\n      }\n    },\n    size: {\n      validator(value) {\n        return oneOf(value, ['small', 'large', 'default']);\n      },\n      default() {\n        return !this.$IVIEW || this.$IVIEW.size === '' ? 'default' : this.$IVIEW.size;\n      }\n    },\n    loading: Boolean,\n    disabled: Boolean,\n    htmlType: {\n      default: 'button',\n      validator(value) {\n        return oneOf(value, ['button', 'submit', 'reset']);\n      }\n    },\n    icon: {\n      type: String,\n      default: ''\n    },\n    customIcon: {\n      type: String,\n      default: ''\n    },\n    long: {\n      type: Boolean,\n      default: false\n    },\n    ghost: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      showSlot: true\n    };\n  },\n  computed: {\n    classes() {\n      return [`${prefixCls}`, `${prefixCls}-${this.type}`, {\n        [`${prefixCls}-long`]: this.long,\n        [`${prefixCls}-${this.shape}`]: !!this.shape,\n        [`${prefixCls}-${this.size}`]: this.size !== 'default',\n        [`${prefixCls}-loading`]: this.loading != null && this.loading,\n        [`${prefixCls}-icon-only`]: !this.showSlot && (!!this.icon || !!this.customIcon || this.loading),\n        [`${prefixCls}-ghost`]: this.ghost\n      }];\n    },\n    // Point out if it should render as <a> tag\n    isHrefPattern() {\n      const {\n        to\n      } = this;\n      return !!to;\n    },\n    tagName() {\n      const {\n        isHrefPattern\n      } = this;\n      return isHrefPattern ? 'a' : 'button';\n    },\n    tagProps() {\n      const {\n        isHrefPattern\n      } = this;\n      if (isHrefPattern) {\n        const {\n          linkUrl,\n          target\n        } = this;\n        return {\n          href: linkUrl,\n          target\n        };\n      } else {\n        const {\n          htmlType\n        } = this;\n        return {\n          type: htmlType\n        };\n      }\n    }\n  },\n  methods: {\n    // Ctrl or CMD and click, open in new window when use `to`\n    handleClickLink(event) {\n      this.$emit('click', event);\n      const openInNewWindow = event.ctrlKey || event.metaKey;\n      this.handleCheckClick(event, openInNewWindow);\n    }\n  },\n  mounted() {\n    this.showSlot = this.$slots.default !== undefined;\n  }\n};",{"version":3,"names":["Icon","oneOf","mixinsLink","prefixCls","name","mixins","components","props","type","validator","value","default","shape","size","$IVIEW","loading","Boolean","disabled","htmlType","icon","String","customIcon","long","ghost","data","showSlot","computed","classes","isHrefPattern","to","tagName","tagProps","linkUrl","target","href","methods","handleClickLink","event","$emit","openInNewWindow","ctrlKey","metaKey","handleCheckClick","mounted","$slots","undefined"],"sources":["node_modules/iview/src/components/button/button.vue"],"sourcesContent":["<template>\n    <component :is=\"tagName\" :class=\"classes\" :disabled=\"disabled\" @click=\"handleClickLink\" v-bind=\"tagProps\">\n        <Icon class=\"ivu-load-loop\" type=\"ios-loading\" v-if=\"loading\"></Icon>\n        <Icon :type=\"icon\" :custom=\"customIcon\" v-if=\"(icon || customIcon) && !loading\"></Icon>\n        <span v-if=\"showSlot\" ref=\"slot\"><slot></slot></span>\n    </component>\n</template>\n<script>\n    import Icon from '../icon';\n    import { oneOf } from '../../utils/assist';\n    import mixinsLink from '../../mixins/link';\n\n    const prefixCls = 'ivu-btn';\n\n    export default {\n        name: 'Button',\n        mixins: [ mixinsLink ],\n        components: { Icon },\n        props: {\n            type: {\n                validator (value) {\n                    return oneOf(value, ['default', 'primary', 'dashed', 'text', 'info', 'success', 'warning', 'error']);\n                },\n                default: 'default'\n            },\n            shape: {\n                validator (value) {\n                    return oneOf(value, ['circle', 'circle-outline']);\n                }\n            },\n            size: {\n                validator (value) {\n                    return oneOf(value, ['small', 'large', 'default']);\n                },\n                default () {\n                    return !this.$IVIEW || this.$IVIEW.size === '' ? 'default' : this.$IVIEW.size;\n                }\n            },\n            loading: Boolean,\n            disabled: Boolean,\n            htmlType: {\n                default: 'button',\n                validator (value) {\n                    return oneOf(value, ['button', 'submit', 'reset']);\n                }\n            },\n            icon: {\n                type: String,\n                default: ''\n            },\n            customIcon: {\n                type: String,\n                default: ''\n            },\n            long: {\n                type: Boolean,\n                default: false\n            },\n            ghost: {\n                type: Boolean,\n                default: false\n            }\n        },\n        data () {\n            return {\n                showSlot: true\n            };\n        },\n        computed: {\n            classes () {\n                return [\n                    `${prefixCls}`,\n                    `${prefixCls}-${this.type}`,\n                    {\n                        [`${prefixCls}-long`]: this.long,\n                        [`${prefixCls}-${this.shape}`]: !!this.shape,\n                        [`${prefixCls}-${this.size}`]: this.size !== 'default',\n                        [`${prefixCls}-loading`]: this.loading != null && this.loading,\n                        [`${prefixCls}-icon-only`]: !this.showSlot && (!!this.icon || !!this.customIcon || this.loading),\n                        [`${prefixCls}-ghost`]: this.ghost\n                    }\n                ];\n            },\n            // Point out if it should render as <a> tag\n            isHrefPattern() {\n                const {to} = this;\n                return !!to;\n            },\n            tagName() {\n                const {isHrefPattern} = this;\n                return isHrefPattern ? 'a' : 'button';\n            },\n            tagProps() {\n                const {isHrefPattern} = this;\n                if(isHrefPattern) {\n                    const {linkUrl,target}=this;\n                    return {href: linkUrl, target};\n                } else {\n                    const {htmlType} = this;\n                    return {type: htmlType};\n                }\n            }\n        },\n        methods: {\n            // Ctrl or CMD and click, open in new window when use `to`\n            handleClickLink (event) {\n                this.$emit('click', event);\n                const openInNewWindow = event.ctrlKey || event.metaKey;\n\n                this.handleCheckClick(event, openInNewWindow);\n            }\n        },\n        mounted () {\n            this.showSlot = this.$slots.default !== undefined;\n        }\n    };\n</script>\n"],"mappings":"AAQA,OAAAA,IAAA;AACA,SAAAC,KAAA;AACA,OAAAC,UAAA;AAEA,MAAAC,SAAA;AAEA;EACAC,IAAA;EACAC,MAAA,GAAAH,UAAA;EACAI,UAAA;IAAAN;EAAA;EACAO,KAAA;IACAC,IAAA;MACAC,UAAAC,KAAA;QACA,OAAAT,KAAA,CAAAS,KAAA;MACA;MACAC,OAAA;IACA;IACAC,KAAA;MACAH,UAAAC,KAAA;QACA,OAAAT,KAAA,CAAAS,KAAA;MACA;IACA;IACAG,IAAA;MACAJ,UAAAC,KAAA;QACA,OAAAT,KAAA,CAAAS,KAAA;MACA;MACAC,QAAA;QACA,aAAAG,MAAA,SAAAA,MAAA,CAAAD,IAAA,2BAAAC,MAAA,CAAAD,IAAA;MACA;IACA;IACAE,OAAA,EAAAC,OAAA;IACAC,QAAA,EAAAD,OAAA;IACAE,QAAA;MACAP,OAAA;MACAF,UAAAC,KAAA;QACA,OAAAT,KAAA,CAAAS,KAAA;MACA;IACA;IACAS,IAAA;MACAX,IAAA,EAAAY,MAAA;MACAT,OAAA;IACA;IACAU,UAAA;MACAb,IAAA,EAAAY,MAAA;MACAT,OAAA;IACA;IACAW,IAAA;MACAd,IAAA,EAAAQ,OAAA;MACAL,OAAA;IACA;IACAY,KAAA;MACAf,IAAA,EAAAQ,OAAA;MACAL,OAAA;IACA;EACA;EACAa,KAAA;IACA;MACAC,QAAA;IACA;EACA;EACAC,QAAA;IACAC,QAAA;MACA,QACA,GAAAxB,SAAA,IACA,GAAAA,SAAA,SAAAK,IAAA,IACA;QACA,IAAAL,SAAA,eAAAmB,IAAA;QACA,IAAAnB,SAAA,SAAAS,KAAA,YAAAA,KAAA;QACA,IAAAT,SAAA,SAAAU,IAAA,UAAAA,IAAA;QACA,IAAAV,SAAA,kBAAAY,OAAA,iBAAAA,OAAA;QACA,IAAAZ,SAAA,qBAAAsB,QAAA,YAAAN,IAAA,WAAAE,UAAA,SAAAN,OAAA;QACA,IAAAZ,SAAA,gBAAAoB;MACA,EACA;IACA;IACA;IACAK,cAAA;MACA;QAAAC;MAAA;MACA,SAAAA,EAAA;IACA;IACAC,QAAA;MACA;QAAAF;MAAA;MACA,OAAAA,aAAA;IACA;IACAG,SAAA;MACA;QAAAH;MAAA;MACA,IAAAA,aAAA;QACA;UAAAI,OAAA;UAAAC;QAAA;QACA;UAAAC,IAAA,EAAAF,OAAA;UAAAC;QAAA;MACA;QACA;UAAAf;QAAA;QACA;UAAAV,IAAA,EAAAU;QAAA;MACA;IACA;EACA;EACAiB,OAAA;IACA;IACAC,gBAAAC,KAAA;MACA,KAAAC,KAAA,UAAAD,KAAA;MACA,MAAAE,eAAA,GAAAF,KAAA,CAAAG,OAAA,IAAAH,KAAA,CAAAI,OAAA;MAEA,KAAAC,gBAAA,CAAAL,KAAA,EAAAE,eAAA;IACA;EACA;EACAI,QAAA;IACA,KAAAlB,QAAA,QAAAmB,MAAA,CAAAjC,OAAA,KAAAkC,SAAA;EACA;AACA"}]}