{"remainingRequest":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\libs\\tools.js","dependencies":[{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\libs\\tools.js","mtime":1681468306489},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\.babelrc","mtime":1681468306354},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.number.constructor\";\nimport _toConsumableArray from \"D:/WorkSpace/IdeaProjects/harrier/harrier-ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.set\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nexport var forEach = function forEach(arr, fn) {\n  if (!arr.length || !fn) return;\n  var i = -1;\n  var len = arr.length;\n  while (++i < len) {\n    var item = arr[i];\n    fn(item, i, arr);\n  }\n};\n\n/**\r\n * @param {Array} arr1\r\n * @param {Array} arr2\r\n * @description 得到两个数组的交集, 两个数组的元素为数值或字符串\r\n */\nexport var getIntersection = function getIntersection(arr1, arr2) {\n  var len = Math.min(arr1.length, arr2.length);\n  var i = -1;\n  var res = [];\n  while (++i < len) {\n    var item = arr2[i];\n    if (arr1.indexOf(item) > -1) res.push(item);\n  }\n  return res;\n};\n\n/**\r\n * @param {Array} arr1\r\n * @param {Array} arr2\r\n * @description 得到两个数组的并集, 两个数组的元素为数值或字符串\r\n */\nexport var getUnion = function getUnion(arr1, arr2) {\n  return Array.from(new Set([].concat(_toConsumableArray(arr1), _toConsumableArray(arr2))));\n};\n\n/**\r\n * @param {Array} target 目标数组\r\n * @param {Array} arr 需要查询的数组\r\n * @description 判断要查询的数组是否至少有一个元素包含在目标数组中\r\n */\nexport var hasOneOf = function hasOneOf(targetarr, arr) {\n  return targetarr.some(function (_) {\n    return arr.indexOf(_) > -1;\n  });\n};\n\n/**\r\n * @param {String|Number} value 要验证的字符串或数值\r\n * @param {*} validList 用来验证的列表\r\n */\nexport function oneOf(value, validList) {\n  for (var i = 0; i < validList.length; i++) {\n    if (value === validList[i]) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\r\n * @param {Number} timeStamp 判断时间戳格式是否是毫秒\r\n * @returns {Boolean}\r\n */\nvar isMillisecond = function isMillisecond(timeStamp) {\n  var timeStr = String(timeStamp);\n  return timeStr.length > 10;\n};\n\n/**\r\n * @param {Number} timeStamp 传入的时间戳\r\n * @param {Number} currentTime 当前时间时间戳\r\n * @returns {Boolean} 传入的时间戳是否早于当前时间戳\r\n */\nvar isEarly = function isEarly(timeStamp, currentTime) {\n  return timeStamp < currentTime;\n};\n\n/**\r\n * @param {Number} num 数值\r\n * @returns {String} 处理后的字符串\r\n * @description 如果传入的数值小于10，即位数只有1位，则在前面补充0\r\n */\nvar getHandledValue = function getHandledValue(num) {\n  return num < 10 ? '0' + num : num;\n};\n\n/**\r\n * @param {Number} timeStamp 传入的时间戳\r\n * @param {Number} startType 要返回的时间字符串的格式类型，传入'year'则返回年开头的完整时间\r\n */\nvar getDate = function getDate(timeStamp, startType) {\n  var d = new Date(timeStamp * 1000);\n  var year = d.getFullYear();\n  var month = getHandledValue(d.getMonth() + 1);\n  var date = getHandledValue(d.getDate());\n  var hours = getHandledValue(d.getHours());\n  var minutes = getHandledValue(d.getMinutes());\n  var second = getHandledValue(d.getSeconds());\n  var resStr = '';\n  if (startType === 'year') resStr = year + '-' + month + '-' + date + ' ' + hours + ':' + minutes + ':' + second;else resStr = month + '-' + date + ' ' + hours + ':' + minutes;\n  return resStr;\n};\n\n/**\r\n * @param {String|Number} timeStamp 时间戳\r\n * @returns {String} 相对时间字符串\r\n */\nexport var getRelativeTime = function getRelativeTime(timeStamp) {\n  // 判断当前传入的时间戳是秒格式还是毫秒\n  var IS_MILLISECOND = isMillisecond(timeStamp);\n  // 如果是毫秒格式则转为秒格式\n  if (IS_MILLISECOND) Math.floor(timeStamp /= 1000);\n  // 传入的时间戳可以是数值或字符串类型，这里统一转为数值类型\n  timeStamp = Number(timeStamp);\n  // 获取当前时间时间戳\n  var currentTime = Math.floor(Date.parse(new Date()) / 1000);\n  // 判断传入时间戳是否早于当前时间戳\n  var IS_EARLY = isEarly(timeStamp, currentTime);\n  // 获取两个时间戳差值\n  var diff = currentTime - timeStamp;\n  // 如果IS_EARLY为false则差值取反\n  if (!IS_EARLY) diff = -diff;\n  var resStr = '';\n  var dirStr = IS_EARLY ? '前' : '后';\n  // 少于等于59秒\n  if (diff <= 59) resStr = diff + '秒' + dirStr;\n  // 多于59秒，少于等于59分钟59秒\n  else if (diff > 59 && diff <= 3599) resStr = Math.floor(diff / 60) + '分钟' + dirStr;\n  // 多于59分钟59秒，少于等于23小时59分钟59秒\n  else if (diff > 3599 && diff <= 86399) resStr = Math.floor(diff / 3600) + '小时' + dirStr;\n  // 多于23小时59分钟59秒，少于等于29天59分钟59秒\n  else if (diff > 86399 && diff <= 2623859) resStr = Math.floor(diff / 86400) + '天' + dirStr;\n  // 多于29天59分钟59秒，少于364天23小时59分钟59秒，且传入的时间戳早于当前\n  else if (diff > 2623859 && diff <= 31567859 && IS_EARLY) resStr = getDate(timeStamp);else resStr = getDate(timeStamp, 'year');\n  return resStr;\n};\n\n/**\r\n * @returns {String} 当前浏览器名称\r\n */\nexport var getExplorer = function getExplorer() {\n  var ua = window.navigator.userAgent;\n  var isExplorer = function isExplorer(exp) {\n    return ua.indexOf(exp) > -1;\n  };\n  if (isExplorer('MSIE')) return 'IE';else if (isExplorer('Firefox')) return 'Firefox';else if (isExplorer('Chrome')) return 'Chrome';else if (isExplorer('Opera')) return 'Opera';else if (isExplorer('Safari')) return 'Safari';\n};\n\n/**\r\n * @description 绑定事件 on(element, event, handler)\r\n */\nexport var on = function () {\n  if (document.addEventListener) {\n    return function (element, event, handler) {\n      if (element && event && handler) {\n        element.addEventListener(event, handler, false);\n      }\n    };\n  } else {\n    return function (element, event, handler) {\n      if (element && event && handler) {\n        element.attachEvent('on' + event, handler);\n      }\n    };\n  }\n}();\n\n/**\r\n * @description 解绑事件 off(element, event, handler)\r\n */\nexport var off = function () {\n  if (document.removeEventListener) {\n    return function (element, event, handler) {\n      if (element && event) {\n        element.removeEventListener(event, handler, false);\n      }\n    };\n  } else {\n    return function (element, event, handler) {\n      if (element && event) {\n        element.detachEvent('on' + event, handler);\n      }\n    };\n  }\n}();\n\n/**\r\n * 判断一个对象是否存在key，如果传入第二个参数key，则是判断这个obj对象是否存在key这个属性\r\n * 如果没有传入key这个参数，则判断obj对象是否有键值对\r\n */\nexport var hasKey = function hasKey(obj, key) {\n  if (key) return key in obj;else {\n    var keysArr = Object.keys(obj);\n    return keysArr.length;\n  }\n};\n\n/**\r\n * @param {*} obj1 对象\r\n * @param {*} obj2 对象\r\n * @description 判断两个对象是否相等，这两个对象的值只能是数字或字符串\r\n */\nexport var objEqual = function objEqual(obj1, obj2) {\n  var keysArr1 = Object.keys(obj1);\n  var keysArr2 = Object.keys(obj2);\n  if (keysArr1.length !== keysArr2.length) return false;else if (keysArr1.length === 0 && keysArr2.length === 0) return true;\n  /* eslint-disable-next-line */else return !keysArr1.some(function (key) {\n    return obj1[key] != obj2[key];\n  });\n};",{"version":3,"names":["forEach","arr","fn","length","i","len","item","getIntersection","arr1","arr2","Math","min","res","indexOf","push","getUnion","Array","from","Set","concat","_toConsumableArray","hasOneOf","targetarr","some","_","oneOf","value","validList","isMillisecond","timeStamp","timeStr","String","isEarly","currentTime","getHandledValue","num","getDate","startType","d","Date","year","getFullYear","month","getMonth","date","hours","getHours","minutes","getMinutes","second","getSeconds","resStr","getRelativeTime","IS_MILLISECOND","floor","Number","parse","IS_EARLY","diff","dirStr","getExplorer","ua","window","navigator","userAgent","isExplorer","exp","on","document","addEventListener","element","event","handler","attachEvent","off","removeEventListener","detachEvent","hasKey","obj","key","keysArr","Object","keys","objEqual","obj1","obj2","keysArr1","keysArr2"],"sources":["D:/WorkSpace/IdeaProjects/harrier/harrier-ui/src/libs/tools.js"],"sourcesContent":["export const forEach = (arr, fn) => {\r\n  if (!arr.length || !fn) return\r\n  let i = -1\r\n  let len = arr.length\r\n  while (++i < len) {\r\n    let item = arr[i]\r\n    fn(item, i, arr)\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array} arr1\r\n * @param {Array} arr2\r\n * @description 得到两个数组的交集, 两个数组的元素为数值或字符串\r\n */\r\nexport const getIntersection = (arr1, arr2) => {\r\n  let len = Math.min(arr1.length, arr2.length)\r\n  let i = -1\r\n  let res = []\r\n  while (++i < len) {\r\n    const item = arr2[i]\r\n    if (arr1.indexOf(item) > -1) res.push(item)\r\n  }\r\n  return res\r\n}\r\n\r\n/**\r\n * @param {Array} arr1\r\n * @param {Array} arr2\r\n * @description 得到两个数组的并集, 两个数组的元素为数值或字符串\r\n */\r\nexport const getUnion = (arr1, arr2) => {\r\n  return Array.from(new Set([...arr1, ...arr2]))\r\n}\r\n\r\n/**\r\n * @param {Array} target 目标数组\r\n * @param {Array} arr 需要查询的数组\r\n * @description 判断要查询的数组是否至少有一个元素包含在目标数组中\r\n */\r\nexport const hasOneOf = (targetarr, arr) => {\r\n  return targetarr.some(_ => arr.indexOf(_) > -1)\r\n}\r\n\r\n/**\r\n * @param {String|Number} value 要验证的字符串或数值\r\n * @param {*} validList 用来验证的列表\r\n */\r\nexport function oneOf (value, validList) {\r\n  for (let i = 0; i < validList.length; i++) {\r\n    if (value === validList[i]) {\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\n/**\r\n * @param {Number} timeStamp 判断时间戳格式是否是毫秒\r\n * @returns {Boolean}\r\n */\r\nconst isMillisecond = timeStamp => {\r\n  const timeStr = String(timeStamp)\r\n  return timeStr.length > 10\r\n}\r\n\r\n/**\r\n * @param {Number} timeStamp 传入的时间戳\r\n * @param {Number} currentTime 当前时间时间戳\r\n * @returns {Boolean} 传入的时间戳是否早于当前时间戳\r\n */\r\nconst isEarly = (timeStamp, currentTime) => {\r\n  return timeStamp < currentTime\r\n}\r\n\r\n/**\r\n * @param {Number} num 数值\r\n * @returns {String} 处理后的字符串\r\n * @description 如果传入的数值小于10，即位数只有1位，则在前面补充0\r\n */\r\nconst getHandledValue = num => {\r\n  return num < 10 ? '0' + num : num\r\n}\r\n\r\n/**\r\n * @param {Number} timeStamp 传入的时间戳\r\n * @param {Number} startType 要返回的时间字符串的格式类型，传入'year'则返回年开头的完整时间\r\n */\r\nconst getDate = (timeStamp, startType) => {\r\n  const d = new Date(timeStamp * 1000)\r\n  const year = d.getFullYear()\r\n  const month = getHandledValue(d.getMonth() + 1)\r\n  const date = getHandledValue(d.getDate())\r\n  const hours = getHandledValue(d.getHours())\r\n  const minutes = getHandledValue(d.getMinutes())\r\n  const second = getHandledValue(d.getSeconds())\r\n  let resStr = ''\r\n  if (startType === 'year') resStr = year + '-' + month + '-' + date + ' ' + hours + ':' + minutes + ':' + second\r\n  else resStr = month + '-' + date + ' ' + hours + ':' + minutes\r\n  return resStr\r\n}\r\n\r\n/**\r\n * @param {String|Number} timeStamp 时间戳\r\n * @returns {String} 相对时间字符串\r\n */\r\nexport const getRelativeTime = timeStamp => {\r\n  // 判断当前传入的时间戳是秒格式还是毫秒\r\n  const IS_MILLISECOND = isMillisecond(timeStamp)\r\n  // 如果是毫秒格式则转为秒格式\r\n  if (IS_MILLISECOND) Math.floor(timeStamp /= 1000)\r\n  // 传入的时间戳可以是数值或字符串类型，这里统一转为数值类型\r\n  timeStamp = Number(timeStamp)\r\n  // 获取当前时间时间戳\r\n  const currentTime = Math.floor(Date.parse(new Date()) / 1000)\r\n  // 判断传入时间戳是否早于当前时间戳\r\n  const IS_EARLY = isEarly(timeStamp, currentTime)\r\n  // 获取两个时间戳差值\r\n  let diff = currentTime - timeStamp\r\n  // 如果IS_EARLY为false则差值取反\r\n  if (!IS_EARLY) diff = -diff\r\n  let resStr = ''\r\n  const dirStr = IS_EARLY ? '前' : '后'\r\n  // 少于等于59秒\r\n  if (diff <= 59) resStr = diff + '秒' + dirStr\r\n  // 多于59秒，少于等于59分钟59秒\r\n  else if (diff > 59 && diff <= 3599) resStr = Math.floor(diff / 60) + '分钟' + dirStr\r\n  // 多于59分钟59秒，少于等于23小时59分钟59秒\r\n  else if (diff > 3599 && diff <= 86399) resStr = Math.floor(diff / 3600) + '小时' + dirStr\r\n  // 多于23小时59分钟59秒，少于等于29天59分钟59秒\r\n  else if (diff > 86399 && diff <= 2623859) resStr = Math.floor(diff / 86400) + '天' + dirStr\r\n  // 多于29天59分钟59秒，少于364天23小时59分钟59秒，且传入的时间戳早于当前\r\n  else if (diff > 2623859 && diff <= 31567859 && IS_EARLY) resStr = getDate(timeStamp)\r\n  else resStr = getDate(timeStamp, 'year')\r\n  return resStr\r\n}\r\n\r\n/**\r\n * @returns {String} 当前浏览器名称\r\n */\r\nexport const getExplorer = () => {\r\n  const ua = window.navigator.userAgent\r\n  const isExplorer = (exp) => {\r\n    return ua.indexOf(exp) > -1\r\n  }\r\n  if (isExplorer('MSIE')) return 'IE'\r\n  else if (isExplorer('Firefox')) return 'Firefox'\r\n  else if (isExplorer('Chrome')) return 'Chrome'\r\n  else if (isExplorer('Opera')) return 'Opera'\r\n  else if (isExplorer('Safari')) return 'Safari'\r\n}\r\n\r\n/**\r\n * @description 绑定事件 on(element, event, handler)\r\n */\r\nexport const on = (function () {\r\n  if (document.addEventListener) {\r\n    return function (element, event, handler) {\r\n      if (element && event && handler) {\r\n        element.addEventListener(event, handler, false)\r\n      }\r\n    }\r\n  } else {\r\n    return function (element, event, handler) {\r\n      if (element && event && handler) {\r\n        element.attachEvent('on' + event, handler)\r\n      }\r\n    }\r\n  }\r\n})()\r\n\r\n/**\r\n * @description 解绑事件 off(element, event, handler)\r\n */\r\nexport const off = (function () {\r\n  if (document.removeEventListener) {\r\n    return function (element, event, handler) {\r\n      if (element && event) {\r\n        element.removeEventListener(event, handler, false)\r\n      }\r\n    }\r\n  } else {\r\n    return function (element, event, handler) {\r\n      if (element && event) {\r\n        element.detachEvent('on' + event, handler)\r\n      }\r\n    }\r\n  }\r\n})()\r\n\r\n/**\r\n * 判断一个对象是否存在key，如果传入第二个参数key，则是判断这个obj对象是否存在key这个属性\r\n * 如果没有传入key这个参数，则判断obj对象是否有键值对\r\n */\r\nexport const hasKey = (obj, key) => {\r\n  if (key) return key in obj\r\n  else {\r\n    let keysArr = Object.keys(obj)\r\n    return keysArr.length\r\n  }\r\n}\r\n\r\n/**\r\n * @param {*} obj1 对象\r\n * @param {*} obj2 对象\r\n * @description 判断两个对象是否相等，这两个对象的值只能是数字或字符串\r\n */\r\nexport const objEqual = (obj1, obj2) => {\r\n  const keysArr1 = Object.keys(obj1)\r\n  const keysArr2 = Object.keys(obj2)\r\n  if (keysArr1.length !== keysArr2.length) return false\r\n  else if (keysArr1.length === 0 && keysArr2.length === 0) return true\r\n  /* eslint-disable-next-line */\r\n  else return !keysArr1.some(key => obj1[key] != obj2[key])\r\n}\r\n"],"mappings":"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"}]}