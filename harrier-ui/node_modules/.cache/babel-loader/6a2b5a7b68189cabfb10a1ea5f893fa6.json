{"remainingRequest":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\components\\paste-editor\\paste-editor.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\components\\paste-editor\\paste-editor.vue","mtime":1681468306473},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\.babelrc","mtime":1681468306354},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport CodeMirror from 'codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport { forEach } from '@/libs/tools';\nimport createPlaceholder from \"./plugins/placeholder\";\nexport default {\n  name: 'PasteEditor',\n  props: {\n    value: Array,\n    pasteData: {\n      type: String,\n      default: ''\n    },\n    placeholder: {\n      type: String,\n      default: '从网页或其他应用软件复制表格数据，粘贴到这里 。默认第一行是表头，使用回车键添加新行，使用Tab键区分列。'\n    }\n  },\n  data: function data() {\n    return {\n      pasteDataArr: [],\n      rowArrLength: 0,\n      editor: null\n    };\n  },\n  watch: {\n    pasteData: function pasteData(val) {\n      if (val === '') {\n        this.editor.setValue('');\n      }\n    }\n  },\n  computed: {\n    rowNum: function rowNum() {\n      return this.pasteDataArr.length;\n    },\n    colNum: function colNum() {\n      return this.pasteDataArr[0] ? this.pasteDataArr[0].length : 0;\n    }\n  },\n  methods: {\n    handleKeyup: function handleKeyup(e) {\n      this.handleAreaData();\n    },\n    /**\r\n     * @description 处理粘贴操作\r\n     */\n    handleContentChanged: function handleContentChanged(content) {\n      var pasteData = content.trim();\n      this.$emit('on-content-change', pasteData);\n      var rows = pasteData.split(/[\\n\\u0085\\u2028\\u2029]|\\r\\n?/g).map(function (row) {\n        return row.split('\\t');\n      });\n      if (content === '') rows = [];\n      this.pasteDataArr = rows;\n      this.clearLineClass();\n      this.checkColNumInEveryRow();\n      this.$emit('input', this.pasteDataArr);\n    },\n    /**\r\n     * @description 检查除第一行的每一行列数是否与第一行相同\r\n     */\n    checkColNumInEveryRow: function checkColNumInEveryRow() {\n      var i = 0;\n      var len = this.rowNum;\n      if (len === 0) return;\n      while (++i < len) {\n        var item = this.pasteDataArr[i];\n        if (item.length !== this.colNum && (!(i === len - 1 && item.length === 1 && item[0] === '') || i !== len - 1)) {\n          this.markIncorrectRow(i);\n          this.$emit('on-error', i);\n          return false;\n        }\n      }\n      this.$emit('on-success', this.pasteDataArr);\n      return true;\n    },\n    /**\r\n     * @description 标记不符合格式的一行\r\n     */\n    markIncorrectRow: function markIncorrectRow(index) {\n      this.editor.addLineClass(index, 'text', 'incorrect-row');\n    },\n    /**\r\n     * @description 标记不符合格式的一行\r\n     */\n    clearLineClass: function clearLineClass() {\n      var _this = this;\n      forEach(this.pasteDataArr, function (item, index) {\n        _this.editor.removeLineClass(index, 'text', 'incorrect-row');\n      });\n    }\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n    createPlaceholder(CodeMirror);\n    this.editor = CodeMirror.fromTextArea(this.$refs.codemirror, {\n      lineNumbers: true,\n      tabSize: 1,\n      lineWrapping: true,\n      placeholder: this.placeholder\n    });\n    this.editor.on('change', function (editor) {\n      _this2.handleContentChanged(editor.getValue());\n    });\n    this.editor.addLineClass(0, 'text', 'first-row');\n  }\n};",{"version":3,"names":["CodeMirror","forEach","createPlaceholder","name","props","value","Array","pasteData","type","String","default","placeholder","data","pasteDataArr","rowArrLength","editor","watch","val","setValue","computed","rowNum","length","colNum","methods","handleKeyup","e","handleAreaData","handleContentChanged","content","trim","$emit","rows","split","map","row","clearLineClass","checkColNumInEveryRow","i","len","item","markIncorrectRow","index","addLineClass","_this","removeLineClass","mounted","_this2","fromTextArea","$refs","codemirror","lineNumbers","tabSize","lineWrapping","on","getValue"],"sources":["src/components/paste-editor/paste-editor.vue"],"sourcesContent":["<template>\r\n  <div class=\"paste-editor-wrapper\">\r\n    <textarea ref=\"codemirror\" class=\"textarea-el\"></textarea>\r\n  </div>\r\n</template>\r\n<script>\r\nimport CodeMirror from 'codemirror'\r\nimport 'codemirror/lib/codemirror.css'\r\nimport { forEach } from '@/libs/tools'\r\nimport createPlaceholder from './plugins/placeholder'\r\nexport default {\r\n  name: 'PasteEditor',\r\n  props: {\r\n    value: Array,\r\n    pasteData: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    placeholder: {\r\n      type: String,\r\n      default: '从网页或其他应用软件复制表格数据，粘贴到这里 。默认第一行是表头，使用回车键添加新行，使用Tab键区分列。'\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      pasteDataArr: [],\r\n      rowArrLength: 0,\r\n      editor: null\r\n    }\r\n  },\r\n  watch: {\r\n    pasteData (val) {\r\n      if (val === '') {\r\n        this.editor.setValue('')\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    rowNum () {\r\n      return this.pasteDataArr.length\r\n    },\r\n    colNum () {\r\n      return this.pasteDataArr[0] ? this.pasteDataArr[0].length : 0\r\n    }\r\n  },\r\n  methods: {\r\n    handleKeyup (e) {\r\n      this.handleAreaData()\r\n    },\r\n    /**\r\n     * @description 处理粘贴操作\r\n     */\r\n    handleContentChanged (content) {\r\n      let pasteData = content.trim()\r\n      this.$emit('on-content-change', pasteData)\r\n      let rows = pasteData.split((/[\\n\\u0085\\u2028\\u2029]|\\r\\n?/g)).map(row => {\r\n        return row.split('\\t')\r\n      })\r\n      if (content === '') rows = []\r\n      this.pasteDataArr = rows\r\n      this.clearLineClass()\r\n      this.checkColNumInEveryRow()\r\n      this.$emit('input', this.pasteDataArr)\r\n    },\r\n    /**\r\n     * @description 检查除第一行的每一行列数是否与第一行相同\r\n     */\r\n    checkColNumInEveryRow () {\r\n      let i = 0\r\n      const len = this.rowNum\r\n      if (len === 0) return\r\n      while (++i < len) {\r\n        let item = this.pasteDataArr[i]\r\n        if (item.length !== this.colNum && (!(i === len - 1 && item.length === 1 && item[0] === '') || i !== len - 1)) {\r\n          this.markIncorrectRow(i)\r\n          this.$emit('on-error', i)\r\n          return false\r\n        }\r\n      }\r\n      this.$emit('on-success', this.pasteDataArr)\r\n      return true\r\n    },\r\n    /**\r\n     * @description 标记不符合格式的一行\r\n     */\r\n    markIncorrectRow (index) {\r\n      this.editor.addLineClass(index, 'text', 'incorrect-row')\r\n    },\r\n    /**\r\n     * @description 标记不符合格式的一行\r\n     */\r\n    clearLineClass () {\r\n      forEach(this.pasteDataArr, (item, index) => {\r\n        this.editor.removeLineClass(index, 'text', 'incorrect-row')\r\n      })\r\n    }\r\n  },\r\n  mounted () {\r\n    createPlaceholder(CodeMirror)\r\n    this.editor = CodeMirror.fromTextArea(this.$refs.codemirror, {\r\n      lineNumbers: true,\r\n      tabSize: 1,\r\n      lineWrapping: true,\r\n      placeholder: this.placeholder\r\n    })\r\n    this.editor.on('change', (editor) => {\r\n      this.handleContentChanged(editor.getValue())\r\n    })\r\n    this.editor.addLineClass(0, 'text', 'first-row')\r\n  }\r\n}\r\n</script>\r\n<style lang=\"less\">\r\n@import './paste-editor.less';\r\n</style>\r\n"],"mappings":";AAMA,OAAAA,UAAA;AACA;AACA,SAAAC,OAAA;AACA,OAAAC,iBAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACAC,KAAA,EAAAC,KAAA;IACAC,SAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,OAAA;IACA;IACAC,WAAA;MACAH,IAAA,EAAAC,MAAA;MACAC,OAAA;IACA;EACA;EACAE,IAAA,WAAAA,KAAA;IACA;MACAC,YAAA;MACAC,YAAA;MACAC,MAAA;IACA;EACA;EACAC,KAAA;IACAT,SAAA,WAAAA,UAAAU,GAAA;MACA,IAAAA,GAAA;QACA,KAAAF,MAAA,CAAAG,QAAA;MACA;IACA;EACA;EACAC,QAAA;IACAC,MAAA,WAAAA,OAAA;MACA,YAAAP,YAAA,CAAAQ,MAAA;IACA;IACAC,MAAA,WAAAA,OAAA;MACA,YAAAT,YAAA,WAAAA,YAAA,IAAAQ,MAAA;IACA;EACA;EACAE,OAAA;IACAC,WAAA,WAAAA,YAAAC,CAAA;MACA,KAAAC,cAAA;IACA;IACA;AACA;AACA;IACAC,oBAAA,WAAAA,qBAAAC,OAAA;MACA,IAAArB,SAAA,GAAAqB,OAAA,CAAAC,IAAA;MACA,KAAAC,KAAA,sBAAAvB,SAAA;MACA,IAAAwB,IAAA,GAAAxB,SAAA,CAAAyB,KAAA,kCAAAC,GAAA,WAAAC,GAAA;QACA,OAAAA,GAAA,CAAAF,KAAA;MACA;MACA,IAAAJ,OAAA,SAAAG,IAAA;MACA,KAAAlB,YAAA,GAAAkB,IAAA;MACA,KAAAI,cAAA;MACA,KAAAC,qBAAA;MACA,KAAAN,KAAA,eAAAjB,YAAA;IACA;IACA;AACA;AACA;IACAuB,qBAAA,WAAAA,sBAAA;MACA,IAAAC,CAAA;MACA,IAAAC,GAAA,QAAAlB,MAAA;MACA,IAAAkB,GAAA;MACA,SAAAD,CAAA,GAAAC,GAAA;QACA,IAAAC,IAAA,QAAA1B,YAAA,CAAAwB,CAAA;QACA,IAAAE,IAAA,CAAAlB,MAAA,UAAAC,MAAA,OAAAe,CAAA,KAAAC,GAAA,QAAAC,IAAA,CAAAlB,MAAA,UAAAkB,IAAA,eAAAF,CAAA,KAAAC,GAAA;UACA,KAAAE,gBAAA,CAAAH,CAAA;UACA,KAAAP,KAAA,aAAAO,CAAA;UACA;QACA;MACA;MACA,KAAAP,KAAA,oBAAAjB,YAAA;MACA;IACA;IACA;AACA;AACA;IACA2B,gBAAA,WAAAA,iBAAAC,KAAA;MACA,KAAA1B,MAAA,CAAA2B,YAAA,CAAAD,KAAA;IACA;IACA;AACA;AACA;IACAN,cAAA,WAAAA,eAAA;MAAA,IAAAQ,KAAA;MACA1C,OAAA,MAAAY,YAAA,YAAA0B,IAAA,EAAAE,KAAA;QACAE,KAAA,CAAA5B,MAAA,CAAA6B,eAAA,CAAAH,KAAA;MACA;IACA;EACA;EACAI,OAAA,WAAAA,QAAA;IAAA,IAAAC,MAAA;IACA5C,iBAAA,CAAAF,UAAA;IACA,KAAAe,MAAA,GAAAf,UAAA,CAAA+C,YAAA,MAAAC,KAAA,CAAAC,UAAA;MACAC,WAAA;MACAC,OAAA;MACAC,YAAA;MACAzC,WAAA,OAAAA;IACA;IACA,KAAAI,MAAA,CAAAsC,EAAA,qBAAAtC,MAAA;MACA+B,MAAA,CAAAnB,oBAAA,CAAAZ,MAAA,CAAAuC,QAAA;IACA;IACA,KAAAvC,MAAA,CAAA2B,YAAA;EACA;AACA"}]}