{"remainingRequest":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\libs\\excel.js","dependencies":[{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\libs\\excel.js","mtime":1681468306488},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\.babelrc","mtime":1681468306354},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.typed.uint8-array\";\nimport \"core-js/modules/es6.regexp.to-string\";\n/* eslint-disable */\nimport XLSX from 'xlsx';\nfunction auto_width(ws, data) {\n  /*set worksheet max width per col*/\n  var colWidth = data.map(function (row) {\n    return row.map(function (val) {\n      /*if null/undefined*/\n      if (val == null) {\n        return {\n          'wch': 10\n        };\n      }\n      /*if chinese*/else if (val.toString().charCodeAt(0) > 255) {\n        return {\n          'wch': val.toString().length * 2\n        };\n      } else {\n        return {\n          'wch': val.toString().length\n        };\n      }\n    });\n  });\n  /*start in the first row*/\n  var result = colWidth[0];\n  for (var i = 1; i < colWidth.length; i++) {\n    for (var j = 0; j < colWidth[i].length; j++) {\n      if (result[j]['wch'] < colWidth[i][j]['wch']) {\n        result[j]['wch'] = colWidth[i][j]['wch'];\n      }\n    }\n  }\n  ws['!cols'] = result;\n}\nfunction json_to_array(key, jsonData) {\n  return jsonData.map(function (v) {\n    return key.map(function (j) {\n      return v[j];\n    });\n  });\n}\n\n// fix data,return string\nfunction fixdata(data) {\n  var o = '';\n  var l = 0;\n  var w = 10240;\n  for (; l < data.byteLength / w; ++l) o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)));\n  o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)));\n  return o;\n}\n\n// get head from excel file,return array\nfunction get_header_row(sheet) {\n  var headers = [];\n  var range = XLSX.utils.decode_range(sheet['!ref']);\n  var C;\n  var R = range.s.r; /* start in the first row */\n  for (C = range.s.c; C <= range.e.c; ++C) {\n    /* walk every column in the range */\n    var cell = sheet[XLSX.utils.encode_cell({\n      c: C,\n      r: R\n    })]; /* find the cell in the first row */\n    var hdr = 'UNKNOWN ' + C; // <-- replace with your desired default\n    if (cell && cell.t) hdr = XLSX.utils.format_cell(cell);\n    headers.push(hdr);\n  }\n  return headers;\n}\nexport var export_table_to_excel = function export_table_to_excel(id, filename) {\n  var table = document.getElementById(id);\n  var wb = XLSX.utils.table_to_book(table);\n  XLSX.writeFile(wb, filename);\n\n  /* the second way */\n  // const table = document.getElementById(id);\n  // const wb = XLSX.utils.book_new();\n  // const ws = XLSX.utils.table_to_sheet(table);\n  // XLSX.utils.book_append_sheet(wb, ws, filename);\n  // XLSX.writeFile(wb, filename);\n};\n\nexport var export_json_to_excel = function export_json_to_excel(_ref) {\n  var data = _ref.data,\n    key = _ref.key,\n    title = _ref.title,\n    filename = _ref.filename,\n    autoWidth = _ref.autoWidth;\n  var wb = XLSX.utils.book_new();\n  data.unshift(title);\n  var ws = XLSX.utils.json_to_sheet(data, {\n    header: key,\n    skipHeader: true\n  });\n  if (autoWidth) {\n    var arr = json_to_array(key, data);\n    auto_width(ws, arr);\n  }\n  XLSX.utils.book_append_sheet(wb, ws, filename);\n  XLSX.writeFile(wb, filename + '.xlsx');\n};\nexport var export_array_to_excel = function export_array_to_excel(_ref2) {\n  var key = _ref2.key,\n    data = _ref2.data,\n    title = _ref2.title,\n    filename = _ref2.filename,\n    autoWidth = _ref2.autoWidth;\n  var wb = XLSX.utils.book_new();\n  var arr = json_to_array(key, data);\n  arr.unshift(title);\n  var ws = XLSX.utils.aoa_to_sheet(arr);\n  if (autoWidth) {\n    auto_width(ws, arr);\n  }\n  XLSX.utils.book_append_sheet(wb, ws, filename);\n  XLSX.writeFile(wb, filename + '.xlsx');\n};\nexport var read = function read(data, type) {\n  /* if type == 'base64' must fix data first */\n  // const fixedData = fixdata(data)\n  // const workbook = XLSX.read(btoa(fixedData), { type: 'base64' })\n  var workbook = XLSX.read(data, {\n    type: type\n  });\n  var firstSheetName = workbook.SheetNames[0];\n  var worksheet = workbook.Sheets[firstSheetName];\n  var header = get_header_row(worksheet);\n  var results = XLSX.utils.sheet_to_json(worksheet);\n  return {\n    header: header,\n    results: results\n  };\n};\nexport default {\n  export_table_to_excel: export_table_to_excel,\n  export_array_to_excel: export_array_to_excel,\n  export_json_to_excel: export_json_to_excel,\n  read: read\n};",{"version":3,"names":["XLSX","auto_width","ws","data","colWidth","map","row","val","toString","charCodeAt","length","result","i","j","json_to_array","key","jsonData","v","fixdata","o","l","w","byteLength","String","fromCharCode","apply","Uint8Array","slice","get_header_row","sheet","headers","range","utils","decode_range","C","R","s","r","c","e","cell","encode_cell","hdr","t","format_cell","push","export_table_to_excel","id","filename","table","document","getElementById","wb","table_to_book","writeFile","export_json_to_excel","_ref","title","autoWidth","book_new","unshift","json_to_sheet","header","skipHeader","arr","book_append_sheet","export_array_to_excel","_ref2","aoa_to_sheet","read","type","workbook","firstSheetName","SheetNames","worksheet","Sheets","results","sheet_to_json"],"sources":["D:/WorkSpace/IdeaProjects/harrier/harrier-ui/src/libs/excel.js"],"sourcesContent":["/* eslint-disable */\r\nimport XLSX from 'xlsx';\r\n\r\nfunction auto_width(ws, data){\r\n    /*set worksheet max width per col*/\r\n    const colWidth = data.map(row => row.map(val => {\r\n        /*if null/undefined*/\r\n        if (val == null) {\r\n            return {'wch': 10};\r\n        }\r\n        /*if chinese*/\r\n        else if (val.toString().charCodeAt(0) > 255) {\r\n            return {'wch': val.toString().length * 2};\r\n        } else {\r\n            return {'wch': val.toString().length};\r\n        }\r\n    }))\r\n    /*start in the first row*/\r\n    let result = colWidth[0];\r\n    for (let i = 1; i < colWidth.length; i++) {\r\n        for (let j = 0; j < colWidth[i].length; j++) {\r\n            if (result[j]['wch'] < colWidth[i][j]['wch']) {\r\n                result[j]['wch'] = colWidth[i][j]['wch'];\r\n            }\r\n        }\r\n    }\r\n    ws['!cols'] = result;\r\n}\r\n\r\nfunction json_to_array(key, jsonData){\r\n    return jsonData.map(v => key.map(j => { return v[j] }));\r\n}\r\n\r\n// fix data,return string\r\nfunction fixdata(data) {\r\n    let o = ''\r\n    let l = 0\r\n    const w = 10240\r\n    for (; l < data.byteLength / w; ++l) o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)))\r\n    o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)))\r\n    return o\r\n}\r\n\r\n// get head from excel file,return array\r\nfunction get_header_row(sheet) {\r\n    const headers = []\r\n    const range = XLSX.utils.decode_range(sheet['!ref'])\r\n    let C\r\n    const R = range.s.r /* start in the first row */\r\n    for (C = range.s.c; C <= range.e.c; ++C) { /* walk every column in the range */\r\n        var cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })] /* find the cell in the first row */\r\n        var hdr = 'UNKNOWN ' + C // <-- replace with your desired default\r\n        if (cell && cell.t) hdr = XLSX.utils.format_cell(cell)\r\n        headers.push(hdr)\r\n    }\r\n    return headers\r\n}\r\n\r\nexport const export_table_to_excel= (id, filename) => {\r\n    const table = document.getElementById(id);\r\n    const wb = XLSX.utils.table_to_book(table);\r\n    XLSX.writeFile(wb, filename);\r\n\r\n    /* the second way */\r\n    // const table = document.getElementById(id);\r\n    // const wb = XLSX.utils.book_new();\r\n    // const ws = XLSX.utils.table_to_sheet(table);\r\n    // XLSX.utils.book_append_sheet(wb, ws, filename);\r\n    // XLSX.writeFile(wb, filename);\r\n}\r\n\r\nexport const export_json_to_excel = ({data, key, title, filename, autoWidth}) => {\r\n    const wb = XLSX.utils.book_new();\r\n    data.unshift(title);\r\n    const ws = XLSX.utils.json_to_sheet(data, {header: key, skipHeader: true});\r\n    if(autoWidth){\r\n        const arr = json_to_array(key, data);\r\n        auto_width(ws, arr);\r\n    }\r\n    XLSX.utils.book_append_sheet(wb, ws, filename);\r\n    XLSX.writeFile(wb, filename + '.xlsx');\r\n}\r\n\r\nexport const export_array_to_excel = ({key, data, title, filename, autoWidth}) => {\r\n    const wb = XLSX.utils.book_new();\r\n    const arr = json_to_array(key, data);\r\n    arr.unshift(title);\r\n    const ws = XLSX.utils.aoa_to_sheet(arr);\r\n    if(autoWidth){\r\n        auto_width(ws, arr);\r\n    }\r\n    XLSX.utils.book_append_sheet(wb, ws, filename);\r\n    XLSX.writeFile(wb, filename + '.xlsx');\r\n}\r\n\r\nexport const read = (data, type) => {\r\n    /* if type == 'base64' must fix data first */\r\n    // const fixedData = fixdata(data)\r\n    // const workbook = XLSX.read(btoa(fixedData), { type: 'base64' })\r\n    const workbook = XLSX.read(data, { type: type });\r\n    const firstSheetName = workbook.SheetNames[0];\r\n    const worksheet = workbook.Sheets[firstSheetName];\r\n    const header = get_header_row(worksheet);\r\n    const results = XLSX.utils.sheet_to_json(worksheet);\r\n    return {header, results};\r\n}\r\n\r\nexport default {\r\n  export_table_to_excel,\r\n  export_array_to_excel,\r\n  export_json_to_excel,\r\n  read\r\n}\r\n"],"mappings":"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"}]}