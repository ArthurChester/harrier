{"remainingRequest":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\view\\spdb\\job\\jobList\\jobimgs\\resource.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\view\\spdb\\job\\jobList\\jobimgs\\resource.vue","mtime":1681468306541},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\.babelrc","mtime":1681468306354},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["export default {\n  props: {\n    transData: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    return {\n      jobResusgList: [],\n      graph: '',\n      option: {},\n      jobstat: []\n    };\n  },\n  methods: {\n    init: function init() {\n      this.getResUsgInfo(); // 获取作业对应的资源消耗情况，包括内存和CPU\n      this.graph = this.$echarts.init(document.getElementById('Resource'));\n    },\n    // 获取作业对应的资源消耗情况，包括内存和CPU\n    getResUsgInfo: function getResUsgInfo() {\n      var _this = this;\n      var job = this.transData.job;\n      var httpConfig = {\n        method: 'GET',\n        url: '/mjobresusginfo/getResUsgInfo',\n        params: {\n          job: job\n        }\n      };\n      this.jobResusgList = [];\n      this.$ajax(httpConfig).then(function (resp) {\n        if (resp.status && resp.status === 200) {\n          _this.jobResusgList = resp.data;\n          var valueList1 = _this.jobResusgList.map(function (item) {\n            return item['CpuTime'];\n          });\n          var avg = 0;\n          var sum = 0;\n          for (var i = 0; i < valueList1.length; i++) {\n            sum += valueList1[i];\n          }\n          avg = sum / valueList1.length;\n          if (avg > 0) {\n            _this.getResUsgView();\n          } else {\n            _this.getTimeUsgView();\n          }\n        }\n      });\n    },\n    getResUsgView: function getResUsgView() {\n      var _this2 = this;\n      var data = this.jobResusgList;\n      var dateList = data.map(function (item) {\n        return item['LogDate'];\n      });\n      var valueList1 = data.map(function (item) {\n        return item['CpuTime'];\n      });\n      var valueList2 = data.map(function (item) {\n        return item['SpaceTime'];\n      });\n      var option = {\n        title: {\n          text: '近一个月资源消耗',\n          x: 'center',\n          align: 'right'\n        },\n        grid: {\n          bottom: 20\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            animation: false,\n            label: {\n              backgroundColor: '#505765'\n            }\n          }\n        },\n        legend: {\n          data: ['CPU消耗', 'Spool空间消耗'],\n          x: 'right'\n        },\n        lineStyle: {\n          width: 4\n        },\n        xAxis: [{\n          type: 'category',\n          boundaryGap: false,\n          axisLine: {\n            onZero: false\n          },\n          data: dateList\n        }],\n        yAxis: [{\n          name: 'CPU消耗(秒)',\n          type: 'value'\n        }, {\n          name: 'Spool空间消耗(GB)',\n          type: 'value'\n        }],\n        series: [{\n          name: 'CPU消耗',\n          type: 'line',\n          smooth: true,\n          animation: true,\n          areaStyle: {\n            color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n              offset: 0,\n              color: '#1370D8'\n            }, {\n              offset: 0.5,\n              color: '#FFFFFF'\n            }])\n          },\n          lineStyle: {\n            width: 3\n          },\n          color: '#1370D8',\n          data: valueList1,\n          markPoint: {\n            data: [{\n              type: 'max',\n              name: 'Max'\n            }, {\n              type: 'min',\n              name: 'Min'\n            }]\n          },\n          markLine: {\n            data: [{\n              type: 'average',\n              name: 'Avg'\n            }]\n          }\n        }, {\n          name: 'Spool空间消耗',\n          type: 'line',\n          yAxisIndex: 1,\n          smooth: true,\n          animation: true,\n          areaStyle: {\n            color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n              offset: 0,\n              color: '#3AA255'\n            }, {\n              offset: 0.5,\n              color: '#FFFFFF'\n            }])\n          },\n          lineStyle: {\n            width: 3\n          },\n          color: '#3AA255',\n          data: valueList2,\n          markPoint: {\n            data: [{\n              type: 'max',\n              name: 'Max'\n            }, {\n              type: 'min',\n              name: 'Min'\n            }]\n          },\n          markLine: {\n            data: [{\n              type: 'average',\n              name: 'Avg'\n            }]\n          }\n        }]\n      };\n      this.graph.setOption(option);\n      window.addEventListener('resize', function () {\n        _this2.graph.resize();\n      });\n    },\n    getTimeUsgView: function getTimeUsgView() {\n      var data = this.jobResusgList;\n      var dateList = data.map(function (item) {\n        return item['LogDate'];\n      });\n      var valueList1 = data.map(function (item) {\n        return item['RunningTime'];\n      });\n      var option = {\n        title: {\n          text: '近一个月作业耗时情况',\n          x: 'center',\n          align: 'right'\n        },\n        grid: {\n          bottom: 20\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            animation: false,\n            label: {\n              backgroundColor: '#505765'\n            }\n          }\n        },\n        legend: {\n          data: ['作业运行耗时'],\n          x: 'right'\n        },\n        lineStyle: {\n          width: 4\n        },\n        xAxis: [{\n          type: 'category',\n          boundaryGap: false,\n          axisLine: {\n            onZero: false\n          },\n          data: dateList\n        }],\n        yAxis: [{\n          name: '运行耗时(分钟)',\n          type: 'value'\n        }],\n        series: [{\n          name: '运行耗时',\n          type: 'line',\n          smooth: true,\n          animation: true,\n          areaStyle: {\n            color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n              offset: 0,\n              color: '#1370D8'\n            }, {\n              offset: 0.5,\n              color: '#FFFFFF'\n            }])\n          },\n          lineStyle: {\n            width: 3\n          },\n          color: '#1370D8',\n          data: valueList1,\n          markPoint: {\n            data: [{\n              type: 'max',\n              name: 'Max'\n            }, {\n              type: 'min',\n              name: 'Min'\n            }]\n          },\n          markLine: {\n            data: [{\n              type: 'average',\n              name: 'Avg'\n            }]\n          }\n        }]\n      };\n      this.graph.setOption(option);\n    }\n  },\n  mounted: function mounted() {\n    this.init();\n  }\n};",{"version":3,"names":["props","transData","type","Object","default","_default","data","jobResusgList","graph","option","jobstat","methods","init","getResUsgInfo","$echarts","document","getElementById","_this","job","httpConfig","method","url","params","$ajax","then","resp","status","valueList1","map","item","avg","sum","i","length","getResUsgView","getTimeUsgView","_this2","dateList","valueList2","title","text","x","align","grid","bottom","tooltip","trigger","axisPointer","animation","label","backgroundColor","legend","lineStyle","width","xAxis","boundaryGap","axisLine","onZero","yAxis","name","series","smooth","areaStyle","color","graphic","LinearGradient","offset","markPoint","markLine","yAxisIndex","setOption","window","addEventListener","resize","mounted"],"sources":["src/view/spdb/job/jobList/jobimgs/resource.vue"],"sourcesContent":["<template>\r\n  <div id=\"Resource\"></div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    transData: {\r\n      type: Object,\r\n      default: function () {\r\n        return {}\r\n      }\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      jobResusgList: [],\r\n      graph: '',\r\n      option: {},\r\n      jobstat: []\r\n    }\r\n  },\r\n  methods: {\r\n    init () {\r\n      this.getResUsgInfo() // 获取作业对应的资源消耗情况，包括内存和CPU\r\n      this.graph = this.$echarts.init(document.getElementById('Resource'))\r\n    },\r\n    // 获取作业对应的资源消耗情况，包括内存和CPU\r\n    getResUsgInfo () {\r\n      let job = this.transData.job\r\n      let httpConfig = {\r\n        method: 'GET',\r\n        url: '/mjobresusginfo/getResUsgInfo',\r\n        params: {\r\n          job: job\r\n        }\r\n      }\r\n      this.jobResusgList = []\r\n      this.$ajax(httpConfig)\r\n        .then(resp => {\r\n          if (resp.status && resp.status === 200) {\r\n            this.jobResusgList = resp.data\r\n            let valueList1 = this.jobResusgList.map(function (item) {\r\n              return item['CpuTime']\r\n            })\r\n            var avg = 0\r\n            var sum = 0\r\n            for (var i = 0; i < valueList1.length; i++) {\r\n              sum += valueList1[i]\r\n            }\r\n            avg = sum / valueList1.length\r\n            if (avg > 0) {\r\n              this.getResUsgView()\r\n            } else {\r\n              this.getTimeUsgView()\r\n            }\r\n          }\r\n        })\r\n    },\r\n    getResUsgView () {\r\n      let data = this.jobResusgList\r\n      let dateList = data.map(function (item) {\r\n        return item['LogDate']\r\n      })\r\n      let valueList1 = data.map(function (item) {\r\n        return item['CpuTime']\r\n      })\r\n      let valueList2 = data.map(function (item) {\r\n        return item['SpaceTime']\r\n      })\r\n      let option = {\r\n        title: {\r\n          text: '近一个月资源消耗',\r\n          x: 'center',\r\n          align: 'right'\r\n        },\r\n        grid: {\r\n          bottom: 20\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          axisPointer: {\r\n            type: 'cross',\r\n            animation: false,\r\n            label: {\r\n              backgroundColor: '#505765'\r\n            }\r\n          }\r\n        },\r\n        legend: {\r\n          data: ['CPU消耗', 'Spool空间消耗'],\r\n          x: 'right'\r\n        },\r\n        lineStyle: {\r\n          width: 4\r\n        },\r\n        xAxis: [\r\n          {\r\n            type: 'category',\r\n            boundaryGap: false,\r\n            axisLine: { onZero: false },\r\n            data: dateList\r\n          }\r\n        ],\r\n        yAxis: [\r\n          {\r\n            name: 'CPU消耗(秒)',\r\n            type: 'value'\r\n          },\r\n          {\r\n            name: 'Spool空间消耗(GB)',\r\n            type: 'value'\r\n          }\r\n        ],\r\n        series: [\r\n          {\r\n            name: 'CPU消耗',\r\n            type: 'line',\r\n            smooth: true,\r\n            animation: true,\r\n            areaStyle: {\r\n              color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n                {\r\n                  offset: 0,\r\n                  color: '#1370D8'\r\n                },\r\n                {\r\n                  offset: 0.5,\r\n                  color: '#FFFFFF'\r\n                }\r\n              ])\r\n            },\r\n            lineStyle: {\r\n              width: 3\r\n            },\r\n            color: '#1370D8',\r\n            data: valueList1,\r\n            markPoint: {\r\n              data: [\r\n                { type: 'max', name: 'Max' },\r\n                { type: 'min', name: 'Min' }\r\n              ]\r\n            },\r\n            markLine: {\r\n              data: [\r\n                { type: 'average', name: 'Avg' }\r\n              ]\r\n            }\r\n          },\r\n          {\r\n            name: 'Spool空间消耗',\r\n            type: 'line',\r\n            yAxisIndex: 1,\r\n            smooth: true,\r\n            animation: true,\r\n            areaStyle: {\r\n              color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n                {\r\n                  offset: 0,\r\n                  color: '#3AA255'\r\n                },\r\n                {\r\n                  offset: 0.5,\r\n                  color: '#FFFFFF'\r\n                }\r\n              ])\r\n            },\r\n            lineStyle: {\r\n              width: 3\r\n            },\r\n            color: '#3AA255',\r\n            data: valueList2,\r\n            markPoint: {\r\n              data: [\r\n                { type: 'max', name: 'Max' },\r\n                { type: 'min', name: 'Min' }\r\n              ]\r\n            },\r\n            markLine: {\r\n              data: [\r\n                { type: 'average', name: 'Avg' }\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n      this.graph.setOption(option)\r\n      window.addEventListener('resize', () => {\r\n        this.graph.resize()\r\n      })\r\n    },\r\n    getTimeUsgView () {\r\n      let data = this.jobResusgList\r\n      let dateList = data.map(function (item) {\r\n        return item['LogDate']\r\n      })\r\n      let valueList1 = data.map(function (item) {\r\n        return item['RunningTime']\r\n      })\r\n      let option = {\r\n        title: {\r\n          text: '近一个月作业耗时情况',\r\n          x: 'center',\r\n          align: 'right'\r\n        },\r\n        grid: {\r\n          bottom: 20\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          axisPointer: {\r\n            type: 'cross',\r\n            animation: false,\r\n            label: {\r\n              backgroundColor: '#505765'\r\n            }\r\n          }\r\n        },\r\n        legend: {\r\n          data: ['作业运行耗时'],\r\n          x: 'right'\r\n        },\r\n        lineStyle: {\r\n          width: 4\r\n        },\r\n        xAxis: [\r\n          {\r\n            type: 'category',\r\n            boundaryGap: false,\r\n            axisLine: { onZero: false },\r\n            data: dateList\r\n          }\r\n        ],\r\n        yAxis: [\r\n          {\r\n            name: '运行耗时(分钟)',\r\n            type: 'value'\r\n          }\r\n        ],\r\n        series: [\r\n          {\r\n            name: '运行耗时',\r\n            type: 'line',\r\n            smooth: true,\r\n            animation: true,\r\n            areaStyle: {\r\n              color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n                {\r\n                  offset: 0,\r\n                  color: '#1370D8'\r\n                },\r\n                {\r\n                  offset: 0.5,\r\n                  color: '#FFFFFF'\r\n                }\r\n              ])\r\n            },\r\n            lineStyle: {\r\n              width: 3\r\n            },\r\n            color: '#1370D8',\r\n            data: valueList1,\r\n            markPoint: {\r\n              data: [\r\n                { type: 'max', name: 'Max' },\r\n                { type: 'min', name: 'Min' }\r\n              ]\r\n            },\r\n            markLine: {\r\n              data: [\r\n                { type: 'average', name: 'Avg' }\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n      this.graph.setOption(option)\r\n    }\r\n  },\r\n  mounted () {\r\n    this.init()\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n  .container {\r\n    color : rgb(3, 58, 240)\r\n  }\r\n</style>\r\n"],"mappings":"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"}]}