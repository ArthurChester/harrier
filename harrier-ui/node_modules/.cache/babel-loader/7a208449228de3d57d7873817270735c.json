{"remainingRequest":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\components\\s-tree-table\\s-tree-table.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\components\\s-tree-table\\s-tree-table.vue","mtime":1681468306478},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\.babelrc","mtime":1681468306354},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.string.fixed\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"D:/WorkSpace/IdeaProjects/harrier/harrier-ui/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es6.number.constructor\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport tableHead from \"./table-head.vue\";\nimport tableBody from \"./table-body.vue\";\nimport Spin from \"iview/src/components/spin/spin.vue\";\nimport { oneOf, getStyle, deepCopy, getScrollBarSize } from \"iview/src/utils/assist\";\nimport { on, off } from \"iview/src/utils/dom\";\nimport Csv from \"iview/src/utils/csv\";\nimport ExportCsv from \"./export-csv\";\nimport Locale from \"iview/src/mixins/locale\";\nimport elementResizeDetectorMaker from \"element-resize-detector\";\nvar prefixCls = \"ivu-table\";\nvar rowKey = 1;\nvar columnKey = 1;\nexport default {\n  name: \"STreeTable\",\n  mixins: [Locale],\n  components: {\n    tableHead: tableHead,\n    tableBody: tableBody,\n    Spin: Spin\n  },\n  props: {\n    data: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    columns: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    size: {\n      validator: function validator(value) {\n        return oneOf(value, [\"small\", \"large\", \"default\"]);\n      }\n    },\n    width: {\n      type: [Number, String]\n    },\n    height: {\n      type: [Number, String]\n    },\n    stripe: {\n      type: Boolean,\n      default: false\n    },\n    border: {\n      type: Boolean,\n      default: false\n    },\n    showHeader: {\n      type: Boolean,\n      default: true\n    },\n    highlightRow: {\n      type: Boolean,\n      default: false\n    },\n    rowClassName: {\n      type: Function,\n      default: function _default() {\n        return \"\";\n      }\n    },\n    context: {\n      type: Object\n    },\n    noDataText: {\n      type: String\n    },\n    noFilteredDataText: {\n      type: String\n    },\n    disabledHover: {\n      type: Boolean\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      ready: false,\n      tableWidth: 0,\n      columnsWidth: {},\n      prefixCls: prefixCls,\n      compiledUids: [],\n      objData: this.makeObjData(),\n      // checkbox or highlight-row\n      rebuildData: [],\n      // for sort or filter\n      cloneColumns: this.makeColumns(),\n      showSlotHeader: true,\n      showSlotFooter: true,\n      bodyHeight: 0,\n      bodyRealHeight: 0,\n      scrollBarWidth: getScrollBarSize(),\n      currentContext: this.context\n    };\n  },\n  computed: {\n    localeNoDataText: function localeNoDataText() {\n      // if (this.noDataText === undefined) {\n      //   return this.t(\"i.table.noDataText\");\n      // } else {\n      //   return this.noDataText;\n      // }\n      return this.noDataText;\n    },\n    localeNoFilteredDataText: function localeNoFilteredDataText() {\n      // if (this.noFilteredDataText === undefined) {\n      //   return this.t(\"i.table.noFilteredDataText\");\n      // } else {\n      //   return this.noFilteredDataText;\n      // }\n      return this.noFilteredDataText;\n    },\n    wrapClasses: function wrapClasses() {\n      var _ref;\n      return [\"\".concat(prefixCls, \"-wrapper\"), (_ref = {}, _defineProperty(_ref, \"\".concat(prefixCls, \"-hide\"), !this.ready), _defineProperty(_ref, \"\".concat(prefixCls, \"-with-header\"), this.showSlotHeader), _defineProperty(_ref, \"\".concat(prefixCls, \"-with-footer\"), this.showSlotFooter), _ref)];\n    },\n    classes: function classes() {\n      var _ref2;\n      return [\"\".concat(prefixCls), (_ref2 = {}, _defineProperty(_ref2, \"\".concat(prefixCls, \"-\").concat(this.size), !!this.size), _defineProperty(_ref2, \"\".concat(prefixCls, \"-border\"), this.border), _defineProperty(_ref2, \"\".concat(prefixCls, \"-stripe\"), this.stripe), _defineProperty(_ref2, \"\".concat(prefixCls, \"-with-fixed-top\"), !!this.height), _ref2)];\n    },\n    fixedHeaderClasses: function fixedHeaderClasses() {\n      return [\"\".concat(prefixCls, \"-fixed-header\"), _defineProperty({}, \"\".concat(prefixCls, \"-fixed-header-with-empty\"), !this.rebuildData.length)];\n    },\n    styles: function styles() {\n      var style = {};\n      if (this.height) {\n        var height = this.isLeftFixed || this.isRightFixed ? parseInt(this.height) + this.scrollBarWidth : parseInt(this.height);\n        style.height = \"\".concat(height, \"px\");\n      }\n      if (this.width) style.width = \"\".concat(this.width, \"px\");\n      return style;\n    },\n    tableStyle: function tableStyle() {\n      var style = {};\n      if (this.tableWidth !== 0) {\n        var width = \"\";\n        if (this.bodyHeight === 0) {\n          width = this.tableWidth;\n        } else {\n          if (this.bodyHeight > this.bodyRealHeight) {\n            width = this.tableWidth;\n          } else {\n            width = this.tableWidth - this.scrollBarWidth;\n          }\n        }\n        //                    const width = this.bodyHeight === 0 ? this.tableWidth : this.tableWidth - this.scrollBarWidth;\n        style.width = \"\".concat(width, \"px\");\n        // console.log(style.width)\n        // style.width = 'auto'\n      }\n\n      return style;\n    },\n    fixedTableStyle: function fixedTableStyle() {\n      var style = {};\n      var width = 0;\n      this.leftFixedColumns.forEach(function (col) {\n        if (col.fixed && col.fixed === \"left\") width += col._width;\n      });\n      style.width = \"\".concat(width, \"px\");\n      return style;\n    },\n    fixedRightTableStyle: function fixedRightTableStyle() {\n      var style = {};\n      var width = 0;\n      this.rightFixedColumns.forEach(function (col) {\n        if (col.fixed && col.fixed === \"right\") width += col._width;\n      });\n      width += this.scrollBarWidth;\n      style.width = \"\".concat(width, \"px\");\n      return style;\n    },\n    bodyStyle: function bodyStyle() {\n      var style = {};\n      if (this.bodyHeight !== 0) {\n        // add a height to resolve scroll bug when browser has a scrollBar in fixed type and height prop\n        var height = this.isLeftFixed || this.isRightFixed ? this.bodyHeight + this.scrollBarWidth : this.bodyHeight;\n        style.height = \"\".concat(height, \"px\");\n      }\n      return style;\n    },\n    fixedBodyStyle: function fixedBodyStyle() {\n      var style = {};\n      if (this.bodyHeight !== 0) {\n        var height = this.bodyHeight + this.scrollBarWidth - 1;\n\n        // #2102 里，如果 Table 没有设置 width，而是集成父级的 width，固定列也应该不包含滚动条高度，所以这里直接计算表格宽度\n        var tableWidth = parseInt(getStyle(this.$el, \"width\")) - 1;\n        if (this.width && this.width < this.tableWidth || tableWidth < this.tableWidth) {\n          height = this.bodyHeight;\n        }\n        //                    style.height = this.scrollBarWidth > 0 ? `${this.bodyHeight}px` : `${this.bodyHeight - 1}px`;\n        style.height = this.scrollBarWidth > 0 ? \"\".concat(height, \"px\") : \"\".concat(height - 1, \"px\");\n      }\n      return style;\n    },\n    leftFixedColumns: function leftFixedColumns() {\n      var left = [];\n      var other = [];\n      this.cloneColumns.forEach(function (col) {\n        if (col.fixed && col.fixed === \"left\") {\n          left.push(col);\n        } else {\n          other.push(col);\n        }\n      });\n      return left.concat(other);\n    },\n    rightFixedColumns: function rightFixedColumns() {\n      var right = [];\n      var other = [];\n      this.cloneColumns.forEach(function (col) {\n        if (col.fixed && col.fixed === \"right\") {\n          right.push(col);\n        } else {\n          other.push(col);\n        }\n      });\n      return right.concat(other);\n    },\n    isLeftFixed: function isLeftFixed() {\n      return this.columns.some(function (col) {\n        return col.fixed && col.fixed === \"left\";\n      });\n    },\n    isRightFixed: function isRightFixed() {\n      return this.columns.some(function (col) {\n        return col.fixed && col.fixed === \"right\";\n      });\n    }\n  },\n  methods: {\n    rowClsName: function rowClsName(index) {\n      return this.rowClassName(this.data[index], index);\n    },\n    handleResize: function handleResize() {\n      var _this = this;\n      this.$nextTick(function () {\n        var tableWidth = 0;\n        var allWidth = !_this.columns.some(function (cell) {\n          return !cell.width;\n        }); // each column set a width\n        if (allWidth) {\n          _this.tableWidth = _this.columns.map(function (cell) {\n            return cell.width;\n          }).reduce(function (a, b) {\n            return a + b;\n          }, 0);\n        }\n        //else {\n        // this.tableWidth = parseInt(getStyle(this.$refs.body, \"width\")) - 1;\n        //}        \n        // if(this.tableWidth!=0 )//非0,说明已经计算好了，不要再重新计算了\n        //     return\n        // this.columnsWidth = {};\n\n        if (!_this.$refs.tbody) return;\n        _this.$nextTick(function () {\n          var columnsWidth = {};\n          var autoWidthIndex = -1;\n          if (allWidth) autoWidthIndex = _this.cloneColumns.findIndex(function (cell) {\n            return !cell.width;\n          }); //todo 这行可能有问题                      \n\n          //\n          var $warrperdiv = _this.$refs.header.parentNode.parentNode;\n          if (_this.data.length) {\n            var $bodyTr = _this.$refs.tbody.$el.querySelectorAll(\"tbody tr\");\n            var $headTr = _this.$refs.header.children[0].querySelectorAll(\"tr\");\n            // const $headTr = this.$refs.thead.$el.querySelectorAll(\"thead tr\");            \n\n            var $td = $headTr[0].children;\n            var autoColNum = $td.length;\n            //从后往前找到不是fixed width的第一个，将最后的宽度倒减给它，保证宽度一致性\n            var lastAutoWidth;\n            var lastIndex;\n            var autoTotalMinWidth = parseInt(getStyle($warrperdiv, \"width\"));\n            ;\n            for (var i = 0; i < $td.length; i++) {\n              var column = _this.cloneColumns[i];\n              if (column.width) {\n                autoTotalMinWidth = autoTotalMinWidth - column.width;\n                autoColNum--;\n              } else {\n                lastIndex = i; //last index\n              }\n            }\n\n            var minWidthperCol = Math.floor(autoTotalMinWidth / autoColNum - 10);\n            //   let minWidthperCol = autoTotalMinWidth/autoColNum-10;\n\n            for (var j = 0; j < $td.length; j++) {\n              // can not use forEach in Firefox\n              var column2 = _this.cloneColumns[j];\n              var width = parseInt(getStyle($td[j], \"width\")) + 0;\n              // let width = Math.floor(getStyle($td[j], \"width\")) + 1;\n              //默认Auto\n              width = width > minWidthperCol ? width : minWidthperCol;\n              if (column2.width) {\n                //固定宽度\n                width = column2.width;\n              } else if (j == lastIndex) {\n                width = autoTotalMinWidth - 5; //最后一列就是剩下的宽度\n              } else {\n                //自动宽度\n                autoTotalMinWidth -= width;\n              }\n              _this.cloneColumns[j]._width = width;\n              columnsWidth[column2._index] = {\n                width: width\n              };\n            }\n            if ($bodyTr.length != 0) {\n              $td = $bodyTr[0].children;\n              for (var _j = 0; _j < $td.length; _j++) {\n                var _column = _this.cloneColumns[_j];\n                var _width = parseInt(getStyle($td[_j], \"width\")) + 0;\n                // console.log('body['+j+']width=' +width)\n                if (_column.width) _width = _column.width;\n                _width = _width > _this.cloneColumns[_j]._width ? _width : _this.cloneColumns[_j]._width; //使用大的width                                    \n                _this.cloneColumns[_j]._width = _width;\n                columnsWidth[_column._index] = {\n                  width: _width\n                };\n              }\n            }\n\n            //计算tableWidth长度\n            for (var _j2 = 0; _j2 < $td.length; _j2++) {\n              var _column2 = _this.cloneColumns[_j2];\n              tableWidth += columnsWidth[_column2._index].width;\n            }\n            _this.columnsWidth = columnsWidth;\n            // console.log(columnsWidth)\n            _this.tableWidth = tableWidth;\n          }\n\n          //console.log(\"this.tableWidth=\"+this.tableWidth)\n        });\n        // get table real height,for fixed when set height prop,but height < table's height,show scrollBarWidth\n        _this.bodyRealHeight = parseInt(getStyle(_this.$refs.tbody.$el, \"height\"));\n      });\n    },\n    handleMouseIn: function handleMouseIn(_index) {\n      if (this.disabledHover) return;\n      if (this.objData[_index]._isHover) return;\n      this.objData[_index]._isHover = true;\n    },\n    handleMouseOut: function handleMouseOut(_index) {\n      if (this.disabledHover) return;\n      this.objData[_index]._isHover = false;\n    },\n    // 通用处理 highlightCurrentRow 和 clearCurrentRow\n    handleCurrentRow: function handleCurrentRow(type, _index) {\n      var oldIndex = -1;\n      for (var i in this.objData) {\n        if (this.objData[i]._isHighlight) {\n          oldIndex = parseInt(i);\n          this.objData[i]._isHighlight = false;\n        }\n      }\n      if (type === \"highlight\") this.objData[_index]._isHighlight = true;\n      var oldData = oldIndex < 0 ? null : JSON.parse(JSON.stringify(this.objData[_index].ref));\n      var newData = type === \"highlight\" ? JSON.parse(JSON.stringify(this.objData[_index].ref)) : null;\n      this.$emit(\"on-current-change\", newData, oldData);\n    },\n    highlightCurrentRow: function highlightCurrentRow(_index) {\n      if (!this.highlightRow || this.objData[_index]._isHighlight) return;\n      this.handleCurrentRow(\"highlight\", _index);\n    },\n    clearCurrentRow: function clearCurrentRow() {\n      if (!this.highlightRow) return;\n      this.handleCurrentRow(\"clear\");\n    },\n    clickCurrentRow: function clickCurrentRow(_index) {\n      this.highlightCurrentRow(_index);\n      // console.log(this.objData[_index]);\n      this.$emit(\"on-row-click\", this.objData[_index].ref, _index);\n    },\n    dblclickCurrentRow: function dblclickCurrentRow(_index) {\n      this.highlightCurrentRow(_index);\n      this.$emit(\"on-row-dblclick\", this.objData[_index].ref, _index);\n    },\n    getSelection: function getSelection() {\n      var selections = [];\n      var selectionIndexes = [];\n      for (var i in this.objData) {\n        if (this.objData[i]._isChecked) {\n          selectionIndexes.push(parseInt(i));\n          selections.push(this.objData[i].ref);\n        }\n      }\n      return selections;\n    },\n    toggleSelect: function toggleSelect(_index) {\n      var data = {};\n      for (var i in this.objData) {\n        if (parseInt(i) === _index) {\n          data = this.objData[i];\n          break;\n        }\n      }\n      var status = !data._isChecked;\n      this.objData[_index]._isChecked = status;\n      var selection = this.getSelection();\n      this.$emit(status ? \"on-select\" : \"on-select-cancel\", selection, this.objData[_index].ref);\n      this.$emit(\"on-selection-change\", selection);\n    },\n    toggleExpand: function toggleExpand(_index) {\n      var data = {};\n      for (var i in this.objData) {\n        if (parseInt(i) === _index) {\n          data = this.objData[i];\n          break;\n        }\n      }\n      var status = !data._isExpanded;\n      this.objData[_index]._isExpanded = status;\n      this.$emit(\"on-expand\", JSON.parse(JSON.stringify(this.objData[_index].ref)), status);\n    },\n    toggleTree: function toggleTree(_index) {\n      var data = {};\n      // let _currentIndex = _index;\n      for (var i in this.objData) {\n        if (parseInt(i) === _index) {\n          data = this.objData[i];\n          break;\n        }\n      }\n      var status = !data._isFolded;\n      this.objData[_index]._isFolded = status;\n      //modify origin data fold status 修改data时不再refreshfold状态\n      this.rebuildData[_index].ref._unfolded = !status;\n      //如果父节点fold，则它的children也要全部fold,直接修改源数据\n      // debugger\n      if (this.objData[_index]._isFolded) {\n        this.cascadeFold(this.rebuildData[_index].ref);\n        this.cascadeFold2(this.objData[_index]);\n      }\n      this.$emit(\"unfold-tree\", this.objData[_index].ref, status);\n    },\n    cascadeFold: function cascadeFold(objData) {\n      var children = objData.children;\n      if (children == null || children == undefined || children.length == 0) {\n        return;\n      }\n      var _iterator = _createForOfIteratorHelper(children),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var child = _step.value;\n          if (child != null) {\n            child._unfolded = false;\n          }\n          this.cascadeFold(child);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    },\n    // 折叠子级树\n    cascadeFold2: function cascadeFold2(objData) {\n      var children = objData.children;\n      if (children == null || children == undefined || children.length == 0) {\n        return;\n      }\n      var _iterator2 = _createForOfIteratorHelper(children),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var child = _step2.value;\n          if (child != null) {\n            child._isFolded = true;\n          }\n          this.cascadeFold2(child);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    },\n    selectAll: function selectAll(status) {\n      var _iterator3 = _createForOfIteratorHelper(this.rebuildData),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var data = _step3.value;\n          if (this.objData[data._index]._isDisabled) {\n            continue;\n          } else {\n            this.objData[data._index]._isChecked = status;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      var selection = this.getSelection();\n      if (status) {\n        this.$emit(\"on-select-all\", selection);\n      }\n      this.$emit(\"on-selection-change\", selection);\n    },\n    fixedHeader: function fixedHeader() {\n      var _this2 = this;\n      if (this.height) {\n        this.$nextTick(function () {\n          var titleHeight = parseInt(getStyle(_this2.$refs.title, \"height\")) || 0;\n          var headerHeight = parseInt(getStyle(_this2.$refs.header, \"height\")) || 0;\n          var footerHeight = parseInt(getStyle(_this2.$refs.footer, \"height\")) || 0;\n          _this2.bodyHeight = _this2.height - titleHeight - headerHeight - footerHeight;\n        });\n      } else {\n        this.bodyHeight = 0;\n      }\n    },\n    hideColumnFilter: function hideColumnFilter() {\n      this.cloneColumns.forEach(function (col) {\n        return col._filterVisible = false;\n      });\n    },\n    handleBodyScroll: function handleBodyScroll(event) {\n      if (this.showHeader) this.$refs.header.scrollLeft = event.target.scrollLeft;\n      if (this.isLeftFixed) this.$refs.fixedBody.scrollTop = event.target.scrollTop;\n      if (this.isRightFixed) this.$refs.fixedRightBody.scrollTop = event.target.scrollTop;\n      this.hideColumnFilter();\n    },\n    handleMouseWheel: function handleMouseWheel(event) {\n      var deltaX = event.deltaX;\n      var $body = this.$refs.body;\n      if (deltaX > 0) {\n        $body.scrollLeft = $body.scrollLeft + 10;\n      } else {\n        $body.scrollLeft = $body.scrollLeft - 10;\n      }\n    },\n    sortData: function sortData(data, type, index) {\n      var _this3 = this;\n      var key = this.cloneColumns[index].key;\n      data.sort(function (a, b) {\n        if (_this3.cloneColumns[index].sortMethod) {\n          return _this3.cloneColumns[index].sortMethod(a[key], b[key], type);\n        } else {\n          if (type === \"asc\") {\n            return a[key] > b[key] ? 1 : -1;\n          } else if (type === \"desc\") {\n            return a[key] < b[key] ? 1 : -1;\n          }\n        }\n      });\n      return data;\n    },\n    handleSort: function handleSort(_index, type) {\n      var index = this.GetOriginalIndex(_index);\n      this.cloneColumns.forEach(function (col) {\n        return col._sortType = \"normal\";\n      });\n      var key = this.cloneColumns[index].key;\n      if (this.cloneColumns[index].sortable !== \"custom\") {\n        // custom is for remote sort\n        if (type === \"normal\") {\n          this.rebuildData = this.makeDataWithFilter();\n        } else {\n          this.rebuildData = this.sortData(this.rebuildData, type, index);\n        }\n      }\n      this.cloneColumns[index]._sortType = type;\n      this.$emit(\"on-sort-change\", {\n        column: JSON.parse(JSON.stringify(this.columns[this.cloneColumns[index]._index])),\n        key: key,\n        order: type\n      });\n    },\n    handleFilterHide: function handleFilterHide(index) {\n      // clear checked that not filter now\n      if (!this.cloneColumns[index]._isFiltered) this.cloneColumns[index]._filterChecked = [];\n    },\n    filterData: function filterData(data, column) {\n      return data.filter(function (row) {\n        //如果定义了远程过滤方法则忽略此方法\n        if (typeof column.filterRemote === \"function\") return true;\n        var status = !column._filterChecked.length;\n        for (var i = 0; i < column._filterChecked.length; i++) {\n          status = column.filterMethod(column._filterChecked[i], row);\n          if (status) break;\n        }\n        return status;\n      });\n    },\n    filterOtherData: function filterOtherData(data, index) {\n      var _this4 = this;\n      var column = this.cloneColumns[index];\n      if (typeof column.filterRemote === \"function\") {\n        column.filterRemote.call(this.$parent, column._filterChecked, column.key, column);\n      }\n      this.cloneColumns.forEach(function (col, colIndex) {\n        if (colIndex !== index) {\n          data = _this4.filterData(data, col);\n        }\n      });\n      return data;\n    },\n    handleFilter: function handleFilter(index) {\n      var column = this.cloneColumns[index];\n      var filterData = this.makeDataWithSort();\n\n      // filter others first, after filter this column\n      filterData = this.filterOtherData(filterData, index);\n      this.rebuildData = this.filterData(filterData, column);\n      this.cloneColumns[index]._isFiltered = true;\n      this.cloneColumns[index]._filterVisible = false;\n      this.$emit(\"on-filter-change\", column);\n    },\n    /**\r\n     * #2832\r\n     * 应该区分当前表头的 column 是左固定还是右固定\r\n     * 否则执行到 $parent 时，方法的 index 与 cloneColumns 的 index 是不对应的\r\n     * 左固定和右固定，要区分对待\r\n     * 所以，此方法用来获取正确的 index\r\n     * */\n    GetOriginalIndex: function GetOriginalIndex(_index) {\n      return this.cloneColumns.findIndex(function (item) {\n        return item._index === _index;\n      });\n    },\n    handleFilterSelect: function handleFilterSelect(_index, value) {\n      var index = this.GetOriginalIndex(_index);\n      this.cloneColumns[index]._filterChecked = [value];\n      this.handleFilter(index);\n    },\n    handleFilterReset: function handleFilterReset(_index) {\n      var index = this.GetOriginalIndex(_index);\n      this.cloneColumns[index]._isFiltered = false;\n      this.cloneColumns[index]._filterVisible = false;\n      this.cloneColumns[index]._filterChecked = [];\n      var filterData = this.makeDataWithSort();\n      filterData = this.filterOtherData(filterData, index);\n      this.rebuildData = filterData;\n      this.$emit(\"on-filter-change\", this.cloneColumns[index]);\n    },\n    makeDataWithSort: function makeDataWithSort() {\n      var data = this.makeData();\n      var sortType = \"normal\";\n      var sortIndex = -1;\n      var isCustom = false;\n      for (var i = 0; i < this.cloneColumns.length; i++) {\n        if (this.cloneColumns[i]._sortType !== \"normal\") {\n          sortType = this.cloneColumns[i]._sortType;\n          sortIndex = i;\n          isCustom = this.cloneColumns[i].sortable === \"custom\";\n          break;\n        }\n      }\n      if (sortType !== \"normal\" && !isCustom) data = this.sortData(data, sortType, sortIndex);\n      return data;\n    },\n    makeDataWithFilter: function makeDataWithFilter() {\n      var _this5 = this;\n      var data = this.makeData();\n      this.cloneColumns.forEach(function (col) {\n        return data = _this5.filterData(data, col);\n      });\n      return data;\n    },\n    makeDataWithSortAndFilter: function makeDataWithSortAndFilter() {\n      var _this6 = this;\n      var data = this.makeDataWithSort();\n      this.cloneColumns.forEach(function (col) {\n        return data = _this6.filterData(data, col);\n      });\n      return data;\n    },\n    addRowIsAttribute: function addRowIsAttribute(newRow) {\n      newRow._isHover = false;\n      if (newRow._disabled) {\n        newRow._isDisabled = newRow._disabled;\n      } else {\n        newRow._isDisabled = false;\n      }\n      if (newRow._checked) {\n        newRow._isChecked = newRow._checked;\n      } else {\n        newRow._isChecked = false;\n      }\n      if (newRow._expanded) {\n        newRow._isExpanded = newRow._expanded;\n      } else {\n        newRow._isExpanded = false;\n      }\n      if (newRow._highlight) {\n        newRow._isHighlight = newRow._highlight;\n      } else {\n        newRow._isHighlight = false;\n      }\n      if (newRow._unfolded) {\n        newRow._isFolded = !newRow._unfolded;\n      } else {\n        newRow._isFolded = true;\n      }\n      return newRow;\n    },\n    makeData: function makeData() {\n      var _this7 = this;\n      //创建表格Data\n      //makeData need to unfold the children node to table data\n      var root = this.data;\n      var data = [];\n      var dataRow;\n      var currentIndex = 0;\n      var rowKey = 0;\n      root.forEach(function (row, index) {\n        if (row.hasOwnProperty(\"children\")) {\n          var treeStack = new Array();\n          var temp = {\n            originData: row,\n            makeData: null\n          };\n          treeStack.push(temp);\n          //Deep fist travel children Tree\n          while (treeStack.length != 0) {\n            var obj = treeStack.pop();\n            var parentRow = obj.originData;\n            var dataRowParent = obj.makeData;\n            dataRow = _this7.deepCopyWithOutParent(parentRow);\n            if (typeof dataRowParent != \"undefined\" && dataRowParent != null) {\n              dataRowParent.children.push(dataRow);\n              dataRow.parent = dataRowParent;\n            }\n            dataRow._rowKey = rowKey++;\n            dataRow._index = currentIndex;\n            dataRow.ref = parentRow; //增加对原数据的引用，方便后续操作\n            data[currentIndex++] = dataRow;\n            if (parentRow.hasOwnProperty(\"children\")) {\n              dataRow.children = [];\n              for (var i = parentRow.children.length - 1; i >= 0; i--) {\n                treeStack.push({\n                  originData: parentRow.children[i],\n                  makeData: dataRow\n                });\n              }\n            }\n          }\n        } else {\n          dataRow = _this7.deepCopyWithOutParent(row);\n          dataRow._rowKey = rowKey++;\n          dataRow._index = currentIndex;\n          dataRow.ref = row; //增加对原数据的引用，方便后续操作\n          data[currentIndex++] = dataRow;\n        }\n      });\n      //   console.log(data);\n      return data;\n    },\n    makeObjData: function makeObjData() {\n      var _this8 = this;\n      // let data = {};\n      // let newIndex = 0;\n      // this.data.forEach((row, index) => {\n      //   let root = this.addRowIsAttribute(deepCopy(row));\n      //   root.ref = row;\n      //   if (root.hasOwnProperty(\"children\")) {\n      //     //遍历\n      //     let treeStack = new Array();\n      //     treeStack.push(root);\n      //     while (treeStack.length != 0) {\n      //       const parentRow = treeStack.pop();\n      //       data[newIndex] = this.addRowIsAttribute(deepCopy(parentRow)); //输出\n      //       // data[newIndex].ref = parentRow;\n      //       newIndex++;\n      //       if (parentRow.hasOwnProperty(\"children\")) {\n      //         //逆序遍历数组\n      //         for (let i = parentRow.children.length - 1; i >= 0; i--) {\n      //           parentRow.children[i].parent = parentRow;\n      //           treeStack.push(parentRow.children[i]);\n      //         }\n      //       }\n      //     }\n      //   } else {\n      //     data[newIndex++] = root;\n      //   }\n      //   //Deep fist travel children Tree\n      // });\n      // console.log(data);\n      var data = {};\n      this.makeData().forEach(function (row, index) {\n        data[index] = _this8.addRowIsAttribute(row);\n      });\n      return data;\n    },\n    makeColumns: function makeColumns() {\n      var columns = deepCopy(this.columns);\n      var left = [];\n      var right = [];\n      var center = [];\n      columns.forEach(function (column, index) {\n        column._index = index;\n        column._columnKey = columnKey++;\n        column._width = column.width ? column.width : \"\"; // update in handleResize()\n        column._sortType = \"normal\";\n        column._filterVisible = false;\n        column._isFiltered = false;\n        column._filterChecked = [];\n        if (\"filterMultiple\" in column) {\n          column._filterMultiple = column.filterMultiple;\n        } else {\n          column._filterMultiple = true;\n        }\n        if (\"filteredValue\" in column) {\n          column._filterChecked = column.filteredValue;\n          column._isFiltered = true;\n        }\n        if (\"sortType\" in column) {\n          column._sortType = column.sortType;\n        }\n        if (column.fixed && column.fixed === \"left\") {\n          left.push(column);\n        } else if (column.fixed && column.fixed === \"right\") {\n          right.push(column);\n        } else {\n          center.push(column);\n        }\n      });\n      return left.concat(center).concat(right);\n    },\n    exportCsv: function exportCsv(params) {\n      if (params.filename) {\n        if (params.filename.indexOf(\".csv\") === -1) {\n          params.filename += \".csv\";\n        }\n      } else {\n        params.filename = \"table.csv\";\n      }\n      var columns = [];\n      var datas = [];\n      if (params.columns && params.data) {\n        columns = params.columns;\n        datas = params.data;\n      } else {\n        columns = this.columns;\n        if (!(\"original\" in params)) params.original = true;\n        datas = params.original ? this.data : this.rebuildData;\n      }\n      var noHeader = false;\n      if (\"noHeader\" in params) noHeader = params.noHeader;\n      var data = Csv(columns, datas, params, noHeader);\n      if (params.callback) params.callback(data);else ExportCsv.download(params.filename, data);\n    },\n    deepCopyWithOutParent: function deepCopyWithOutParent(data) {\n      var t = this.typeOf(data);\n      var o;\n      if (t === \"array\") {\n        o = [];\n      } else if (t === \"object\") {\n        o = {};\n      } else {\n        return data;\n      }\n      if (t === \"array\") {\n        for (var i = 0; i < data.length; i++) {\n          o.push(this.deepCopyWithOutParent(data[i]));\n        }\n      } else if (t === \"object\") {\n        for (var _i in data) {\n          if (_i != \"parent\" && _i != \"children\") {\n            o[_i] = this.deepCopyWithOutParent(data[_i]);\n          } else {\n            o[_i] = data[_i];\n          }\n        }\n      }\n      return o;\n    },\n    typeOf: function typeOf(obj) {\n      var toString = Object.prototype.toString;\n      var map = {\n        \"[object Boolean]\": \"boolean\",\n        \"[object Number]\": \"number\",\n        \"[object String]\": \"string\",\n        \"[object Function]\": \"function\",\n        \"[object Array]\": \"array\",\n        \"[object Date]\": \"date\",\n        \"[object RegExp]\": \"regExp\",\n        \"[object Undefined]\": \"undefined\",\n        \"[object Null]\": \"null\",\n        \"[object Object]\": \"object\"\n      };\n      return map[toString.call(obj)];\n    }\n  },\n  created: function created() {\n    if (!this.context) this.currentContext = this.$parent;\n    this.showSlotHeader = this.$slots.header !== undefined;\n    this.showSlotFooter = this.$slots.footer !== undefined;\n    this.rebuildData = this.makeDataWithSortAndFilter();\n  },\n  mounted: function mounted() {\n    var _this9 = this;\n    this.handleResize();\n    this.fixedHeader();\n    this.$nextTick(function () {\n      return _this9.ready = true;\n    });\n    on(window, \"resize\", this.handleResize);\n    this.observer = elementResizeDetectorMaker();\n    this.observer.listenTo(this.$el, this.handleResize);\n    this.$on(\"on-visible-change\", function (val) {\n      if (val) {\n        _this9.handleResize();\n        _this9.fixedHeader();\n      }\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    off(window, \"resize\", this.handleResize);\n    this.observer.removeListener(this.$el, this.handleResize);\n  },\n  watch: {\n    data: {\n      handler: function handler() {\n        var oldDataLen = this.rebuildData.length;\n        this.objData = this.makeObjData();\n        this.rebuildData = this.makeDataWithSortAndFilter();\n        this.handleResize();\n        if (!oldDataLen) {\n          this.fixedHeader();\n        }\n      },\n      deep: true\n    },\n    columns: {\n      handler: function handler() {\n        // todo 这里有性能问题，可能是左右固定计算属性影响的\n        this.cloneColumns = this.makeColumns();\n        this.rebuildData = this.makeDataWithSortAndFilter();\n        this.handleResize();\n      },\n      deep: true\n    },\n    height: function height() {\n      this.fixedHeader();\n    }\n  }\n};",{"version":3,"names":["tableHead","tableBody","Spin","oneOf","getStyle","deepCopy","getScrollBarSize","on","off","Csv","ExportCsv","Locale","elementResizeDetectorMaker","prefixCls","rowKey","columnKey","name","mixins","components","props","data","type","Array","default","_default","columns","size","validator","value","width","Number","String","height","stripe","Boolean","border","showHeader","highlightRow","rowClassName","Function","context","Object","noDataText","noFilteredDataText","disabledHover","loading","ready","tableWidth","columnsWidth","compiledUids","objData","makeObjData","rebuildData","cloneColumns","makeColumns","showSlotHeader","showSlotFooter","bodyHeight","bodyRealHeight","scrollBarWidth","currentContext","computed","localeNoDataText","localeNoFilteredDataText","wrapClasses","_ref","concat","_defineProperty","classes","_ref2","fixedHeaderClasses","length","styles","style","isLeftFixed","isRightFixed","parseInt","tableStyle","fixedTableStyle","leftFixedColumns","forEach","col","fixed","_width","fixedRightTableStyle","rightFixedColumns","bodyStyle","fixedBodyStyle","$el","left","other","push","right","some","methods","rowClsName","index","handleResize","_this","$nextTick","allWidth","cell","map","reduce","a","b","$refs","tbody","autoWidthIndex","findIndex","$warrperdiv","header","parentNode","$bodyTr","querySelectorAll","$headTr","children","$td","autoColNum","lastAutoWidth","lastIndex","autoTotalMinWidth","i","column","minWidthperCol","Math","floor","j","column2","_index","handleMouseIn","_isHover","handleMouseOut","handleCurrentRow","oldIndex","_isHighlight","oldData","JSON","parse","stringify","ref","newData","$emit","highlightCurrentRow","clearCurrentRow","clickCurrentRow","dblclickCurrentRow","getSelection","selections","selectionIndexes","_isChecked","toggleSelect","status","selection","toggleExpand","_isExpanded","toggleTree","_isFolded","_unfolded","cascadeFold","cascadeFold2","undefined","_iterator","_createForOfIteratorHelper","_step","s","n","done","child","err","e","f","_iterator2","_step2","selectAll","_iterator3","_step3","_isDisabled","fixedHeader","_this2","titleHeight","title","headerHeight","footerHeight","footer","hideColumnFilter","_filterVisible","handleBodyScroll","event","scrollLeft","target","fixedBody","scrollTop","fixedRightBody","handleMouseWheel","deltaX","$body","body","sortData","_this3","key","sort","sortMethod","handleSort","GetOriginalIndex","_sortType","sortable","makeDataWithFilter","order","handleFilterHide","_isFiltered","_filterChecked","filterData","filter","row","filterRemote","filterMethod","filterOtherData","_this4","call","$parent","colIndex","handleFilter","makeDataWithSort","item","handleFilterSelect","handleFilterReset","makeData","sortType","sortIndex","isCustom","_this5","makeDataWithSortAndFilter","_this6","addRowIsAttribute","newRow","_disabled","_checked","_expanded","_highlight","_this7","root","dataRow","currentIndex","hasOwnProperty","treeStack","temp","originData","obj","pop","parentRow","dataRowParent","deepCopyWithOutParent","parent","_rowKey","_this8","center","_columnKey","_filterMultiple","filterMultiple","filteredValue","exportCsv","params","filename","indexOf","datas","original","noHeader","callback","download","t","typeOf","o","toString","prototype","created","$slots","mounted","_this9","window","observer","listenTo","$on","val","beforeDestroy","removeListener","watch","handler","oldDataLen","deep"],"sources":["src/components/s-tree-table/s-tree-table.vue"],"sourcesContent":["<template>\r\n    <div :class=\"wrapClasses\" :style=\"styles\">\r\n        <div :class=\"classes\">\r\n            <div :class=\"[prefixCls + '-title']\" v-if=\"showSlotHeader\" ref=\"title\"><slot name=\"header\"></slot></div>\r\n            <div :class=\"[prefixCls + '-header']\" v-if=\"showHeader\" ref=\"header\" @mousewheel=\"handleMouseWheel\">\r\n                <table-head                    \r\n                    :prefix-cls=\"prefixCls\"\r\n                    :styleObject=\"tableStyle\"\r\n                    :columns=\"cloneColumns\"\r\n                    :obj-data=\"objData\"\r\n                    :columns-width=\"columnsWidth\"\r\n                    :data=\"rebuildData\"></table-head>\r\n            </div>\r\n            <div :class=\"[prefixCls + '-body']\" :style=\"bodyStyle\" ref=\"body\" @scroll=\"handleBodyScroll\"\r\n                v-show=\"!((!!localeNoDataText && (!data || data.length === 0)) || (!!localeNoFilteredDataText && (!rebuildData || rebuildData.length === 0)))\">\r\n                <table-body\r\n                    ref=\"tbody\"\r\n                    :prefix-cls=\"prefixCls\"\r\n                    :styleObject=\"tableStyle\"\r\n                    :columns=\"cloneColumns\"\r\n                    :data=\"rebuildData\"\r\n                    :columns-width=\"columnsWidth\"\r\n                    :obj-data=\"objData\"></table-body>\r\n            </div>\r\n            <div\r\n                :class=\"[prefixCls + '-tip']\"\r\n                v-show=\"((!!localeNoDataText && (!data || data.length === 0)) || (!!localeNoFilteredDataText && (!rebuildData || rebuildData.length === 0)))\">\r\n                <table cellspacing=\"0\" cellpadding=\"0\" border=\"0\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td :style=\"{ 'height': bodyStyle.height }\">\r\n                                <span v-html=\"localeNoDataText\" v-if=\"!data || data.length === 0\"></span>\r\n                                <span v-html=\"localeNoFilteredDataText\" v-else></span>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <div :class=\"[prefixCls + '-fixed']\" :style=\"fixedTableStyle\" v-if=\"isLeftFixed\">\r\n                <div :class=\"fixedHeaderClasses\" v-if=\"showHeader\">\r\n                    <table-head\r\n                        fixed=\"left\"\r\n                        :prefix-cls=\"prefixCls\"\r\n                        :styleObject=\"fixedTableStyle\"\r\n                        :columns=\"leftFixedColumns\"\r\n                        :obj-data=\"objData\"\r\n                        :columns-width=\"columnsWidth\"\r\n                        :data=\"rebuildData\"></table-head>\r\n                </div>\r\n                <div :class=\"[prefixCls + '-fixed-body']\" :style=\"fixedBodyStyle\" ref=\"fixedBody\">\r\n                    <table-body\r\n                        fixed=\"left\"\r\n                        :prefix-cls=\"prefixCls\"\r\n                        :styleObject=\"fixedTableStyle\"\r\n                        :columns=\"leftFixedColumns\"\r\n                        :data=\"rebuildData\"\r\n                        :columns-width=\"columnsWidth\"\r\n                        :obj-data=\"objData\"></table-body>\r\n                </div>\r\n            </div>\r\n            <div :class=\"[prefixCls + '-fixed-right']\" :style=\"fixedRightTableStyle\" v-if=\"isRightFixed\">\r\n                <div :class=\"fixedHeaderClasses\" v-if=\"showHeader\">\r\n                    <table-head\r\n                        fixed=\"right\"\r\n                        :prefix-cls=\"prefixCls\"\r\n                        :styleObject=\"fixedRightTableStyle\"\r\n                        :columns=\"rightFixedColumns\"\r\n                        :obj-data=\"objData\"\r\n                        :columns-width=\"columnsWidth\"\r\n                        :data=\"rebuildData\"></table-head>\r\n                </div>\r\n                <div :class=\"[prefixCls + '-fixed-body']\" :style=\"fixedBodyStyle\" ref=\"fixedRightBody\">\r\n                    <table-body\r\n                        fixed=\"right\"\r\n                        :prefix-cls=\"prefixCls\"\r\n                        :styleObject=\"fixedRightTableStyle\"\r\n                        :columns=\"rightFixedColumns\"\r\n                        :data=\"rebuildData\"\r\n                        :columns-width=\"columnsWidth\"\r\n                        :obj-data=\"objData\"></table-body>\r\n                </div>\r\n            </div>\r\n            <div :class=\"[prefixCls + '-footer']\" v-if=\"showSlotFooter\" ref=\"footer\"><slot name=\"footer\"></slot></div>\r\n        </div>\r\n        <Spin fix size=\"large\" v-if=\"loading\">\r\n            <slot name=\"loading\"></slot>\r\n        </Spin>\r\n    </div>\r\n</template>\r\n<script>\r\nimport tableHead from \"./table-head.vue\";\r\nimport tableBody from \"./table-body.vue\";\r\nimport Spin from \"iview/src/components/spin/spin.vue\";\r\nimport {\r\n  oneOf,\r\n  getStyle,\r\n  deepCopy,\r\n  getScrollBarSize\r\n} from \"iview/src/utils/assist\";\r\nimport { on, off } from \"iview/src/utils/dom\";\r\nimport Csv from \"iview/src/utils/csv\";\r\nimport ExportCsv from \"./export-csv\";\r\nimport Locale from \"iview/src/mixins/locale\";\r\nimport elementResizeDetectorMaker from \"element-resize-detector\";\r\n\r\nconst prefixCls = \"ivu-table\";\r\n\r\nlet rowKey = 1;\r\nlet columnKey = 1;\r\n\r\nexport default {\r\n  name: \"STreeTable\",\r\n  mixins: [Locale],\r\n  components: { tableHead, tableBody, Spin },\r\n  props: {\r\n    data: {\r\n      type: Array,\r\n      default() {\r\n        return [];\r\n      }\r\n    },\r\n    columns: {\r\n      type: Array,\r\n      default() {\r\n        return [];\r\n      }\r\n    },\r\n    size: {\r\n      validator(value) {\r\n        return oneOf(value, [\"small\", \"large\", \"default\"]);\r\n      }\r\n    },\r\n    width: {\r\n      type: [Number, String]\r\n    },\r\n    height: {\r\n      type: [Number, String]\r\n    },\r\n    stripe: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    border: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    showHeader: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    highlightRow: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    rowClassName: {\r\n      type: Function,\r\n      default() {\r\n        return \"\";\r\n      }\r\n    },\r\n    context: {\r\n      type: Object\r\n    },\r\n    noDataText: {\r\n      type: String\r\n    },\r\n    noFilteredDataText: {\r\n      type: String\r\n    },\r\n    disabledHover: {\r\n      type: Boolean\r\n    },\r\n    loading: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      ready: false,\r\n      tableWidth: 0,\r\n      columnsWidth: {},\r\n      prefixCls: prefixCls,\r\n      compiledUids: [],\r\n      objData: this.makeObjData(), // checkbox or highlight-row\r\n      rebuildData: [], // for sort or filter\r\n      cloneColumns: this.makeColumns(),\r\n      showSlotHeader: true,\r\n      showSlotFooter: true,\r\n      bodyHeight: 0,\r\n      bodyRealHeight: 0,\r\n      scrollBarWidth: getScrollBarSize(),\r\n      currentContext: this.context\r\n    };\r\n  },\r\n  computed: {\r\n    localeNoDataText() {\r\n      // if (this.noDataText === undefined) {\r\n      //   return this.t(\"i.table.noDataText\");\r\n      // } else {\r\n      //   return this.noDataText;\r\n      // }\r\n      return this.noDataText;\r\n    },\r\n    localeNoFilteredDataText() {\r\n      // if (this.noFilteredDataText === undefined) {\r\n      //   return this.t(\"i.table.noFilteredDataText\");\r\n      // } else {\r\n      //   return this.noFilteredDataText;\r\n      // }\r\n      return this.noFilteredDataText;\r\n    },\r\n    wrapClasses() {\r\n      return [\r\n        `${prefixCls}-wrapper`,\r\n        {\r\n          [`${prefixCls}-hide`]: !this.ready,\r\n          [`${prefixCls}-with-header`]: this.showSlotHeader,\r\n          [`${prefixCls}-with-footer`]: this.showSlotFooter\r\n        }\r\n      ];\r\n    },\r\n    classes() {\r\n      return [\r\n        `${prefixCls}`,\r\n        {\r\n          [`${prefixCls}-${this.size}`]: !!this.size,\r\n          [`${prefixCls}-border`]: this.border,\r\n          [`${prefixCls}-stripe`]: this.stripe,\r\n          [`${prefixCls}-with-fixed-top`]: !!this.height\r\n        }\r\n      ];\r\n    },\r\n    fixedHeaderClasses() {\r\n      return [\r\n        `${prefixCls}-fixed-header`,\r\n        {\r\n          [`${prefixCls}-fixed-header-with-empty`]: !this.rebuildData.length\r\n        }\r\n      ];\r\n    },\r\n    styles() {\r\n      let style = {};\r\n      if (this.height) {\r\n        const height =\r\n          this.isLeftFixed || this.isRightFixed\r\n            ? parseInt(this.height) + this.scrollBarWidth\r\n            : parseInt(this.height);\r\n        style.height = `${height}px`;\r\n      }\r\n      if (this.width) style.width = `${this.width}px`;\r\n      return style;\r\n    },\r\n    tableStyle() {\r\n      let style = {};      \r\n      if (this.tableWidth !== 0) {\r\n        let width = \"\";\r\n        if (this.bodyHeight === 0) {\r\n          width = this.tableWidth;\r\n        } else {\r\n          if (this.bodyHeight > this.bodyRealHeight) {\r\n            width = this.tableWidth;\r\n          } else {\r\n            width = this.tableWidth - this.scrollBarWidth;\r\n          }\r\n        }\r\n        //                    const width = this.bodyHeight === 0 ? this.tableWidth : this.tableWidth - this.scrollBarWidth;\r\n        style.width = `${width}px`;\r\n        // console.log(style.width)\r\n        // style.width = 'auto'\r\n      }\r\n      return style;\r\n    },\r\n    fixedTableStyle() {\r\n      let style = {};\r\n      let width = 0;\r\n      this.leftFixedColumns.forEach(col => {\r\n        if (col.fixed && col.fixed === \"left\") width += col._width;\r\n      });\r\n      style.width = `${width}px`;\r\n      return style;\r\n    },\r\n    fixedRightTableStyle() {\r\n      let style = {};\r\n      let width = 0;\r\n      this.rightFixedColumns.forEach(col => {\r\n        if (col.fixed && col.fixed === \"right\") width += col._width;\r\n      });\r\n      width += this.scrollBarWidth;\r\n      style.width = `${width}px`;\r\n      return style;\r\n    },\r\n    bodyStyle() {\r\n      let style = {};\r\n      if (this.bodyHeight !== 0) {\r\n        // add a height to resolve scroll bug when browser has a scrollBar in fixed type and height prop\r\n        const height =\r\n          this.isLeftFixed || this.isRightFixed\r\n            ? this.bodyHeight + this.scrollBarWidth\r\n            : this.bodyHeight;\r\n        style.height = `${height}px`;\r\n      }\r\n      return style;\r\n    },\r\n    fixedBodyStyle() {\r\n      let style = {};\r\n      if (this.bodyHeight !== 0) {\r\n        let height = this.bodyHeight + this.scrollBarWidth - 1;\r\n\r\n        // #2102 里，如果 Table 没有设置 width，而是集成父级的 width，固定列也应该不包含滚动条高度，所以这里直接计算表格宽度\r\n        const tableWidth = parseInt(getStyle(this.$el, \"width\")) - 1;\r\n        if (\r\n          (this.width && this.width < this.tableWidth) ||\r\n          tableWidth < this.tableWidth\r\n        ) {\r\n          height = this.bodyHeight;\r\n        }\r\n        //                    style.height = this.scrollBarWidth > 0 ? `${this.bodyHeight}px` : `${this.bodyHeight - 1}px`;\r\n        style.height =\r\n          this.scrollBarWidth > 0 ? `${height}px` : `${height - 1}px`;\r\n      }\r\n      return style;\r\n    },\r\n    leftFixedColumns() {\r\n      let left = [];\r\n      let other = [];\r\n      this.cloneColumns.forEach(col => {\r\n        if (col.fixed && col.fixed === \"left\") {\r\n          left.push(col);\r\n        } else {\r\n          other.push(col);\r\n        }\r\n      });\r\n      return left.concat(other);\r\n    },\r\n    rightFixedColumns() {\r\n      let right = [];\r\n      let other = [];\r\n      this.cloneColumns.forEach(col => {\r\n        if (col.fixed && col.fixed === \"right\") {\r\n          right.push(col);\r\n        } else {\r\n          other.push(col);\r\n        }\r\n      });\r\n      return right.concat(other);\r\n    },\r\n    isLeftFixed() {\r\n      return this.columns.some(col => col.fixed && col.fixed === \"left\");\r\n    },\r\n    isRightFixed() {\r\n      return this.columns.some(col => col.fixed && col.fixed === \"right\");\r\n    }\r\n  },\r\n  methods: {\r\n    rowClsName(index) {\r\n      return this.rowClassName(this.data[index], index);\r\n    },\r\n    handleResize() {\r\n    this.$nextTick(() => {\r\n      let tableWidth = 0;\r\n      const allWidth = !this.columns.some(cell => !cell.width); // each column set a width\r\n      if (allWidth) {\r\n        this.tableWidth = this.columns\r\n          .map(cell => cell.width)\r\n          .reduce((a, b) => a + b, 0);\r\n      } \r\n      //else {\r\n        // this.tableWidth = parseInt(getStyle(this.$refs.body, \"width\")) - 1;\r\n      //}        \r\n      // if(this.tableWidth!=0 )//非0,说明已经计算好了，不要再重新计算了\r\n      //     return\r\n      // this.columnsWidth = {};\r\n\r\n      if (!this.$refs.tbody) return;\r\n      this.$nextTick(() => {\r\n        let columnsWidth = {};\r\n        let autoWidthIndex = -1;\r\n        if (allWidth)\r\n          autoWidthIndex = this.cloneColumns.findIndex(cell => !cell.width); //todo 这行可能有问题                      \r\n\r\n        //\r\n        const $warrperdiv = this.$refs.header.parentNode.parentNode;\r\n    \r\n        if (this.data.length) {\r\n          const $bodyTr = this.$refs.tbody.$el.querySelectorAll(\"tbody tr\");\r\n          const $headTr = this.$refs.header.children[0].querySelectorAll(\"tr\");\r\n          // const $headTr = this.$refs.thead.$el.querySelectorAll(\"thead tr\");            \r\n                     \r\n          let $td = $headTr[0].children;                         \r\n          let autoColNum = $td.length;\r\n          //从后往前找到不是fixed width的第一个，将最后的宽度倒减给它，保证宽度一致性\r\n          let lastAutoWidth;\r\n          let lastIndex;\r\n          let autoTotalMinWidth = parseInt(getStyle($warrperdiv, \"width\"));;\r\n          for (let i = 0; i < $td.length; i++) {\r\n            let column = this.cloneColumns[i];\r\n            if (column.width) {\r\n              autoTotalMinWidth = autoTotalMinWidth-column.width;\r\n              autoColNum--;\r\n            }else{\r\n              lastIndex = i;//last index\r\n            }\r\n          }\r\n\r\n          let minWidthperCol = Math.floor(autoTotalMinWidth/autoColNum-10);\r\n        //   let minWidthperCol = autoTotalMinWidth/autoColNum-10;\r\n          \r\n          for (let j = 0; j < $td.length; j++) {\r\n            // can not use forEach in Firefox\r\n            let column2 = this.cloneColumns[j];\r\n            let width = parseInt(getStyle($td[j], \"width\")) + 0;\r\n            // let width = Math.floor(getStyle($td[j], \"width\")) + 1;\r\n            //默认Auto\r\n            width = width>minWidthperCol?width:minWidthperCol;                          \r\n            if (column2.width) {//固定宽度\r\n              width = column2.width;\r\n            }else if(j==lastIndex){\r\n              width = autoTotalMinWidth-5;//最后一列就是剩下的宽度\r\n            }else {//自动宽度\r\n              autoTotalMinWidth -= width\r\n            }              \r\n            this.cloneColumns[j]._width = width;            \r\n            columnsWidth[column2._index] = {\r\n              width: width\r\n            };\r\n          }\r\n          \r\n          if($bodyTr.length!=0){\r\n            $td = $bodyTr[0].children;              \r\n            for(let j=0;j<$td.length;j++){                  \r\n                let column = this.cloneColumns[j];                  \r\n                let width = parseInt(getStyle($td[j], \"width\")) + 0;\r\n                // console.log('body['+j+']width=' +width)\r\n                if (column.width) width = column.width;                  \r\n                width = width > this.cloneColumns[j]._width?width:this.cloneColumns[j]._width;//使用大的width                                    \r\n                this.cloneColumns[j]._width = width;                  \r\n                columnsWidth[column._index] = {\r\n                   width: width\r\n                };                  \r\n            }\r\n          }\r\n\r\n          //计算tableWidth长度\r\n          for(let j=0;j<$td.length;j++){ \r\n            let column = this.cloneColumns[j];\r\n            tableWidth+=columnsWidth[column._index].width\r\n          }\r\n          \r\n          this.columnsWidth = columnsWidth;\r\n          // console.log(columnsWidth)\r\n           this.tableWidth = tableWidth;\r\n        }     \r\n         \r\n          //console.log(\"this.tableWidth=\"+this.tableWidth)\r\n      });\r\n      // get table real height,for fixed when set height prop,but height < table's height,show scrollBarWidth\r\n      this.bodyRealHeight = parseInt(\r\n        getStyle(this.$refs.tbody.$el, \"height\")\r\n      );\r\n    });\r\n    },\r\n    handleMouseIn(_index) {\r\n      if (this.disabledHover) return;\r\n      if (this.objData[_index]._isHover) return;\r\n      this.objData[_index]._isHover = true;\r\n    },\r\n    handleMouseOut(_index) {\r\n      if (this.disabledHover) return;\r\n      this.objData[_index]._isHover = false;\r\n    },\r\n    // 通用处理 highlightCurrentRow 和 clearCurrentRow\r\n    handleCurrentRow(type, _index) {\r\n      let oldIndex = -1;\r\n      for (let i in this.objData) {\r\n        if (this.objData[i]._isHighlight) {\r\n          oldIndex = parseInt(i);\r\n          this.objData[i]._isHighlight = false;\r\n        }\r\n      }\r\n      if (type === \"highlight\") this.objData[_index]._isHighlight = true;\r\n      const oldData =\r\n        oldIndex < 0\r\n          ? null\r\n          : JSON.parse(JSON.stringify(this.objData[_index].ref));\r\n      const newData =\r\n        type === \"highlight\"\r\n          ? JSON.parse(JSON.stringify(this.objData[_index].ref))\r\n          : null;\r\n      this.$emit(\"on-current-change\", newData, oldData);\r\n    },\r\n    highlightCurrentRow(_index) {\r\n      if (!this.highlightRow || this.objData[_index]._isHighlight) return;\r\n      this.handleCurrentRow(\"highlight\", _index);\r\n    },\r\n    clearCurrentRow() {\r\n      if (!this.highlightRow) return;\r\n      this.handleCurrentRow(\"clear\");\r\n    },\r\n    clickCurrentRow(_index) {\r\n      this.highlightCurrentRow(_index);\r\n      // console.log(this.objData[_index]);\r\n      this.$emit(\"on-row-click\", this.objData[_index].ref, _index);\r\n    },\r\n    dblclickCurrentRow(_index) {\r\n      this.highlightCurrentRow(_index);\r\n      this.$emit(\"on-row-dblclick\", this.objData[_index].ref, _index);\r\n    },\r\n    getSelection() {\r\n      let selections = [];\r\n      let selectionIndexes = [];\r\n      for (let i in this.objData) {\r\n        if (this.objData[i]._isChecked) {\r\n          selectionIndexes.push(parseInt(i));\r\n          selections.push(this.objData[i].ref);\r\n        }\r\n      }\r\n      return selections;\r\n    },\r\n    toggleSelect(_index) {\r\n      let data = {};\r\n\r\n      for (let i in this.objData) {\r\n        if (parseInt(i) === _index) {\r\n          data = this.objData[i];\r\n          break;\r\n        }\r\n      }\r\n      const status = !data._isChecked;\r\n\r\n      this.objData[_index]._isChecked = status;\r\n\r\n      const selection = this.getSelection();\r\n      this.$emit(\r\n        status ? \"on-select\" : \"on-select-cancel\",\r\n        selection,\r\n        this.objData[_index].ref\r\n      );\r\n      this.$emit(\"on-selection-change\", selection);\r\n    },\r\n    toggleExpand(_index) {\r\n      let data = {};\r\n      for (let i in this.objData) {\r\n        if (parseInt(i) === _index) {\r\n          data = this.objData[i];\r\n          break;\r\n        }\r\n      }\r\n      const status = !data._isExpanded;\r\n      this.objData[_index]._isExpanded = status;\r\n      this.$emit(\r\n        \"on-expand\",\r\n        JSON.parse(JSON.stringify(this.objData[_index].ref)),\r\n        status\r\n      );\r\n    },\r\n    toggleTree(_index) {\r\n      let data = {};\r\n      // let _currentIndex = _index;\r\n      for (let i in this.objData) {\r\n        if (parseInt(i) === _index) {\r\n          data = this.objData[i];\r\n          break;\r\n        }\r\n      }\r\n      const status = !data._isFolded;\r\n      this.objData[_index]._isFolded = status;\r\n      //modify origin data fold status 修改data时不再refreshfold状态\r\n      this.rebuildData[_index].ref._unfolded = !status;\r\n      //如果父节点fold，则它的children也要全部fold,直接修改源数据\r\n      // debugger\r\n      if (this.objData[_index]._isFolded) {\r\n        this.cascadeFold(this.rebuildData[_index].ref);\r\n        this.cascadeFold2(this.objData[_index]);\r\n      }\r\n      this.$emit(\"unfold-tree\", this.objData[_index].ref, status);\r\n    },\r\n    cascadeFold(objData) {\r\n      let children = objData.children;\r\n      if (children == null || children == undefined || children.length == 0) {\r\n        return;\r\n      }\r\n      for (let child of children) {\r\n        if (child != null) {\r\n          child._unfolded = false;\r\n        }\r\n        this.cascadeFold(child);\r\n      }\r\n    },\r\n    // 折叠子级树\r\n    cascadeFold2(objData) {\r\n      let children = objData.children;\r\n      if (children == null || children == undefined || children.length == 0) {\r\n        return;\r\n      }\r\n      for (let child of children) {\r\n        if (child != null) {\r\n          child._isFolded = true;\r\n        }\r\n        this.cascadeFold2(child);\r\n      }\r\n    },\r\n    selectAll(status) {\r\n      for (const data of this.rebuildData) {\r\n        if (this.objData[data._index]._isDisabled) {\r\n          continue;\r\n        } else {\r\n          this.objData[data._index]._isChecked = status;\r\n        }\r\n      }\r\n      const selection = this.getSelection();\r\n      if (status) {\r\n        this.$emit(\"on-select-all\", selection);\r\n      }\r\n      this.$emit(\"on-selection-change\", selection);\r\n    },\r\n    fixedHeader() {\r\n      if (this.height) {\r\n        this.$nextTick(() => {\r\n          const titleHeight =\r\n            parseInt(getStyle(this.$refs.title, \"height\")) || 0;\r\n          const headerHeight =\r\n            parseInt(getStyle(this.$refs.header, \"height\")) || 0;\r\n          const footerHeight =\r\n            parseInt(getStyle(this.$refs.footer, \"height\")) || 0;\r\n          this.bodyHeight =\r\n            this.height - titleHeight - headerHeight - footerHeight;\r\n        });\r\n      } else {\r\n        this.bodyHeight = 0;\r\n      }\r\n    },\r\n    hideColumnFilter() {\r\n      this.cloneColumns.forEach(col => (col._filterVisible = false));\r\n    },\r\n    handleBodyScroll(event) {\r\n      if (this.showHeader)\r\n        this.$refs.header.scrollLeft = event.target.scrollLeft;\r\n      if (this.isLeftFixed)\r\n        this.$refs.fixedBody.scrollTop = event.target.scrollTop;\r\n      if (this.isRightFixed)\r\n        this.$refs.fixedRightBody.scrollTop = event.target.scrollTop;\r\n      this.hideColumnFilter();\r\n    },\r\n    handleMouseWheel(event) {\r\n      const deltaX = event.deltaX;\r\n      const $body = this.$refs.body;\r\n\r\n      if (deltaX > 0) {\r\n        $body.scrollLeft = $body.scrollLeft + 10;\r\n      } else {\r\n        $body.scrollLeft = $body.scrollLeft - 10;\r\n      }\r\n    },\r\n    sortData(data, type, index) {\r\n      const key = this.cloneColumns[index].key;\r\n      data.sort((a, b) => {\r\n        if (this.cloneColumns[index].sortMethod) {\r\n          return this.cloneColumns[index].sortMethod(a[key], b[key], type);\r\n        } else {\r\n          if (type === \"asc\") {\r\n            return a[key] > b[key] ? 1 : -1;\r\n          } else if (type === \"desc\") {\r\n            return a[key] < b[key] ? 1 : -1;\r\n          }\r\n        }\r\n      });\r\n      return data;\r\n    },\r\n    handleSort(_index, type) {\r\n      const index = this.GetOriginalIndex(_index);\r\n      this.cloneColumns.forEach(col => (col._sortType = \"normal\"));\r\n\r\n      const key = this.cloneColumns[index].key;\r\n      if (this.cloneColumns[index].sortable !== \"custom\") {\r\n        // custom is for remote sort\r\n        if (type === \"normal\") {\r\n          this.rebuildData = this.makeDataWithFilter();\r\n        } else {\r\n          this.rebuildData = this.sortData(this.rebuildData, type, index);\r\n        }\r\n      }\r\n      this.cloneColumns[index]._sortType = type;\r\n\r\n      this.$emit(\"on-sort-change\", {\r\n        column: JSON.parse(\r\n          JSON.stringify(this.columns[this.cloneColumns[index]._index])\r\n        ),\r\n        key: key,\r\n        order: type\r\n      });\r\n    },\r\n    handleFilterHide(index) {\r\n      // clear checked that not filter now\r\n      if (!this.cloneColumns[index]._isFiltered)\r\n        this.cloneColumns[index]._filterChecked = [];\r\n    },\r\n    filterData(data, column) {\r\n      return data.filter(row => {\r\n        //如果定义了远程过滤方法则忽略此方法\r\n        if (typeof column.filterRemote === \"function\") return true;\r\n\r\n        let status = !column._filterChecked.length;\r\n        for (let i = 0; i < column._filterChecked.length; i++) {\r\n          status = column.filterMethod(column._filterChecked[i], row);\r\n          if (status) break;\r\n        }\r\n        return status;\r\n      });\r\n    },\r\n    filterOtherData(data, index) {\r\n      let column = this.cloneColumns[index];\r\n      if (typeof column.filterRemote === \"function\") {\r\n        column.filterRemote.call(\r\n          this.$parent,\r\n          column._filterChecked,\r\n          column.key,\r\n          column\r\n        );\r\n      }\r\n\r\n      this.cloneColumns.forEach((col, colIndex) => {\r\n        if (colIndex !== index) {\r\n          data = this.filterData(data, col);\r\n        }\r\n      });\r\n      return data;\r\n    },\r\n    handleFilter(index) {\r\n      const column = this.cloneColumns[index];\r\n      let filterData = this.makeDataWithSort();\r\n\r\n      // filter others first, after filter this column\r\n      filterData = this.filterOtherData(filterData, index);\r\n      this.rebuildData = this.filterData(filterData, column);\r\n\r\n      this.cloneColumns[index]._isFiltered = true;\r\n      this.cloneColumns[index]._filterVisible = false;\r\n      this.$emit(\"on-filter-change\", column);\r\n    },\r\n    /**\r\n     * #2832\r\n     * 应该区分当前表头的 column 是左固定还是右固定\r\n     * 否则执行到 $parent 时，方法的 index 与 cloneColumns 的 index 是不对应的\r\n     * 左固定和右固定，要区分对待\r\n     * 所以，此方法用来获取正确的 index\r\n     * */\r\n    GetOriginalIndex(_index) {\r\n      return this.cloneColumns.findIndex(item => item._index === _index);\r\n    },\r\n    handleFilterSelect(_index, value) {\r\n      const index = this.GetOriginalIndex(_index);\r\n      this.cloneColumns[index]._filterChecked = [value];\r\n      this.handleFilter(index);\r\n    },\r\n    handleFilterReset(_index) {\r\n      const index = this.GetOriginalIndex(_index);\r\n      this.cloneColumns[index]._isFiltered = false;\r\n      this.cloneColumns[index]._filterVisible = false;\r\n      this.cloneColumns[index]._filterChecked = [];\r\n\r\n      let filterData = this.makeDataWithSort();\r\n      filterData = this.filterOtherData(filterData, index);\r\n      this.rebuildData = filterData;\r\n      this.$emit(\"on-filter-change\", this.cloneColumns[index]);\r\n    },\r\n    makeDataWithSort() {\r\n      let data = this.makeData();\r\n      let sortType = \"normal\";\r\n      let sortIndex = -1;\r\n      let isCustom = false;\r\n\r\n      for (let i = 0; i < this.cloneColumns.length; i++) {\r\n        if (this.cloneColumns[i]._sortType !== \"normal\") {\r\n          sortType = this.cloneColumns[i]._sortType;\r\n          sortIndex = i;\r\n          isCustom = this.cloneColumns[i].sortable === \"custom\";\r\n          break;\r\n        }\r\n      }\r\n      if (sortType !== \"normal\" && !isCustom)\r\n        data = this.sortData(data, sortType, sortIndex);\r\n      return data;\r\n    },\r\n    makeDataWithFilter() {\r\n      let data = this.makeData();\r\n      this.cloneColumns.forEach(col => (data = this.filterData(data, col)));\r\n      return data;\r\n    },\r\n    makeDataWithSortAndFilter() {\r\n      let data = this.makeDataWithSort();\r\n      this.cloneColumns.forEach(col => (data = this.filterData(data, col)));\r\n      return data;\r\n    },\r\n    addRowIsAttribute(newRow) {\r\n      newRow._isHover = false;\r\n      if (newRow._disabled) {\r\n        newRow._isDisabled = newRow._disabled;\r\n      } else {\r\n        newRow._isDisabled = false;\r\n      }\r\n      if (newRow._checked) {\r\n        newRow._isChecked = newRow._checked;\r\n      } else {\r\n        newRow._isChecked = false;\r\n      }\r\n      if (newRow._expanded) {\r\n        newRow._isExpanded = newRow._expanded;\r\n      } else {\r\n        newRow._isExpanded = false;\r\n      }\r\n      if (newRow._highlight) {\r\n        newRow._isHighlight = newRow._highlight;\r\n      } else {\r\n        newRow._isHighlight = false;\r\n      }\r\n      if (newRow._unfolded) {\r\n        newRow._isFolded = !newRow._unfolded;\r\n      } else {\r\n        newRow._isFolded = true;\r\n      }\r\n      return newRow;\r\n    },\r\n    makeData() {\r\n      //创建表格Data\r\n      //makeData need to unfold the children node to table data\r\n      let root = this.data;\r\n      let data = [];\r\n      let dataRow;\r\n      let currentIndex = 0;\r\n      let rowKey = 0;\r\n      root.forEach((row, index) => {\r\n        if (row.hasOwnProperty(\"children\")) {\r\n          let treeStack = new Array();\r\n          let temp = { originData: row, makeData: null };\r\n          treeStack.push(temp);\r\n          //Deep fist travel children Tree\r\n          while (treeStack.length != 0) {\r\n            const obj = treeStack.pop();\r\n            const parentRow = obj.originData;\r\n            const dataRowParent = obj.makeData;\r\n            dataRow = this.deepCopyWithOutParent(parentRow);\r\n            if (typeof dataRowParent != \"undefined\" && dataRowParent != null) {\r\n              dataRowParent.children.push(dataRow);\r\n              dataRow.parent = dataRowParent;\r\n            }\r\n            dataRow._rowKey = rowKey++;\r\n            dataRow._index = currentIndex;\r\n            dataRow.ref = parentRow; //增加对原数据的引用，方便后续操作\r\n            data[currentIndex++] = dataRow;\r\n            if (parentRow.hasOwnProperty(\"children\")) {\r\n              dataRow.children = [];\r\n              for (let i = parentRow.children.length - 1; i >= 0; i--) {\r\n                treeStack.push({\r\n                  originData: parentRow.children[i],\r\n                  makeData: dataRow\r\n                });\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          dataRow = this.deepCopyWithOutParent(row);\r\n          dataRow._rowKey = rowKey++;\r\n          dataRow._index = currentIndex;\r\n          dataRow.ref = row; //增加对原数据的引用，方便后续操作\r\n          data[currentIndex++] = dataRow;\r\n        }\r\n      });\r\n      //   console.log(data);\r\n      return data;\r\n    },\r\n    makeObjData() {\r\n      // let data = {};\r\n      // let newIndex = 0;\r\n      // this.data.forEach((row, index) => {\r\n      //   let root = this.addRowIsAttribute(deepCopy(row));\r\n      //   root.ref = row;\r\n      //   if (root.hasOwnProperty(\"children\")) {\r\n      //     //遍历\r\n      //     let treeStack = new Array();\r\n      //     treeStack.push(root);\r\n      //     while (treeStack.length != 0) {\r\n      //       const parentRow = treeStack.pop();\r\n      //       data[newIndex] = this.addRowIsAttribute(deepCopy(parentRow)); //输出\r\n      //       // data[newIndex].ref = parentRow;\r\n      //       newIndex++;\r\n      //       if (parentRow.hasOwnProperty(\"children\")) {\r\n      //         //逆序遍历数组\r\n      //         for (let i = parentRow.children.length - 1; i >= 0; i--) {\r\n      //           parentRow.children[i].parent = parentRow;\r\n      //           treeStack.push(parentRow.children[i]);\r\n      //         }\r\n      //       }\r\n      //     }\r\n      //   } else {\r\n      //     data[newIndex++] = root;\r\n      //   }\r\n      //   //Deep fist travel children Tree\r\n      // });\r\n      // console.log(data);\r\n      let data = {};\r\n      this.makeData().forEach((row, index) => {\r\n        data[index] = this.addRowIsAttribute(row);\r\n      });\r\n      return data;\r\n    },\r\n    makeColumns() {\r\n      let columns = deepCopy(this.columns);\r\n      let left = [];\r\n      let right = [];\r\n      let center = [];\r\n\r\n      columns.forEach((column, index) => {\r\n        column._index = index;\r\n        column._columnKey = columnKey++;\r\n        column._width = column.width ? column.width : \"\"; // update in handleResize()\r\n        column._sortType = \"normal\";\r\n        column._filterVisible = false;\r\n        column._isFiltered = false;\r\n        column._filterChecked = [];\r\n\r\n        if (\"filterMultiple\" in column) {\r\n          column._filterMultiple = column.filterMultiple;\r\n        } else {\r\n          column._filterMultiple = true;\r\n        }\r\n        if (\"filteredValue\" in column) {\r\n          column._filterChecked = column.filteredValue;\r\n          column._isFiltered = true;\r\n        }\r\n\r\n        if (\"sortType\" in column) {\r\n          column._sortType = column.sortType;\r\n        }\r\n\r\n        if (column.fixed && column.fixed === \"left\") {\r\n          left.push(column);\r\n        } else if (column.fixed && column.fixed === \"right\") {\r\n          right.push(column);\r\n        } else {\r\n          center.push(column);\r\n        }\r\n      });\r\n      return left.concat(center).concat(right);\r\n    },\r\n    exportCsv(params) {\r\n      if (params.filename) {\r\n        if (params.filename.indexOf(\".csv\") === -1) {\r\n          params.filename += \".csv\";\r\n        }\r\n      } else {\r\n        params.filename = \"table.csv\";\r\n      }\r\n\r\n      let columns = [];\r\n      let datas = [];\r\n      if (params.columns && params.data) {\r\n        columns = params.columns;\r\n        datas = params.data;\r\n      } else {\r\n        columns = this.columns;\r\n        if (!(\"original\" in params)) params.original = true;\r\n        datas = params.original ? this.data : this.rebuildData;\r\n      }\r\n\r\n      let noHeader = false;\r\n      if (\"noHeader\" in params) noHeader = params.noHeader;\r\n\r\n      const data = Csv(columns, datas, params, noHeader);\r\n      if (params.callback) params.callback(data);\r\n      else ExportCsv.download(params.filename, data);\r\n    },\r\n    deepCopyWithOutParent(data) {\r\n      const t = this.typeOf(data);\r\n      let o;\r\n      if (t === \"array\") {\r\n        o = [];\r\n      } else if (t === \"object\") {\r\n        o = {};\r\n      } else {\r\n        return data;\r\n      }\r\n\r\n      if (t === \"array\") {\r\n        for (let i = 0; i < data.length; i++) {\r\n          o.push(this.deepCopyWithOutParent(data[i]));\r\n        }\r\n      } else if (t === \"object\") {\r\n        for (let i in data) {\r\n          if (i != \"parent\" && i != \"children\") {\r\n            o[i] = this.deepCopyWithOutParent(data[i]);\r\n          } else {\r\n            o[i] = data[i];\r\n          }\r\n        }\r\n      }\r\n      return o;\r\n    },\r\n    typeOf(obj) {\r\n      const toString = Object.prototype.toString;\r\n      const map = {\r\n        \"[object Boolean]\": \"boolean\",\r\n        \"[object Number]\": \"number\",\r\n        \"[object String]\": \"string\",\r\n        \"[object Function]\": \"function\",\r\n        \"[object Array]\": \"array\",\r\n        \"[object Date]\": \"date\",\r\n        \"[object RegExp]\": \"regExp\",\r\n        \"[object Undefined]\": \"undefined\",\r\n        \"[object Null]\": \"null\",\r\n        \"[object Object]\": \"object\"\r\n      };\r\n      return map[toString.call(obj)];\r\n    }\r\n  },\r\n  created() {\r\n    if (!this.context) this.currentContext = this.$parent;\r\n    this.showSlotHeader = this.$slots.header !== undefined;\r\n    this.showSlotFooter = this.$slots.footer !== undefined;\r\n    this.rebuildData = this.makeDataWithSortAndFilter();\r\n  },\r\n  mounted() {\r\n    this.handleResize();\r\n    this.fixedHeader();\r\n    this.$nextTick(() => (this.ready = true));\r\n\r\n    on(window, \"resize\", this.handleResize);\r\n    this.observer = elementResizeDetectorMaker();\r\n    this.observer.listenTo(this.$el, this.handleResize);\r\n\r\n    this.$on(\"on-visible-change\", val => {\r\n      if (val) {\r\n        this.handleResize();\r\n        this.fixedHeader();\r\n      }\r\n    });\r\n  },\r\n  beforeDestroy() {\r\n    off(window, \"resize\", this.handleResize);\r\n    this.observer.removeListener(this.$el, this.handleResize);\r\n  },\r\n  watch: {\r\n    data: {\r\n      handler() {\r\n        const oldDataLen = this.rebuildData.length;\r\n        this.objData = this.makeObjData();\r\n        this.rebuildData = this.makeDataWithSortAndFilter();\r\n        this.handleResize();\r\n        if (!oldDataLen) {\r\n          this.fixedHeader();\r\n        }\r\n      },\r\n      deep: true\r\n    },\r\n    columns: {\r\n      handler() {\r\n        // todo 这里有性能问题，可能是左右固定计算属性影响的\r\n        this.cloneColumns = this.makeColumns();\r\n        this.rebuildData = this.makeDataWithSortAndFilter();\r\n        this.handleResize();\r\n      },\r\n      deep: true\r\n    },\r\n    height() {\r\n      this.fixedHeader();\r\n    }\r\n  }\r\n};\r\n</script>\r\n"],"mappings":"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"}]}