{"remainingRequest":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\components\\count-to\\count-to.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\components\\count-to\\count-to.vue","mtime":1681468306444},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\.babelrc","mtime":1681468306354},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport CountUp from 'countup';\nimport \"./index.less\";\nexport default {\n  name: 'CountTo',\n  props: {\n    init: {\n      type: Number,\n      default: 0\n    },\n    /**\r\n     * @description 起始值，即动画开始前显示的数值\r\n     */\n    startVal: {\n      type: Number,\n      default: 0\n    },\n    /**\r\n     * @description 结束值，即动画结束后显示的数值\r\n     */\n    end: {\n      type: Number,\n      required: true\n    },\n    /**\r\n     * @description 保留几位小数\r\n     */\n    decimals: {\n      type: Number,\n      default: 0\n    },\n    /**\r\n     * @description 分隔整数和小数的符号，默认是小数点\r\n     */\n    decimal: {\n      type: String,\n      default: '.'\n    },\n    /**\r\n     * @description 动画持续的时间，单位是秒\r\n     */\n    duration: {\n      type: Number,\n      default: 2\n    },\n    /**\r\n     * @description 动画延迟开始的时间，单位是秒\r\n     */\n    delay: {\n      type: Number,\n      default: 0\n    },\n    /**\r\n     * @description 是否禁用easing动画效果\r\n     */\n    uneasing: {\n      type: Boolean,\n      default: false\n    },\n    /**\r\n     * @description 是否使用分组，分组后每三位会用一个符号分隔\r\n     */\n    usegroup: {\n      type: Boolean,\n      default: false\n    },\n    /**\r\n     * @description 用于分组(usegroup)的符号\r\n     */\n    separator: {\n      type: String,\n      default: ','\n    },\n    /**\r\n     * @description 是否简化显示，设为true后会使用unit单位来做相关省略\r\n     */\n    simplify: {\n      type: Boolean,\n      default: false\n    },\n    /**\r\n     * @description 自定义单位，如[3, 'K+'], [6, 'M+']即大于3位数小于6位数的用k+来做省略\r\n     *              1000即显示为1K+\r\n     */\n    unit: {\n      type: Array,\n      default: function _default() {\n        return [[3, 'K+'], [6, 'M+'], [9, 'B+']];\n      }\n    },\n    countClass: {\n      type: String,\n      default: ''\n    },\n    unitClass: {\n      type: String,\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      counter: null,\n      unitText: ''\n    };\n  },\n  computed: {\n    counterId: function counterId() {\n      return \"count_to_\".concat(this._uid);\n    }\n  },\n  methods: {\n    getHandleVal: function getHandleVal(val, len) {\n      return {\n        endVal: parseInt(val / Math.pow(10, this.unit[len - 1][0])),\n        unitText: this.unit[len - 1][1]\n      };\n    },\n    transformValue: function transformValue(val) {\n      var len = this.unit.length;\n      var res = {\n        endVal: 0,\n        unitText: ''\n      };\n      if (val < Math.pow(10, this.unit[0][0])) res.endVal = val;else {\n        for (var i = 1; i < len; i++) {\n          if (val >= Math.pow(10, this.unit[i - 1][0]) && val < Math.pow(10, this.unit[i][0])) res = this.getHandleVal(val, i);\n        }\n      }\n      if (val > Math.pow(10, this.unit[len - 1][0])) res = this.getHandleVal(val, len);\n      return res;\n    },\n    getValue: function getValue(val) {\n      var res = 0;\n      if (this.simplify) {\n        var _this$transformValue = this.transformValue(val),\n          endVal = _this$transformValue.endVal,\n          unitText = _this$transformValue.unitText;\n        this.unitText = unitText;\n        res = endVal;\n      } else {\n        res = val;\n      }\n      return res;\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n    this.$nextTick(function () {\n      var endVal = _this.getValue(_this.end);\n      _this.counter = new CountUp(_this.counterId, _this.startVal, endVal, _this.decimals, _this.duration, {\n        useEasing: !_this.uneasing,\n        useGrouping: _this.useGroup,\n        separator: _this.separator,\n        decimal: _this.decimal\n      });\n      setTimeout(function () {\n        if (!_this.counter.error) _this.counter.start();\n      }, _this.delay);\n    });\n  },\n  watch: {\n    end: function end(newVal) {\n      var endVal = this.getValue(newVal);\n      this.counter.update(endVal);\n    }\n  }\n};",{"version":3,"names":["CountUp","name","props","init","type","Number","default","startVal","end","required","decimals","decimal","String","duration","delay","uneasing","Boolean","usegroup","separator","simplify","unit","Array","_default","countClass","unitClass","data","counter","unitText","computed","counterId","concat","_uid","methods","getHandleVal","val","len","endVal","parseInt","Math","pow","transformValue","length","res","i","getValue","_this$transformValue","mounted","_this","$nextTick","useEasing","useGrouping","useGroup","setTimeout","error","start","watch","newVal","update"],"sources":["src/components/count-to/count-to.vue"],"sourcesContent":["<template>\r\n  <div class=\"count-to-wrapper\">\r\n    <slot name=\"left\"/>\r\n    <p class=\"content-outer\"><span :class=\"['count-to-count-text', countClass]\" :id=\"counterId\">{{ init }}</span><i :class=\"['count-to-unit-text', unitClass]\">{{ unitText }}</i></p>\r\n    <slot name=\"right\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport CountUp from 'countup'\r\nimport './index.less'\r\nexport default {\r\n  name: 'CountTo',\r\n  props: {\r\n    init: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    /**\r\n     * @description 起始值，即动画开始前显示的数值\r\n     */\r\n    startVal: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    /**\r\n     * @description 结束值，即动画结束后显示的数值\r\n     */\r\n    end: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    /**\r\n     * @description 保留几位小数\r\n     */\r\n    decimals: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    /**\r\n     * @description 分隔整数和小数的符号，默认是小数点\r\n     */\r\n    decimal: {\r\n      type: String,\r\n      default: '.'\r\n    },\r\n    /**\r\n     * @description 动画持续的时间，单位是秒\r\n     */\r\n    duration: {\r\n      type: Number,\r\n      default: 2\r\n    },\r\n    /**\r\n     * @description 动画延迟开始的时间，单位是秒\r\n     */\r\n    delay: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    /**\r\n     * @description 是否禁用easing动画效果\r\n     */\r\n    uneasing: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n     * @description 是否使用分组，分组后每三位会用一个符号分隔\r\n     */\r\n    usegroup: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n     * @description 用于分组(usegroup)的符号\r\n     */\r\n    separator: {\r\n      type: String,\r\n      default: ','\r\n    },\r\n    /**\r\n     * @description 是否简化显示，设为true后会使用unit单位来做相关省略\r\n     */\r\n    simplify: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n     * @description 自定义单位，如[3, 'K+'], [6, 'M+']即大于3位数小于6位数的用k+来做省略\r\n     *              1000即显示为1K+\r\n     */\r\n    unit: {\r\n      type: Array,\r\n      default () {\r\n        return [[3, 'K+'], [6, 'M+'], [9, 'B+']]\r\n      }\r\n    },\r\n    countClass: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    unitClass: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      counter: null,\r\n      unitText: ''\r\n    }\r\n  },\r\n  computed: {\r\n    counterId () {\r\n      return `count_to_${this._uid}`\r\n    }\r\n  },\r\n  methods: {\r\n    getHandleVal (val, len) {\r\n      return {\r\n        endVal: parseInt(val / Math.pow(10, this.unit[len - 1][0])),\r\n        unitText: this.unit[len - 1][1]\r\n      }\r\n    },\r\n    transformValue (val) {\r\n      let len = this.unit.length\r\n      let res = {\r\n        endVal: 0,\r\n        unitText: ''\r\n      }\r\n      if (val < Math.pow(10, this.unit[0][0])) res.endVal = val\r\n      else {\r\n        for (let i = 1; i < len; i++) {\r\n          if (val >= Math.pow(10, this.unit[i - 1][0]) && val < Math.pow(10, this.unit[i][0])) res = this.getHandleVal(val, i)\r\n        }\r\n      }\r\n      if (val > Math.pow(10, this.unit[len - 1][0])) res = this.getHandleVal(val, len)\r\n      return res\r\n    },\r\n    getValue (val) {\r\n      let res = 0\r\n      if (this.simplify) {\r\n        let { endVal, unitText } = this.transformValue(val)\r\n        this.unitText = unitText\r\n        res = endVal\r\n      } else {\r\n        res = val\r\n      }\r\n      return res\r\n    }\r\n  },\r\n  mounted () {\r\n    this.$nextTick(() => {\r\n      let endVal = this.getValue(this.end)\r\n      this.counter = new CountUp(this.counterId, this.startVal, endVal, this.decimals, this.duration, {\r\n        useEasing: !this.uneasing,\r\n        useGrouping: this.useGroup,\r\n        separator: this.separator,\r\n        decimal: this.decimal\r\n      })\r\n      setTimeout(() => {\r\n        if (!this.counter.error) this.counter.start()\r\n      }, this.delay)\r\n    })\r\n  },\r\n  watch: {\r\n    end (newVal) {\r\n      let endVal = this.getValue(newVal)\r\n      this.counter.update(endVal)\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":"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"}]}