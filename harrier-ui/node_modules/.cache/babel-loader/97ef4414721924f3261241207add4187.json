{"remainingRequest":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\iview\\src\\components\\checkbox\\checkbox.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\iview\\src\\components\\checkbox\\checkbox.vue","mtime":1566806371000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { findComponentUpward, oneOf } from '../../utils/assist';\nimport Emitter from '../../mixins/emitter';\nconst prefixCls = 'ivu-checkbox';\nexport default {\n  name: 'Checkbox',\n  mixins: [Emitter],\n  props: {\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    value: {\n      type: [String, Number, Boolean],\n      default: false\n    },\n    trueValue: {\n      type: [String, Number, Boolean],\n      default: true\n    },\n    falseValue: {\n      type: [String, Number, Boolean],\n      default: false\n    },\n    label: {\n      type: [String, Number, Boolean]\n    },\n    indeterminate: {\n      type: Boolean,\n      default: false\n    },\n    size: {\n      validator(value) {\n        return oneOf(value, ['small', 'large', 'default']);\n      },\n      default() {\n        return !this.$IVIEW || this.$IVIEW.size === '' ? 'default' : this.$IVIEW.size;\n      }\n    },\n    name: {\n      type: String\n    }\n  },\n  data() {\n    return {\n      model: [],\n      currentValue: this.value,\n      group: false,\n      showSlot: true,\n      parent: findComponentUpward(this, 'CheckboxGroup'),\n      focusInner: false\n    };\n  },\n  computed: {\n    wrapClasses() {\n      return [`${prefixCls}-wrapper`, {\n        [`${prefixCls}-group-item`]: this.group,\n        [`${prefixCls}-wrapper-checked`]: this.currentValue,\n        [`${prefixCls}-wrapper-disabled`]: this.disabled,\n        [`${prefixCls}-${this.size}`]: !!this.size\n      }];\n    },\n    checkboxClasses() {\n      return [`${prefixCls}`, {\n        [`${prefixCls}-checked`]: this.currentValue,\n        [`${prefixCls}-disabled`]: this.disabled,\n        [`${prefixCls}-indeterminate`]: this.indeterminate\n      }];\n    },\n    innerClasses() {\n      return [`${prefixCls}-inner`, {\n        [`${prefixCls}-focus`]: this.focusInner\n      }];\n    },\n    inputClasses() {\n      return `${prefixCls}-input`;\n    }\n  },\n  mounted() {\n    this.parent = findComponentUpward(this, 'CheckboxGroup');\n    if (this.parent) {\n      this.group = true;\n    }\n    if (this.group) {\n      this.parent.updateModel(true);\n    } else {\n      this.updateModel();\n      this.showSlot = this.$slots.default !== undefined;\n    }\n  },\n  methods: {\n    change(event) {\n      if (this.disabled) {\n        return false;\n      }\n      const checked = event.target.checked;\n      this.currentValue = checked;\n      const value = checked ? this.trueValue : this.falseValue;\n      this.$emit('input', value);\n      if (this.group) {\n        this.parent.change(this.model);\n      } else {\n        this.$emit('on-change', value);\n        this.dispatch('FormItem', 'on-form-change', value);\n      }\n    },\n    updateModel() {\n      this.currentValue = this.value === this.trueValue;\n    },\n    onBlur() {\n      this.focusInner = false;\n    },\n    onFocus() {\n      this.focusInner = true;\n    }\n  },\n  watch: {\n    value(val) {\n      if (val === this.trueValue || val === this.falseValue) {\n        this.updateModel();\n      } else {\n        throw 'Value should be trueValue or falseValue.';\n      }\n    }\n  }\n};",{"version":3,"names":["findComponentUpward","oneOf","Emitter","prefixCls","name","mixins","props","disabled","type","Boolean","default","value","String","Number","trueValue","falseValue","label","indeterminate","size","validator","$IVIEW","data","model","currentValue","group","showSlot","parent","focusInner","computed","wrapClasses","checkboxClasses","innerClasses","inputClasses","mounted","updateModel","$slots","undefined","methods","change","event","checked","target","$emit","dispatch","onBlur","onFocus","watch","val"],"sources":["node_modules/iview/src/components/checkbox/checkbox.vue"],"sourcesContent":["<template>\n    <label :class=\"wrapClasses\">\n        <span :class=\"checkboxClasses\">\n            <span :class=\"innerClasses\"></span>\n            <input\n                v-if=\"group\"\n                type=\"checkbox\"\n                :class=\"inputClasses\"\n                :disabled=\"disabled\"\n                :value=\"label\"\n                v-model=\"model\"\n                :name=\"name\"\n                @change=\"change\"\n                @focus=\"onFocus\"\n                @blur=\"onBlur\">\n            <input\n                v-else\n                type=\"checkbox\"\n                :class=\"inputClasses\"\n                :disabled=\"disabled\"\n                :checked=\"currentValue\"\n                :name=\"name\"\n                @change=\"change\"\n                @focus=\"onFocus\"\n                @blur=\"onBlur\">\n        </span>\n        <slot><span v-if=\"showSlot\">{{ label }}</span></slot>\n    </label>\n</template>\n<script>\n    import { findComponentUpward, oneOf } from '../../utils/assist';\n    import Emitter from '../../mixins/emitter';\n\n    const prefixCls = 'ivu-checkbox';\n\n    export default {\n        name: 'Checkbox',\n        mixins: [ Emitter ],\n        props: {\n            disabled: {\n                type: Boolean,\n                default: false\n            },\n            value: {\n                type: [String, Number, Boolean],\n                default: false\n            },\n            trueValue: {\n                type: [String, Number, Boolean],\n                default: true\n            },\n            falseValue: {\n                type: [String, Number, Boolean],\n                default: false\n            },\n            label: {\n                type: [String, Number, Boolean]\n            },\n            indeterminate: {\n                type: Boolean,\n                default: false\n            },\n            size: {\n                validator (value) {\n                    return oneOf(value, ['small', 'large', 'default']);\n                },\n                default () {\n                    return !this.$IVIEW || this.$IVIEW.size === '' ? 'default' : this.$IVIEW.size;\n                }\n            },\n            name: {\n                type: String\n            }\n        },\n        data () {\n            return {\n                model: [],\n                currentValue: this.value,\n                group: false,\n                showSlot: true,\n                parent: findComponentUpward(this, 'CheckboxGroup'),\n                focusInner: false\n            };\n        },\n        computed: {\n            wrapClasses () {\n                return [\n                    `${prefixCls}-wrapper`,\n                    {\n                        [`${prefixCls}-group-item`]: this.group,\n                        [`${prefixCls}-wrapper-checked`]: this.currentValue,\n                        [`${prefixCls}-wrapper-disabled`]: this.disabled,\n                        [`${prefixCls}-${this.size}`]: !!this.size\n                    }\n                ];\n            },\n            checkboxClasses () {\n                return [\n                    `${prefixCls}`,\n                    {\n                        [`${prefixCls}-checked`]: this.currentValue,\n                        [`${prefixCls}-disabled`]: this.disabled,\n                        [`${prefixCls}-indeterminate`]: this.indeterminate\n                    }\n                ];\n            },\n            innerClasses () {\n                return [\n                    `${prefixCls}-inner`,\n                    {\n                        [`${prefixCls}-focus`]: this.focusInner\n                    }\n                ];\n            },\n            inputClasses () {\n                return `${prefixCls}-input`;\n            }\n        },\n        mounted () {\n            this.parent = findComponentUpward(this, 'CheckboxGroup');\n            if (this.parent) {\n                this.group = true;\n            }\n\n            if (this.group) {\n                this.parent.updateModel(true);\n            } else {\n                this.updateModel();\n                this.showSlot = this.$slots.default !== undefined;\n            }\n        },\n        methods: {\n            change (event) {\n                if (this.disabled) {\n                    return false;\n                }\n\n                const checked = event.target.checked;\n                this.currentValue = checked;\n\n                const value = checked ? this.trueValue : this.falseValue;\n                this.$emit('input', value);\n\n                if (this.group) {\n                    this.parent.change(this.model);\n                } else {\n                    this.$emit('on-change', value);\n                    this.dispatch('FormItem', 'on-form-change', value);\n                }\n            },\n            updateModel () {\n                this.currentValue = this.value === this.trueValue;\n            },\n            onBlur () {\n                this.focusInner = false;\n            },\n            onFocus () {\n                this.focusInner = true;\n            }\n        },\n        watch: {\n            value (val) {\n                if (val === this.trueValue || val === this.falseValue) {\n                    this.updateModel();\n                } else {\n                    throw 'Value should be trueValue or falseValue.';\n                }\n            }\n        }\n    };\n</script>\n"],"mappings":"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"}]}