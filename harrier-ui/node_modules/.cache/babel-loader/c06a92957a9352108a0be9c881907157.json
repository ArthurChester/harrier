{"remainingRequest":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\view\\single-page\\message\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\view\\single-page\\message\\index.vue","mtime":1681468306528},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\.babelrc","mtime":1681468306354},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.find\";\nimport _defineProperty from \"D:/WorkSpace/IdeaProjects/harrier/harrier-ui/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { mapState, mapGetters, mapMutations, mapActions } from 'vuex';\nvar listDic = {\n  unread: 'messageUnreadList',\n  readed: 'messageReadedList',\n  trash: 'messageTrashList'\n};\nexport default {\n  name: 'message_page',\n  data: function data() {\n    return {\n      listLoading: true,\n      contentLoading: false,\n      currentMessageType: 'unread',\n      messageContent: '',\n      showingMsgItem: {}\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapState({\n    messageUnreadList: function messageUnreadList(state) {\n      return state.user.messageUnreadList;\n    },\n    messageReadedList: function messageReadedList(state) {\n      return state.user.messageReadedList;\n    },\n    messageTrashList: function messageTrashList(state) {\n      return state.user.messageTrashList;\n    },\n    messageList: function messageList() {\n      return this[listDic[this.currentMessageType]];\n    },\n    titleClass: function titleClass() {\n      return {\n        'not-unread-list': this.currentMessageType !== 'unread'\n      };\n    }\n  })), mapGetters(['messageUnreadCount', 'messageReadedCount', 'messageTrashCount'])),\n  methods: _objectSpread(_objectSpread(_objectSpread({}, mapMutations([\n    //\n  ])), mapActions(['getContentByMsgId', 'getMessageList', 'hasRead', 'removeReaded', 'restoreTrash'])), {}, {\n    stopLoading: function stopLoading(name) {\n      this[name] = false;\n    },\n    handleSelect: function handleSelect(name) {\n      this.currentMessageType = name;\n    },\n    handleView: function handleView(msg_id) {\n      var _this = this;\n      this.contentLoading = true;\n      this.getContentByMsgId({\n        msg_id: msg_id\n      }).then(function (content) {\n        _this.messageContent = content;\n        var item = _this.messageList.find(function (item) {\n          return item.msg_id === msg_id;\n        });\n        if (item) _this.showingMsgItem = item;\n        if (_this.currentMessageType === 'unread') _this.hasRead({\n          msg_id: msg_id\n        });\n        _this.stopLoading('contentLoading');\n      }).catch(function () {\n        _this.stopLoading('contentLoading');\n      });\n    },\n    removeMsg: function removeMsg(item) {\n      item.loading = true;\n      var msg_id = item.msg_id;\n      if (this.currentMessageType === 'readed') this.removeReaded({\n        msg_id: msg_id\n      });else this.restoreTrash({\n        msg_id: msg_id\n      });\n    }\n  }),\n  mounted: function mounted() {\n    var _this2 = this;\n    this.listLoading = true;\n    // 请求获取消息列表\n    this.getMessageList().then(function () {\n      return _this2.stopLoading('listLoading');\n    }).catch(function () {\n      return _this2.stopLoading('listLoading');\n    });\n  }\n};",{"version":3,"names":["mapState","mapGetters","mapMutations","mapActions","listDic","unread","readed","trash","name","data","listLoading","contentLoading","currentMessageType","messageContent","showingMsgItem","computed","_objectSpread","messageUnreadList","state","user","messageReadedList","messageTrashList","messageList","titleClass","methods","stopLoading","handleSelect","handleView","msg_id","_this","getContentByMsgId","then","content","item","find","hasRead","catch","removeMsg","loading","removeReaded","restoreTrash","mounted","_this2","getMessageList"],"sources":["src/view/single-page/message/index.vue"],"sourcesContent":["<template>\r\n  <Card shadow>\r\n    <div>\r\n      <div class=\"message-page-con message-category-con\">\r\n        <Menu width=\"auto\" active-name=\"unread\" @on-select=\"handleSelect\">\r\n          <MenuItem name=\"unread\">\r\n            <span class=\"category-title\">未读消息</span><Badge style=\"margin-left: 10px\" :count=\"messageUnreadCount\"></Badge>\r\n          </MenuItem>\r\n          <MenuItem name=\"readed\">\r\n            <span class=\"category-title\">已读消息</span><Badge style=\"margin-left: 10px\" class-name=\"gray-dadge\" :count=\"messageReadedCount\"></Badge>\r\n          </MenuItem>\r\n          <MenuItem name=\"trash\">\r\n            <span class=\"category-title\">回收站</span><Badge style=\"margin-left: 10px\" class-name=\"gray-dadge\" :count=\"messageTrashCount\"></Badge>\r\n          </MenuItem>\r\n        </Menu>\r\n      </div>\r\n      <div class=\"message-page-con message-list-con\">\r\n        <Spin fix v-if=\"listLoading\" size=\"large\"></Spin>\r\n        <Menu\r\n          width=\"auto\"\r\n          active-name=\"\"\r\n          :class=\"titleClass\"\r\n          @on-select=\"handleView\"\r\n        >\r\n          <MenuItem v-for=\"item in messageList\" :name=\"item.msg_id\" :key=\"`msg_${item.msg_id}`\">\r\n            <div>\r\n              <p class=\"msg-title\">{{ item.title }}</p>\r\n              <Badge status=\"default\" :text=\"item.create_time\" />\r\n              <Button\r\n                style=\"float: right;margin-right: 20px;\"\r\n                :style=\"{ display: item.loading ? 'inline-block !important' : '' }\"\r\n                :loading=\"item.loading\"\r\n                size=\"small\"\r\n                :icon=\"currentMessageType === 'readed' ? 'md-trash' : 'md-redo'\"\r\n                :title=\"currentMessageType === 'readed' ? '删除' : '还原'\"\r\n                type=\"text\"\r\n                v-show=\"currentMessageType !== 'unread'\"\r\n                @click.native.stop=\"removeMsg(item)\"></Button>\r\n            </div>\r\n          </MenuItem>\r\n        </Menu>\r\n      </div>\r\n      <div class=\"message-page-con message-view-con\">\r\n        <Spin fix v-if=\"contentLoading\" size=\"large\"></Spin>\r\n        <div class=\"message-view-header\">\r\n          <h2 class=\"message-view-title\">{{ showingMsgItem.title }}</h2>\r\n          <time class=\"message-view-time\">{{ showingMsgItem.create_time }}</time>\r\n        </div>\r\n        <div v-html=\"messageContent\"></div>\r\n      </div>\r\n    </div>\r\n  </Card>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapGetters, mapMutations, mapActions } from 'vuex'\r\nconst listDic = {\r\n  unread: 'messageUnreadList',\r\n  readed: 'messageReadedList',\r\n  trash: 'messageTrashList'\r\n}\r\nexport default {\r\n  name: 'message_page',\r\n  data () {\r\n    return {\r\n      listLoading: true,\r\n      contentLoading: false,\r\n      currentMessageType: 'unread',\r\n      messageContent: '',\r\n      showingMsgItem: {}\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      messageUnreadList: state => state.user.messageUnreadList,\r\n      messageReadedList: state => state.user.messageReadedList,\r\n      messageTrashList: state => state.user.messageTrashList,\r\n      messageList () {\r\n        return this[listDic[this.currentMessageType]]\r\n      },\r\n      titleClass () {\r\n        return {\r\n          'not-unread-list': this.currentMessageType !== 'unread'\r\n        }\r\n      }\r\n    }),\r\n    ...mapGetters([\r\n      'messageUnreadCount',\r\n      'messageReadedCount',\r\n      'messageTrashCount'\r\n    ])\r\n  },\r\n  methods: {\r\n    ...mapMutations([\r\n      //\r\n    ]),\r\n    ...mapActions([\r\n      'getContentByMsgId',\r\n      'getMessageList',\r\n      'hasRead',\r\n      'removeReaded',\r\n      'restoreTrash'\r\n    ]),\r\n    stopLoading (name) {\r\n      this[name] = false\r\n    },\r\n    handleSelect (name) {\r\n      this.currentMessageType = name\r\n    },\r\n    handleView (msg_id) {\r\n      this.contentLoading = true\r\n      this.getContentByMsgId({ msg_id }).then(content => {\r\n        this.messageContent = content\r\n        const item = this.messageList.find(item => item.msg_id === msg_id)\r\n        if (item) this.showingMsgItem = item\r\n        if (this.currentMessageType === 'unread') this.hasRead({ msg_id })\r\n        this.stopLoading('contentLoading')\r\n      }).catch(() => {\r\n        this.stopLoading('contentLoading')\r\n      })\r\n    },\r\n    removeMsg (item) {\r\n      item.loading = true\r\n      const msg_id = item.msg_id\r\n      if (this.currentMessageType === 'readed') this.removeReaded({ msg_id })\r\n      else this.restoreTrash({ msg_id })\r\n    }\r\n  },\r\n  mounted () {\r\n    this.listLoading = true\r\n    // 请求获取消息列表\r\n    this.getMessageList().then(() => this.stopLoading('listLoading')).catch(() => this.stopLoading('listLoading'))\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n.message-page{\r\n  &-con{\r\n    height: ~\"calc(100vh - 176px)\";\r\n    display: inline-block;\r\n    vertical-align: top;\r\n    position: relative;\r\n    &.message-category-con{\r\n      border-right: 1px solid #e6e6e6;\r\n      width: 200px;\r\n    }\r\n    &.message-list-con{\r\n      border-right: 1px solid #e6e6e6;\r\n      width: 230px;\r\n    }\r\n    &.message-view-con{\r\n      position: absolute;\r\n      left: 446px;\r\n      top: 16px;\r\n      right: 16px;\r\n      bottom: 16px;\r\n      overflow: auto;\r\n      padding: 12px 20px 0;\r\n      .message-view-header{\r\n        margin-bottom: 20px;\r\n        .message-view-title{\r\n          display: inline-block;\r\n        }\r\n        .message-view-time{\r\n          margin-left: 20px;\r\n        }\r\n      }\r\n    }\r\n    .category-title{\r\n      display: inline-block;\r\n      width: 65px;\r\n    }\r\n    .gray-dadge{\r\n      background: gainsboro;\r\n    }\r\n    .not-unread-list{\r\n      .msg-title{\r\n        color: rgb(170, 169, 169);\r\n      }\r\n      .ivu-menu-item{\r\n        .ivu-btn.ivu-btn-text.ivu-btn-small.ivu-btn-icon-only{\r\n          display: none;\r\n        }\r\n        &:hover{\r\n          .ivu-btn.ivu-btn-text.ivu-btn-small.ivu-btn-icon-only{\r\n            display: inline-block;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";;;;;;;AAuDA,SAAAA,QAAA,EAAAC,UAAA,EAAAC,YAAA,EAAAC,UAAA;AACA,IAAAC,OAAA;EACAC,MAAA;EACAC,MAAA;EACAC,KAAA;AACA;AACA;EACAC,IAAA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAC,WAAA;MACAC,cAAA;MACAC,kBAAA;MACAC,cAAA;MACAC,cAAA;IACA;EACA;EACAC,QAAA,EAAAC,aAAA,CAAAA,aAAA,KACAhB,QAAA;IACAiB,iBAAA,WAAAA,kBAAAC,KAAA;MAAA,OAAAA,KAAA,CAAAC,IAAA,CAAAF,iBAAA;IAAA;IACAG,iBAAA,WAAAA,kBAAAF,KAAA;MAAA,OAAAA,KAAA,CAAAC,IAAA,CAAAC,iBAAA;IAAA;IACAC,gBAAA,WAAAA,iBAAAH,KAAA;MAAA,OAAAA,KAAA,CAAAC,IAAA,CAAAE,gBAAA;IAAA;IACAC,WAAA,WAAAA,YAAA;MACA,YAAAlB,OAAA,MAAAQ,kBAAA;IACA;IACAW,UAAA,WAAAA,WAAA;MACA;QACA,wBAAAX,kBAAA;MACA;IACA;EACA,KACAX,UAAA,EACA,sBACA,sBACA,oBACA,EACA;EACAuB,OAAA,EAAAR,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACAd,YAAA;IACA;EAAA,CACA,IACAC,UAAA,EACA,qBACA,kBACA,WACA,gBACA,eACA;IACAsB,WAAA,WAAAA,YAAAjB,IAAA;MACA,KAAAA,IAAA;IACA;IACAkB,YAAA,WAAAA,aAAAlB,IAAA;MACA,KAAAI,kBAAA,GAAAJ,IAAA;IACA;IACAmB,UAAA,WAAAA,WAAAC,MAAA;MAAA,IAAAC,KAAA;MACA,KAAAlB,cAAA;MACA,KAAAmB,iBAAA;QAAAF,MAAA,EAAAA;MAAA,GAAAG,IAAA,WAAAC,OAAA;QACAH,KAAA,CAAAhB,cAAA,GAAAmB,OAAA;QACA,IAAAC,IAAA,GAAAJ,KAAA,CAAAP,WAAA,CAAAY,IAAA,WAAAD,IAAA;UAAA,OAAAA,IAAA,CAAAL,MAAA,KAAAA,MAAA;QAAA;QACA,IAAAK,IAAA,EAAAJ,KAAA,CAAAf,cAAA,GAAAmB,IAAA;QACA,IAAAJ,KAAA,CAAAjB,kBAAA,eAAAiB,KAAA,CAAAM,OAAA;UAAAP,MAAA,EAAAA;QAAA;QACAC,KAAA,CAAAJ,WAAA;MACA,GAAAW,KAAA;QACAP,KAAA,CAAAJ,WAAA;MACA;IACA;IACAY,SAAA,WAAAA,UAAAJ,IAAA;MACAA,IAAA,CAAAK,OAAA;MACA,IAAAV,MAAA,GAAAK,IAAA,CAAAL,MAAA;MACA,SAAAhB,kBAAA,oBAAA2B,YAAA;QAAAX,MAAA,EAAAA;MAAA,QACA,KAAAY,YAAA;QAAAZ,MAAA,EAAAA;MAAA;IACA;EAAA,EACA;EACAa,OAAA,WAAAA,QAAA;IAAA,IAAAC,MAAA;IACA,KAAAhC,WAAA;IACA;IACA,KAAAiC,cAAA,GAAAZ,IAAA;MAAA,OAAAW,MAAA,CAAAjB,WAAA;IAAA,GAAAW,KAAA;MAAA,OAAAM,MAAA,CAAAjB,WAAA;IAAA;EACA;AACA"}]}