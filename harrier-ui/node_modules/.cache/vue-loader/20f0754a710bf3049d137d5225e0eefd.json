{"remainingRequest":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\view\\spdb\\authority\\user\\Table.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\view\\spdb\\authority\\user\\Table.vue","mtime":1681468306531},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport common from '@/mixins/common'\r\nimport store from '@/store/index'\r\nimport utils from '@/common/utils'\r\nconst enums = {\r\n  state: [\r\n    {\r\n      key: '1',\r\n      val: '启用'\r\n    },\r\n    {\r\n      key: '0',\r\n      val: '停用'\r\n    }\r\n  ]\r\n}\r\n\r\nexport default {\r\n  props: {\r\n    transData: {\r\n      type: Object,\r\n      default: function () {\r\n        return {}\r\n      }\r\n    }\r\n  },\r\n  mixins: [ common ],\r\n  data: function () {\r\n    return {\r\n      cUserData: {\r\n        platformData: [],\r\n        systemData: [],\r\n        roleData: {}\r\n      },\r\n      searchBean: {},\r\n      loadingdel: false,\r\n      loadingactive: false,\r\n      loadinginactive: false,\r\n      loadingreset: false,\r\n      platformDlg: {\r\n        show: false,\r\n        platformData: [],\r\n        targetData: []\r\n      },\r\n      systemDlg: {\r\n        show: false,\r\n        systemData: [],\r\n        targetData: []\r\n      },\r\n      gridTitles: [\r\n        /* {\r\n        type: 'index',\r\n        title: ' ',\r\n        width: 80,\r\n        align: 'center'\r\n        }, */\r\n        {\r\n          type: 'selection',\r\n          width: 60,\r\n          align: 'center'\r\n        },\r\n        {\r\n          title: '用户名',\r\n          key: 'userCode'\r\n        },\r\n        {\r\n          title: '中文名',\r\n          key: 'userName'\r\n        },\r\n        {\r\n          title: '工号',\r\n          key: 'empId'\r\n        },\r\n        {\r\n          title: '状态',\r\n          key: 'isEnable',\r\n          render: (h, params) => {\r\n            const status = { true: '启用', false: '停用' }\r\n            return h('span', {}, status[params.row.isEnable])\r\n          }\r\n        },\r\n        {\r\n          title: '操作',\r\n          width: 320,\r\n          render: (h, params) => {\r\n            return h('div', [\r\n              h('Button', {\r\n                props: {\r\n                  type: 'info',\r\n                  size: 'small'\r\n                },\r\n                style: {\r\n                  marginRight: '5px'\r\n                },\r\n                on: {\r\n                  click: () => {\r\n                    const userId = params.row.userId\r\n                    this.checkAuth('update', userId)\r\n                  }\r\n                }\r\n              }, '修改'),\r\n              h('Button', {\r\n                props: {\r\n                  type: 'info',\r\n                  size: 'small'\r\n                },\r\n                style: {\r\n                  marginRight: '5px'\r\n                },\r\n                on: {\r\n                  click: () => {\r\n                    this.roleDlg.userId = params.row.userId\r\n                    this.roleDlg.userCode = params.row.userCode\r\n                    this.showRoleDlg()\r\n                  }\r\n                }\r\n              }, '分配角色'),\r\n              // h('Button', {\r\n              //   props: {\r\n              //     size: 'small',\r\n              //     type: 'info'\r\n              //   },\r\n              //   style: {\r\n              //     marginRight: '5px'\r\n              //   },\r\n              //   on: {\r\n              //     click: () => {\r\n              //       // this.currentSelect = {roleId: params.row.role_id, roleName: params.row.role_chname};\r\n              //       this.roleDlg.userId = params.row.userId\r\n              //       this.roleDlg.userCode = params.row.userCode\r\n              //       this.showPlatformDlg()\r\n              //     }\r\n              //   }\r\n              // }, '分配平台'),\r\n              h('Button', {\r\n                props: {\r\n                  size: 'small',\r\n                  type: 'info'\r\n                },\r\n                style: {\r\n                  marginRight: '5px'\r\n                },\r\n                on: {\r\n                  click: () => {\r\n                    // this.currentSelect = {roleId: params.row.role_id, roleName: params.row.role_chname};\r\n                    this.roleDlg.userId = params.row.userId\r\n                    this.roleDlg.userCode = params.row.userCode\r\n                    this.showSystemDlg()\r\n                  }\r\n                }\r\n              }, '分配平台')\r\n            ])\r\n          }\r\n        }\r\n      ],\r\n      gridData: [],\r\n      enums: enums,\r\n      roleDlg: {\r\n        show: false,\r\n        userId: '',\r\n        userCode: '',\r\n        roleData: [],\r\n        targetData: []\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    init: function () {\r\n      if (this.transData.currentPage) {\r\n        this.searchBean = this.transData.searchBean\r\n        this.page.current = this.transData.currentPage\r\n        this.page.size = this.transData.pageSize\r\n      }\r\n\r\n      this.search()\r\n    },\r\n    search: function () {\r\n      this.selection = []\r\n      let params = Object.assign({}, this.searchBean)\r\n      if (!params.userCode || params.userCode === '') {\r\n        delete params.userCode\r\n      }\r\n      params.current = this.page.current\r\n      params.size = this.page.size\r\n\r\n      let httpConfig = {\r\n        method: 'GET',\r\n        url: '/user',\r\n        params: params\r\n      }\r\n      this.$ajax(httpConfig)\r\n        .then(resp => {\r\n          this.gridData = resp.data.records\r\n          this.page.total = resp.data.total\r\n        })\r\n        .then(resp => {\r\n          this.loading = false\r\n        })\r\n        .catch(error => {\r\n          this.loading = false\r\n          console.log(error)\r\n        })\r\n    },\r\n    demand () {\r\n      this.page.current = 1\r\n      this.search()\r\n    },\r\n    clear: function () {\r\n      this.searchBean = {}\r\n      this.selection = []\r\n      this.page = {\r\n        current: 1,\r\n        size: 10\r\n      }\r\n    },\r\n    add: function () {\r\n      this.$emit('exit', null)\r\n    },\r\n    del: function () {\r\n      const userIds = Array.from(this.selection, e => e.userId)\r\n      let deleteConfig = {\r\n        method: 'DELETE',\r\n        url: `/user/${userIds}/delete`,\r\n        data: {}\r\n      }\r\n      let authSystems = 'ROLE_ADMIN' // store.getters.getSystems\r\n      if (authSystems.indexOf('ROLE_ADMIN') == -1) {\r\n        if (userIds.length > 1) {\r\n          this.$Message.warning('请选择单个用户，仅系统管理员支持批量操作')\r\n        } else {\r\n          const msconfig = {\r\n            url: 'resource/metasystem',\r\n            method: 'GET',\r\n            params: { userId: userIds[0] }\r\n          }\r\n          this.$ajax(msconfig)\r\n            .then(res => {\r\n              if (res.data) {\r\n                for (let i = 0; i < res.data.length; i++) {\r\n                  if (authSystems.indexOf(res.data[i]) == -1 && res.data[i] != 'nullnull') {\r\n                    this.$Message.warning('该用户具有其他平台应用的权限，仅系统管理员可以操作该用户')\r\n                    return\r\n                  }\r\n                }\r\n                let param = authSystems.find(item => { if (item.indexOf('*') > -1) { return item } })\r\n                deleteConfig.data.authps = param\r\n                this.loadingdel = true\r\n                this.$ajax(deleteConfig)\r\n                  .then(resp => {\r\n                    this.loadingdel = false\r\n                    this.search()\r\n                  })\r\n              }\r\n            })\r\n        }\r\n      } else {\r\n        this.loadingdel = true\r\n        this.$ajax(deleteConfig)\r\n          .then(resp => {\r\n            this.loadingdel = false\r\n            this.search()\r\n          })\r\n      }\r\n    },\r\n    active: function () {\r\n      const userIds = Array.from(this.selection, e => e.userId)\r\n      let params = { userIds: userIds.toString(), isEnable: true }\r\n      const activeConfig = {\r\n        method: 'POST',\r\n        url: `/user/${userIds}/updateEnable`,\r\n        data: params\r\n      }\r\n      this.loadingactive = true\r\n      this.$ajax(activeConfig)\r\n        .then(resp => {\r\n          this.loadingactive = false\r\n          this.search()\r\n        })\r\n    },\r\n    inactive: function () {\r\n      const userIds = Array.from(this.selection, e => e.userId)\r\n      let params = { userIds: userIds.toString(), isEnable: false }\r\n      const inactiveConfig = {\r\n        method: 'POST',\r\n        url: `/user/${userIds}/updateEnable`,\r\n        data: params\r\n      }\r\n      this.loadinginactive = true\r\n      this.$ajax(inactiveConfig)\r\n        .then(resp => {\r\n          this.loadinginactive = false\r\n          this.search()\r\n        })\r\n    },\r\n    reset: function () {\r\n      const userIds = Array.from(this.selection, e => e.userId)\r\n      let params = { userIds: userIds.toString() }\r\n      const resetConfig = {\r\n        method: 'POST',\r\n        url: `/user/resetPwd`,\r\n        data: params\r\n      }\r\n      this.loadingreset = true\r\n      this.$ajax(resetConfig)\r\n        .then(resp => {\r\n          this.loadingreset = false\r\n          this.search()\r\n        })\r\n    },\r\n    checkAuth (opName, userId) {\r\n      let authSystems = 'ROLE_ADMIN' // store.getters.getSystems\r\n      if (authSystems.indexOf('ROLE_ADMIN') == -1) {\r\n        const msconfig = {\r\n          url: 'resource/metasystem',\r\n          method: 'GET',\r\n          params: { userId: userId }\r\n        }\r\n        this.$ajax(msconfig)\r\n          .then(res => {\r\n            if (res.data) {\r\n              for (let i = 0; i < res.data.length; i++) {\r\n                if (authSystems.indexOf(res.data[i]) == -1 && res.data[i] != 'nullnull') {\r\n                  this.$Message.warning('该用户具有其他平台应用的权限，仅系统管理员可以操作该用户')\r\n                  return\r\n                }\r\n              }\r\n              if (opName == 'showRoleDlg') {\r\n                this.showRoleDlgReal()\r\n              } else if (opName == 'showPlatformDlg') {\r\n                this.showPlatformDlgReal()\r\n              } else if (opName == 'showSystemDlg') {\r\n                this.showSystemDlgReal()\r\n              } else if (opName == 'update') {\r\n                let queryCache = { searchBean: this.searchBean, currentPage: this.page.current, pageSize: this.page.size }\r\n                this.$emit('exit', Object.assign({ id: userId }, queryCache))\r\n              }\r\n            }\r\n          })\r\n      } else {\r\n        if (opName == 'showRoleDlg') {\r\n          this.showRoleDlgReal()\r\n        } else if (opName == 'showPlatformDlg') {\r\n          this.showPlatformDlgReal()\r\n        } else if (opName == 'showSystemDlg') {\r\n          this.showSystemDlgReal()\r\n        } else if (opName == 'update') {\r\n          let queryCache = { searchBean: this.searchBean, currentPage: this.page.current, pageSize: this.page.size }\r\n          this.$emit('exit', Object.assign({ id: userId }, queryCache))\r\n        }\r\n      }\r\n    },\r\n    showRoleDlg: function () {\r\n      this.checkAuth('showRoleDlg', this.roleDlg.userId)\r\n    },\r\n    showPlatformDlg: function () {\r\n      this.checkAuth('showPlatformDlg', this.roleDlg.userId)\r\n    },\r\n    showSystemDlg: function () {\r\n      this.checkAuth('showSystemDlg', this.roleDlg.userId)\r\n    },\r\n    showRoleDlgReal: function () {\r\n      this.roleDlg.show = true\r\n      this.roleDlg.roleData = []\r\n      this.roleDlg.targetData = []\r\n      // 初始化穿梭框\r\n      const allRoleConfig = {\r\n        method: 'GET',\r\n        url: '/role',\r\n        params: { currentPage: 1, pageSize: 999 }\r\n      }\r\n      this.$ajax(allRoleConfig)\r\n        .then(resp => {\r\n          // 获取该用户该有的角色\r\n          const rolesConfig = {\r\n            method: 'GET', url: `/role/${this.roleDlg.userCode}/list`\r\n          }\r\n          this.$ajax(rolesConfig)\r\n            .then(res => {\r\n              this.roleDlg.targetData = Array.from(res.data, e => e.roleId)\r\n\r\n              if (resp.data) {\r\n                resp.data.records.forEach(role => {\r\n                  let temp = {}\r\n                  temp.key = role.roleId\r\n                  temp.label = role.roleName\r\n                  temp.description = role.roleName\r\n                  this.roleDlg.roleData.push(temp)\r\n                })\r\n              }\r\n            })\r\n        })\r\n    },\r\n    showPlatformDlgReal: function () {\r\n      this.platformDlg = {\r\n        show: true,\r\n        platformData: [],\r\n        targetData: []\r\n      }\r\n      // 初始化穿梭框\r\n      const allResConfig = {\r\n        method: 'GET',\r\n        url: '/udsSystem/listQuery'\r\n        // params: { currentPage: 1, pageSize: 999 }\r\n      }\r\n      this.$ajax(allResConfig)\r\n        .then(resp => {\r\n          let curdata = []\r\n          let uobj = {}\r\n          if (resp.data) {\r\n            let sdata = resp.data\r\n            for (let i = 0; i < sdata.length; i++) {\r\n              if (uobj.hasOwnProperty(sdata[i].platform)) {\r\n              } else {\r\n                uobj[sdata[i].platform] = '1'\r\n                curdata.push(sdata[i])\r\n              }\r\n            }\r\n          }\r\n          // 获取该角色该有的资源\r\n          const roleResConfig = {\r\n            method: 'GET',\r\n            url: `/user/${this.roleDlg.userId}/platform/permiss`\r\n          }\r\n          this.$ajax(roleResConfig)\r\n            .then(res => {\r\n              this.platformDlg.targetData = Array.from(res.data, e => e.id)\r\n              let authSystems = 'ROLE_ADMIN' // store.getters.getSystems\r\n              if (authSystems.indexOf('ROLE_ADMIN') == -1) {\r\n                this.platformDlg.platformData = this.cUserData.platformData\r\n              } else {\r\n                if (resp.data) {\r\n                  curdata.forEach(platform => {\r\n                    let temp = {}\r\n                    temp.key = platform.id\r\n                    temp.method = ''\r\n                    temp.label = platform.etlPlatform\r\n                    // temp.description = resource.remark;\r\n\r\n                    this.platformDlg.platformData.push(temp)\r\n                  })\r\n                }\r\n              }\r\n            })\r\n        })\r\n    },\r\n    showSystemDlgReal: function () {\r\n      this.systemDlg = {\r\n        show: true,\r\n        systemTreeData: []\r\n      }\r\n      // 初始化应用\r\n      const systemConfig = { method: 'GET', url: '/udsSystem/listQuery' }\r\n      this.$ajax(systemConfig)\r\n        .then(resp => {\r\n          const userBySystemConfig = { method: 'GET', url: `/user/${this.roleDlg.userId}/platform/permiss` }\r\n          this.$ajax(userBySystemConfig)\r\n            .then(res => {\r\n              let tree = getSystemTree(resp.data, res.data)\r\n              this.systemDlg.systemTreeData = tree.systems // 把处理好的数据赋值给组件\r\n            })\r\n        })\r\n      // 转换树形结构\r\n      function getSystemTree (udsSystems, checkedSystems) {\r\n        const systemMsgs = Array.from(checkedSystems, e => e.systems === '*' ? e.platform : e.platform + '-' + e.systems)\r\n        let result = { systems: [], checked: true }\r\n        udsSystems.forEach(udsSystem => {\r\n          if (udsSystem.systems === '*') {\r\n            let temp = {}\r\n            temp.Key = udsSystem.id\r\n            temp.title = udsSystem.platform\r\n            temp.expand = true\r\n            // const t = getSystemTree(menu.children, checkedMenus)\r\n            // temp.children = t.menus\r\n            // temp.checked = (checkedSystems.includes(temp.title) && temp.children.every(e => e.checked))\r\n            temp.checked = systemMsgs.includes(temp.title)\r\n            temp.children = []\r\n            // 权限\r\n            temp.permissions = ''\r\n            let sysPermissions = checkedSystems.find(item => item.platform === udsSystem.platform && item.systems === udsSystem.systems)\r\n            if (sysPermissions && sysPermissions.permissions) {\r\n              temp.permissions = sysPermissions.permissions\r\n            }\r\n            result.systems.push(temp)\r\n          }\r\n        })\r\n        udsSystems.forEach(udsSystem => {\r\n          if (udsSystem.systems !== '*') {\r\n            let temp = {}\r\n            temp.Key = udsSystem.id\r\n            temp.title = udsSystem.platform + '-' + udsSystem.systems\r\n            temp.expand = true\r\n            temp.checked = systemMsgs.includes(temp.title)\r\n            // 权限\r\n            temp.permissions = ''\r\n            let sysPermissions = checkedSystems.find(item => item.platform === udsSystem.platform && item.systems === udsSystem.systems)\r\n            if (sysPermissions && sysPermissions.permissions) {\r\n              temp.permissions = sysPermissions.permissions\r\n            }\r\n            let platform = result.systems.find(item => item.title === udsSystem.platform)\r\n            if (platform.permissions && (platform.permissions === 'W' || temp.permissions === '')) {\r\n              temp.permissions = platform.permissions\r\n            }\r\n            platform.children.push(temp)\r\n          }\r\n        })\r\n        return result\r\n      }\r\n    },\r\n    renderContent (h, { root, node, data }) {\r\n      return h('span', {\r\n        style: {\r\n          display: 'inline-block',\r\n          width: '100%'\r\n        }\r\n      }, [\r\n        h('span', [\r\n          h('span', data.title)\r\n        ]),\r\n        h('span', {\r\n          style: {\r\n            display: 'inline-block',\r\n            float: 'right',\r\n            marginRight: '32px'\r\n          }\r\n        }, [\r\n          h('RadioGroup', {\r\n            props: {\r\n              value: data.permissions,\r\n              label: '读/写'\r\n            },\r\n            style: {\r\n              width: '100px'\r\n            },\r\n            on: {\r\n              'on-change': (val) => {\r\n                data.permissions = val\r\n              }\r\n            }\r\n          },\r\n          [\r\n            h('Radio', {\r\n              props: {\r\n                // value: 'R',\r\n                // label: '读'\r\n                label: 'R'\r\n              },\r\n              style: {\r\n                width: '34px'\r\n              }\r\n            }, '读'),\r\n            h('Radio', {\r\n              props: {\r\n                // value: 'W',\r\n                // label: '写'\r\n                label: 'W'\r\n              },\r\n              style: {\r\n                width: '14px'\r\n              }\r\n            }, '写')\r\n          ])\r\n        ])\r\n      ])\r\n    },\r\n    checkChange: function (data, checkData) {\r\n      if (checkData.checked) {\r\n        if (checkData.permissions && checkData.permissions !== '') {\r\n          if (checkData.children) {\r\n            checkData.children.forEach(children => {\r\n              children.permissions = checkData.permissions\r\n            })\r\n          }\r\n        } else {\r\n          checkData.permissions = 'R'\r\n          if (checkData.children) {\r\n            checkData.children.forEach(children => {\r\n              children.permissions = 'R'\r\n            })\r\n          }\r\n        }\r\n      } else {\r\n        checkData.permissions = ''\r\n        if (checkData.children) {\r\n          checkData.children.forEach(children => {\r\n            children.permissions = ''\r\n          })\r\n        }\r\n      }\r\n    },\r\n    recusiveNode: function (needAdd, node, flatState) {\r\n      if (typeof node.parent === 'undefined') {\r\n\r\n      } else {\r\n        for (const t of needAdd) {\r\n          if (t.nodeKey === node.parent) {\r\n            return\r\n          }\r\n        }\r\n        needAdd.push(flatState[node.parent].node)\r\n        this.recusiveNode(needAdd, flatState[node.parent], flatState)\r\n      }\r\n    },\r\n    roleOk: function () {\r\n      const roleIds = this.roleDlg.targetData\r\n      const addRoles = {\r\n        method: 'POST',\r\n        url: `/user/${this.roleDlg.userId}/role`,\r\n        data: { 'userId': this.roleDlg.userId, 'roleIds': roleIds.toString() }\r\n      }\r\n      this.$ajax(addRoles)\r\n    },\r\n    platformOk: function () {\r\n      const platformIds = this.platformDlg.targetData\r\n      let authSystems = 'ROLE_ADMIN' // store.getters.getSystems\r\n      let param = authSystems.find(item => { if (item.indexOf('*') > -1) { return item } })\r\n      const addResources = {\r\n        method: 'POST',\r\n        url: `/user/${this.roleDlg.userId}/platform`,\r\n        data: { 'platformIds': platformIds.toString(), 'authps': param }\r\n      }\r\n      this.$ajax(addResources)\r\n    },\r\n    systemOk: function () {\r\n      let checkeds = this.$refs['systemTree'].getCheckedNodes()\r\n      if (!checkeds || checkeds.length === 0) {\r\n        this.$Modal.error({\r\n          title: '提示',\r\n          content: '未选择平台！！'\r\n        })\r\n        return\r\n      }\r\n      // let flatState = this.$refs['systemTree'].flatState\r\n      // for (const t of checkeds) {\r\n      //   this.recusiveNode(checkeds, flatState[t.nodeKey], flatState)\r\n      // }\r\n      // const systemIds = Array.from(checkeds, e => e.Key)\r\n      let permissList = []\r\n      for (const t of checkeds) {\r\n        let userSystems = {}\r\n        userSystems.userId = this.roleDlg.userId\r\n        userSystems.systemsId = t.Key\r\n        if (t.permissions === undefined || t.permissions === '') {\r\n          t.permissions = 'R'\r\n        }\r\n        userSystems.permissions = t.permissions\r\n        permissList.push(userSystems)\r\n      }\r\n      const addPermiss = {\r\n        method: 'POST',\r\n        url: `/user/${this.roleDlg.userId}/allot/permiss`,\r\n        data: permissList,\r\n        contentType: 'json'\r\n      }\r\n      this.$ajax(addPermiss)\r\n        .then(resp => {\r\n          if (resp.status && resp.status === 200) {\r\n            if (this.roleDlg.userId === this.$store.getters.getUserId) {\r\n              utils.getUserPlatform(this.$store.getters.getUserId)\r\n            }\r\n          }\r\n        })\r\n    },\r\n    filterRole: function (data, query) {\r\n      return data.label.indexOf(query) > -1\r\n    },\r\n    handleChange: function (newTarget) {\r\n      this.roleDlg.targetData = newTarget\r\n    },\r\n    filterResource: function (data, query) {\r\n      return data.label.indexOf(query) > -1\r\n    },\r\n    renderResource: function (item) {\r\n      return `<span class=\"resource-label\">${item.label}</span>\r\n\t\t\t\t\t<span class=\"resource-method\">${item.method}</span>`\r\n    },\r\n    platformHandleChange: function (newTarget) {\r\n      this.platformDlg.targetData = newTarget\r\n    },\r\n    systemHandleChange: function (newTarget) {\r\n      this.systemDlg.targetData = newTarget\r\n    }\r\n  },\r\n  mounted () {\r\n    //\r\n  },\r\n  computed: {\r\n    resourceStyle () {\r\n      return {\r\n        width: '250px',\r\n        height: '300px'\r\n      }\r\n    },\r\n    systemDlgNew () {\r\n      if (this.systemDlg.systemTreeData) {\r\n        return JSON.parse(JSON.stringify(this.systemDlg.systemTreeData))\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    systemDlgNew: {\r\n      handler (newVal, oldVal) {\r\n        for (let i = 0; i < newVal.length; i++) {\r\n          if (oldVal[i] && newVal[i].permissions && oldVal[i].permissions && newVal[i].permissions !== oldVal[i].permissions) {\r\n            this.systemDlg.systemTreeData[i].children.forEach(children => {\r\n              if (children.checked) {\r\n                children.permissions = newVal[i].permissions\r\n              }\r\n            })\r\n          }\r\n        }\r\n      },\r\n      deep: true\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["Table.vue"],"names":[],"mappings":";AA6GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Table.vue","sourceRoot":"src/view/spdb/authority/user","sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"spdb-form\">\r\n      <Form :label-width=\"80\">\r\n        <Row>\r\n          <Col span=\"6\">\r\n            <FormItem label=\"用户名\">\r\n              <Input v-model=\"searchBean.userCode\"/>\r\n            </FormItem>\r\n          </Col>\r\n          <Col span=\"6\">\r\n            <FormItem label=\"用户状态\">\r\n              <Select filterable v-model=\"searchBean.isEnable\">\r\n                <Option v-for=\"item in enums.state\" :key=\"item.key\" :value=\"item.key\">{{item.val}}</Option>\r\n              </Select>\r\n            </FormItem>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </div>\r\n\r\n    <div class=\"spdb-toolbar\">\r\n      <Button type=\"primary\" icon=\"ios-search\" @click=\"demand()\">搜索</Button>\r\n      <Button type=\"primary\" icon=\"md-close\" @click=\"clear()\">清空查询</Button>\r\n      <Button type=\"primary\" icon=\"md-add\" @click=\"add()\">新增</Button>\r\n      <Button type=\"primary\" :loading=\"loadingdel\" :disabled=\"ctrlDisable\" icon=\"ios-trash-outline\" @click=\"del()\">删除</Button>\r\n      <Button type=\"primary\" :loading=\"loadingactive\" :disabled=\"ctrlDisable\" icon=\"ios-play\" @click=\"active()\">启用</Button>\r\n      <Button type=\"primary\" :loading=\"loadinginactive\" :disabled=\"ctrlDisable\" icon=\"ios-pause\" @click=\"inactive()\">停用</Button>\r\n      <Button type=\"primary\" :loading=\"loadingreset\" :disabled=\"ctrlDisable\" icon=\"md-refresh\" @click=\"reset()\">重置密码</Button>\r\n    </div>\r\n\r\n    <div class=\"spdb-table\">\r\n      <Table :loading=\"loading\" :columns=\"gridTitles\" :data=\"gridData\" @on-selection-change=\"select\"></Table>\r\n    </div>\r\n\r\n    <div class=\"spdb-page\">\r\n      <Page placement=\"top\" :total=\"page.total\" :current=\"page.current\" :page-size=\"page.size\" :page-size-opts=\"page.opt\" show-total show-sizer show-elevat @on-change=\"changePage\" @on-page-size-change=\"changePageSize\"></Page>\r\n    </div>\r\n    <Modal\r\n    v-model=\"roleDlg.show\"\r\n    title=\"分配角色\"\r\n    @on-ok=\"roleOk\">\r\n      <div>\r\n        <div>\r\n          <Form :label-width=\"80\" inline>\r\n            <FormItem label=\"用户名称\">\r\n              <Input readonly v-model=\"roleDlg.userCode\"/>\r\n            </FormItem>\r\n          </Form>\r\n        </div>\r\n        <div>\r\n          <Transfer\r\n          :data=\"roleDlg.roleData\"\r\n          :target-keys=\"roleDlg.targetData\"\r\n          :titles=\"['所有角色', '当前角色']\"\r\n          :filter-method=\"filterRole\"\r\n          filterable\r\n          @on-change=\"handleChange\"></Transfer>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n    <Modal\r\n      v-model=\"platformDlg.show\"\r\n      title=\"分配平台\"\r\n      width=\"600px\"\r\n      @on-ok=\"platformOk\">\r\n      <div>\r\n        <div>\r\n          <Form :label-width=\"80\" inline>\r\n            <FormItem label=\"用户名称\">\r\n              <Input readonly v-model=\"roleDlg.userCode\"/>\r\n            </FormItem>\r\n          </Form>\r\n        </div>\r\n        <div>\r\n        <Transfer\r\n        :data=\"platformDlg.platformData\"\r\n        :target-keys=\"platformDlg.targetData\"\r\n        :titles=\"['所有平台', '当前角色资源']\"\r\n        :list-style=\"resourceStyle\"\r\n        :filter-method=\"filterResource\"\r\n        :render-format=\"renderResource\"\r\n        filterable\r\n        @on-change=\"platformHandleChange\"></Transfer>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n    <Modal\r\n      v-model=\"systemDlg.show\"\r\n      title=\"分配平台\"\r\n      width=\"600px\"\r\n      @on-ok=\"systemOk\">\r\n      <div>\r\n        <div>\r\n          <Form :label-width=\"80\" inline>\r\n            <FormItem label=\"用户名称\">\r\n              <Input readonly v-model=\"roleDlg.userCode\"/>\r\n            </FormItem>\r\n          </Form>\r\n        </div>\r\n        <div>\r\n          <Tree ref=\"systemTree\" @on-check-change=\"checkChange\" :render=\"renderContent\" :data=\"systemDlg.systemTreeData\" show-checkbox></Tree>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport common from '@/mixins/common'\r\nimport store from '@/store/index'\r\nimport utils from '@/common/utils'\r\nconst enums = {\r\n  state: [\r\n    {\r\n      key: '1',\r\n      val: '启用'\r\n    },\r\n    {\r\n      key: '0',\r\n      val: '停用'\r\n    }\r\n  ]\r\n}\r\n\r\nexport default {\r\n  props: {\r\n    transData: {\r\n      type: Object,\r\n      default: function () {\r\n        return {}\r\n      }\r\n    }\r\n  },\r\n  mixins: [ common ],\r\n  data: function () {\r\n    return {\r\n      cUserData: {\r\n        platformData: [],\r\n        systemData: [],\r\n        roleData: {}\r\n      },\r\n      searchBean: {},\r\n      loadingdel: false,\r\n      loadingactive: false,\r\n      loadinginactive: false,\r\n      loadingreset: false,\r\n      platformDlg: {\r\n        show: false,\r\n        platformData: [],\r\n        targetData: []\r\n      },\r\n      systemDlg: {\r\n        show: false,\r\n        systemData: [],\r\n        targetData: []\r\n      },\r\n      gridTitles: [\r\n        /* {\r\n        type: 'index',\r\n        title: ' ',\r\n        width: 80,\r\n        align: 'center'\r\n        }, */\r\n        {\r\n          type: 'selection',\r\n          width: 60,\r\n          align: 'center'\r\n        },\r\n        {\r\n          title: '用户名',\r\n          key: 'userCode'\r\n        },\r\n        {\r\n          title: '中文名',\r\n          key: 'userName'\r\n        },\r\n        {\r\n          title: '工号',\r\n          key: 'empId'\r\n        },\r\n        {\r\n          title: '状态',\r\n          key: 'isEnable',\r\n          render: (h, params) => {\r\n            const status = { true: '启用', false: '停用' }\r\n            return h('span', {}, status[params.row.isEnable])\r\n          }\r\n        },\r\n        {\r\n          title: '操作',\r\n          width: 320,\r\n          render: (h, params) => {\r\n            return h('div', [\r\n              h('Button', {\r\n                props: {\r\n                  type: 'info',\r\n                  size: 'small'\r\n                },\r\n                style: {\r\n                  marginRight: '5px'\r\n                },\r\n                on: {\r\n                  click: () => {\r\n                    const userId = params.row.userId\r\n                    this.checkAuth('update', userId)\r\n                  }\r\n                }\r\n              }, '修改'),\r\n              h('Button', {\r\n                props: {\r\n                  type: 'info',\r\n                  size: 'small'\r\n                },\r\n                style: {\r\n                  marginRight: '5px'\r\n                },\r\n                on: {\r\n                  click: () => {\r\n                    this.roleDlg.userId = params.row.userId\r\n                    this.roleDlg.userCode = params.row.userCode\r\n                    this.showRoleDlg()\r\n                  }\r\n                }\r\n              }, '分配角色'),\r\n              // h('Button', {\r\n              //   props: {\r\n              //     size: 'small',\r\n              //     type: 'info'\r\n              //   },\r\n              //   style: {\r\n              //     marginRight: '5px'\r\n              //   },\r\n              //   on: {\r\n              //     click: () => {\r\n              //       // this.currentSelect = {roleId: params.row.role_id, roleName: params.row.role_chname};\r\n              //       this.roleDlg.userId = params.row.userId\r\n              //       this.roleDlg.userCode = params.row.userCode\r\n              //       this.showPlatformDlg()\r\n              //     }\r\n              //   }\r\n              // }, '分配平台'),\r\n              h('Button', {\r\n                props: {\r\n                  size: 'small',\r\n                  type: 'info'\r\n                },\r\n                style: {\r\n                  marginRight: '5px'\r\n                },\r\n                on: {\r\n                  click: () => {\r\n                    // this.currentSelect = {roleId: params.row.role_id, roleName: params.row.role_chname};\r\n                    this.roleDlg.userId = params.row.userId\r\n                    this.roleDlg.userCode = params.row.userCode\r\n                    this.showSystemDlg()\r\n                  }\r\n                }\r\n              }, '分配平台')\r\n            ])\r\n          }\r\n        }\r\n      ],\r\n      gridData: [],\r\n      enums: enums,\r\n      roleDlg: {\r\n        show: false,\r\n        userId: '',\r\n        userCode: '',\r\n        roleData: [],\r\n        targetData: []\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    init: function () {\r\n      if (this.transData.currentPage) {\r\n        this.searchBean = this.transData.searchBean\r\n        this.page.current = this.transData.currentPage\r\n        this.page.size = this.transData.pageSize\r\n      }\r\n\r\n      this.search()\r\n    },\r\n    search: function () {\r\n      this.selection = []\r\n      let params = Object.assign({}, this.searchBean)\r\n      if (!params.userCode || params.userCode === '') {\r\n        delete params.userCode\r\n      }\r\n      params.current = this.page.current\r\n      params.size = this.page.size\r\n\r\n      let httpConfig = {\r\n        method: 'GET',\r\n        url: '/user',\r\n        params: params\r\n      }\r\n      this.$ajax(httpConfig)\r\n        .then(resp => {\r\n          this.gridData = resp.data.records\r\n          this.page.total = resp.data.total\r\n        })\r\n        .then(resp => {\r\n          this.loading = false\r\n        })\r\n        .catch(error => {\r\n          this.loading = false\r\n          console.log(error)\r\n        })\r\n    },\r\n    demand () {\r\n      this.page.current = 1\r\n      this.search()\r\n    },\r\n    clear: function () {\r\n      this.searchBean = {}\r\n      this.selection = []\r\n      this.page = {\r\n        current: 1,\r\n        size: 10\r\n      }\r\n    },\r\n    add: function () {\r\n      this.$emit('exit', null)\r\n    },\r\n    del: function () {\r\n      const userIds = Array.from(this.selection, e => e.userId)\r\n      let deleteConfig = {\r\n        method: 'DELETE',\r\n        url: `/user/${userIds}/delete`,\r\n        data: {}\r\n      }\r\n      let authSystems = 'ROLE_ADMIN' // store.getters.getSystems\r\n      if (authSystems.indexOf('ROLE_ADMIN') == -1) {\r\n        if (userIds.length > 1) {\r\n          this.$Message.warning('请选择单个用户，仅系统管理员支持批量操作')\r\n        } else {\r\n          const msconfig = {\r\n            url: 'resource/metasystem',\r\n            method: 'GET',\r\n            params: { userId: userIds[0] }\r\n          }\r\n          this.$ajax(msconfig)\r\n            .then(res => {\r\n              if (res.data) {\r\n                for (let i = 0; i < res.data.length; i++) {\r\n                  if (authSystems.indexOf(res.data[i]) == -1 && res.data[i] != 'nullnull') {\r\n                    this.$Message.warning('该用户具有其他平台应用的权限，仅系统管理员可以操作该用户')\r\n                    return\r\n                  }\r\n                }\r\n                let param = authSystems.find(item => { if (item.indexOf('*') > -1) { return item } })\r\n                deleteConfig.data.authps = param\r\n                this.loadingdel = true\r\n                this.$ajax(deleteConfig)\r\n                  .then(resp => {\r\n                    this.loadingdel = false\r\n                    this.search()\r\n                  })\r\n              }\r\n            })\r\n        }\r\n      } else {\r\n        this.loadingdel = true\r\n        this.$ajax(deleteConfig)\r\n          .then(resp => {\r\n            this.loadingdel = false\r\n            this.search()\r\n          })\r\n      }\r\n    },\r\n    active: function () {\r\n      const userIds = Array.from(this.selection, e => e.userId)\r\n      let params = { userIds: userIds.toString(), isEnable: true }\r\n      const activeConfig = {\r\n        method: 'POST',\r\n        url: `/user/${userIds}/updateEnable`,\r\n        data: params\r\n      }\r\n      this.loadingactive = true\r\n      this.$ajax(activeConfig)\r\n        .then(resp => {\r\n          this.loadingactive = false\r\n          this.search()\r\n        })\r\n    },\r\n    inactive: function () {\r\n      const userIds = Array.from(this.selection, e => e.userId)\r\n      let params = { userIds: userIds.toString(), isEnable: false }\r\n      const inactiveConfig = {\r\n        method: 'POST',\r\n        url: `/user/${userIds}/updateEnable`,\r\n        data: params\r\n      }\r\n      this.loadinginactive = true\r\n      this.$ajax(inactiveConfig)\r\n        .then(resp => {\r\n          this.loadinginactive = false\r\n          this.search()\r\n        })\r\n    },\r\n    reset: function () {\r\n      const userIds = Array.from(this.selection, e => e.userId)\r\n      let params = { userIds: userIds.toString() }\r\n      const resetConfig = {\r\n        method: 'POST',\r\n        url: `/user/resetPwd`,\r\n        data: params\r\n      }\r\n      this.loadingreset = true\r\n      this.$ajax(resetConfig)\r\n        .then(resp => {\r\n          this.loadingreset = false\r\n          this.search()\r\n        })\r\n    },\r\n    checkAuth (opName, userId) {\r\n      let authSystems = 'ROLE_ADMIN' // store.getters.getSystems\r\n      if (authSystems.indexOf('ROLE_ADMIN') == -1) {\r\n        const msconfig = {\r\n          url: 'resource/metasystem',\r\n          method: 'GET',\r\n          params: { userId: userId }\r\n        }\r\n        this.$ajax(msconfig)\r\n          .then(res => {\r\n            if (res.data) {\r\n              for (let i = 0; i < res.data.length; i++) {\r\n                if (authSystems.indexOf(res.data[i]) == -1 && res.data[i] != 'nullnull') {\r\n                  this.$Message.warning('该用户具有其他平台应用的权限，仅系统管理员可以操作该用户')\r\n                  return\r\n                }\r\n              }\r\n              if (opName == 'showRoleDlg') {\r\n                this.showRoleDlgReal()\r\n              } else if (opName == 'showPlatformDlg') {\r\n                this.showPlatformDlgReal()\r\n              } else if (opName == 'showSystemDlg') {\r\n                this.showSystemDlgReal()\r\n              } else if (opName == 'update') {\r\n                let queryCache = { searchBean: this.searchBean, currentPage: this.page.current, pageSize: this.page.size }\r\n                this.$emit('exit', Object.assign({ id: userId }, queryCache))\r\n              }\r\n            }\r\n          })\r\n      } else {\r\n        if (opName == 'showRoleDlg') {\r\n          this.showRoleDlgReal()\r\n        } else if (opName == 'showPlatformDlg') {\r\n          this.showPlatformDlgReal()\r\n        } else if (opName == 'showSystemDlg') {\r\n          this.showSystemDlgReal()\r\n        } else if (opName == 'update') {\r\n          let queryCache = { searchBean: this.searchBean, currentPage: this.page.current, pageSize: this.page.size }\r\n          this.$emit('exit', Object.assign({ id: userId }, queryCache))\r\n        }\r\n      }\r\n    },\r\n    showRoleDlg: function () {\r\n      this.checkAuth('showRoleDlg', this.roleDlg.userId)\r\n    },\r\n    showPlatformDlg: function () {\r\n      this.checkAuth('showPlatformDlg', this.roleDlg.userId)\r\n    },\r\n    showSystemDlg: function () {\r\n      this.checkAuth('showSystemDlg', this.roleDlg.userId)\r\n    },\r\n    showRoleDlgReal: function () {\r\n      this.roleDlg.show = true\r\n      this.roleDlg.roleData = []\r\n      this.roleDlg.targetData = []\r\n      // 初始化穿梭框\r\n      const allRoleConfig = {\r\n        method: 'GET',\r\n        url: '/role',\r\n        params: { currentPage: 1, pageSize: 999 }\r\n      }\r\n      this.$ajax(allRoleConfig)\r\n        .then(resp => {\r\n          // 获取该用户该有的角色\r\n          const rolesConfig = {\r\n            method: 'GET', url: `/role/${this.roleDlg.userCode}/list`\r\n          }\r\n          this.$ajax(rolesConfig)\r\n            .then(res => {\r\n              this.roleDlg.targetData = Array.from(res.data, e => e.roleId)\r\n\r\n              if (resp.data) {\r\n                resp.data.records.forEach(role => {\r\n                  let temp = {}\r\n                  temp.key = role.roleId\r\n                  temp.label = role.roleName\r\n                  temp.description = role.roleName\r\n                  this.roleDlg.roleData.push(temp)\r\n                })\r\n              }\r\n            })\r\n        })\r\n    },\r\n    showPlatformDlgReal: function () {\r\n      this.platformDlg = {\r\n        show: true,\r\n        platformData: [],\r\n        targetData: []\r\n      }\r\n      // 初始化穿梭框\r\n      const allResConfig = {\r\n        method: 'GET',\r\n        url: '/udsSystem/listQuery'\r\n        // params: { currentPage: 1, pageSize: 999 }\r\n      }\r\n      this.$ajax(allResConfig)\r\n        .then(resp => {\r\n          let curdata = []\r\n          let uobj = {}\r\n          if (resp.data) {\r\n            let sdata = resp.data\r\n            for (let i = 0; i < sdata.length; i++) {\r\n              if (uobj.hasOwnProperty(sdata[i].platform)) {\r\n              } else {\r\n                uobj[sdata[i].platform] = '1'\r\n                curdata.push(sdata[i])\r\n              }\r\n            }\r\n          }\r\n          // 获取该角色该有的资源\r\n          const roleResConfig = {\r\n            method: 'GET',\r\n            url: `/user/${this.roleDlg.userId}/platform/permiss`\r\n          }\r\n          this.$ajax(roleResConfig)\r\n            .then(res => {\r\n              this.platformDlg.targetData = Array.from(res.data, e => e.id)\r\n              let authSystems = 'ROLE_ADMIN' // store.getters.getSystems\r\n              if (authSystems.indexOf('ROLE_ADMIN') == -1) {\r\n                this.platformDlg.platformData = this.cUserData.platformData\r\n              } else {\r\n                if (resp.data) {\r\n                  curdata.forEach(platform => {\r\n                    let temp = {}\r\n                    temp.key = platform.id\r\n                    temp.method = ''\r\n                    temp.label = platform.etlPlatform\r\n                    // temp.description = resource.remark;\r\n\r\n                    this.platformDlg.platformData.push(temp)\r\n                  })\r\n                }\r\n              }\r\n            })\r\n        })\r\n    },\r\n    showSystemDlgReal: function () {\r\n      this.systemDlg = {\r\n        show: true,\r\n        systemTreeData: []\r\n      }\r\n      // 初始化应用\r\n      const systemConfig = { method: 'GET', url: '/udsSystem/listQuery' }\r\n      this.$ajax(systemConfig)\r\n        .then(resp => {\r\n          const userBySystemConfig = { method: 'GET', url: `/user/${this.roleDlg.userId}/platform/permiss` }\r\n          this.$ajax(userBySystemConfig)\r\n            .then(res => {\r\n              let tree = getSystemTree(resp.data, res.data)\r\n              this.systemDlg.systemTreeData = tree.systems // 把处理好的数据赋值给组件\r\n            })\r\n        })\r\n      // 转换树形结构\r\n      function getSystemTree (udsSystems, checkedSystems) {\r\n        const systemMsgs = Array.from(checkedSystems, e => e.systems === '*' ? e.platform : e.platform + '-' + e.systems)\r\n        let result = { systems: [], checked: true }\r\n        udsSystems.forEach(udsSystem => {\r\n          if (udsSystem.systems === '*') {\r\n            let temp = {}\r\n            temp.Key = udsSystem.id\r\n            temp.title = udsSystem.platform\r\n            temp.expand = true\r\n            // const t = getSystemTree(menu.children, checkedMenus)\r\n            // temp.children = t.menus\r\n            // temp.checked = (checkedSystems.includes(temp.title) && temp.children.every(e => e.checked))\r\n            temp.checked = systemMsgs.includes(temp.title)\r\n            temp.children = []\r\n            // 权限\r\n            temp.permissions = ''\r\n            let sysPermissions = checkedSystems.find(item => item.platform === udsSystem.platform && item.systems === udsSystem.systems)\r\n            if (sysPermissions && sysPermissions.permissions) {\r\n              temp.permissions = sysPermissions.permissions\r\n            }\r\n            result.systems.push(temp)\r\n          }\r\n        })\r\n        udsSystems.forEach(udsSystem => {\r\n          if (udsSystem.systems !== '*') {\r\n            let temp = {}\r\n            temp.Key = udsSystem.id\r\n            temp.title = udsSystem.platform + '-' + udsSystem.systems\r\n            temp.expand = true\r\n            temp.checked = systemMsgs.includes(temp.title)\r\n            // 权限\r\n            temp.permissions = ''\r\n            let sysPermissions = checkedSystems.find(item => item.platform === udsSystem.platform && item.systems === udsSystem.systems)\r\n            if (sysPermissions && sysPermissions.permissions) {\r\n              temp.permissions = sysPermissions.permissions\r\n            }\r\n            let platform = result.systems.find(item => item.title === udsSystem.platform)\r\n            if (platform.permissions && (platform.permissions === 'W' || temp.permissions === '')) {\r\n              temp.permissions = platform.permissions\r\n            }\r\n            platform.children.push(temp)\r\n          }\r\n        })\r\n        return result\r\n      }\r\n    },\r\n    renderContent (h, { root, node, data }) {\r\n      return h('span', {\r\n        style: {\r\n          display: 'inline-block',\r\n          width: '100%'\r\n        }\r\n      }, [\r\n        h('span', [\r\n          h('span', data.title)\r\n        ]),\r\n        h('span', {\r\n          style: {\r\n            display: 'inline-block',\r\n            float: 'right',\r\n            marginRight: '32px'\r\n          }\r\n        }, [\r\n          h('RadioGroup', {\r\n            props: {\r\n              value: data.permissions,\r\n              label: '读/写'\r\n            },\r\n            style: {\r\n              width: '100px'\r\n            },\r\n            on: {\r\n              'on-change': (val) => {\r\n                data.permissions = val\r\n              }\r\n            }\r\n          },\r\n          [\r\n            h('Radio', {\r\n              props: {\r\n                // value: 'R',\r\n                // label: '读'\r\n                label: 'R'\r\n              },\r\n              style: {\r\n                width: '34px'\r\n              }\r\n            }, '读'),\r\n            h('Radio', {\r\n              props: {\r\n                // value: 'W',\r\n                // label: '写'\r\n                label: 'W'\r\n              },\r\n              style: {\r\n                width: '14px'\r\n              }\r\n            }, '写')\r\n          ])\r\n        ])\r\n      ])\r\n    },\r\n    checkChange: function (data, checkData) {\r\n      if (checkData.checked) {\r\n        if (checkData.permissions && checkData.permissions !== '') {\r\n          if (checkData.children) {\r\n            checkData.children.forEach(children => {\r\n              children.permissions = checkData.permissions\r\n            })\r\n          }\r\n        } else {\r\n          checkData.permissions = 'R'\r\n          if (checkData.children) {\r\n            checkData.children.forEach(children => {\r\n              children.permissions = 'R'\r\n            })\r\n          }\r\n        }\r\n      } else {\r\n        checkData.permissions = ''\r\n        if (checkData.children) {\r\n          checkData.children.forEach(children => {\r\n            children.permissions = ''\r\n          })\r\n        }\r\n      }\r\n    },\r\n    recusiveNode: function (needAdd, node, flatState) {\r\n      if (typeof node.parent === 'undefined') {\r\n\r\n      } else {\r\n        for (const t of needAdd) {\r\n          if (t.nodeKey === node.parent) {\r\n            return\r\n          }\r\n        }\r\n        needAdd.push(flatState[node.parent].node)\r\n        this.recusiveNode(needAdd, flatState[node.parent], flatState)\r\n      }\r\n    },\r\n    roleOk: function () {\r\n      const roleIds = this.roleDlg.targetData\r\n      const addRoles = {\r\n        method: 'POST',\r\n        url: `/user/${this.roleDlg.userId}/role`,\r\n        data: { 'userId': this.roleDlg.userId, 'roleIds': roleIds.toString() }\r\n      }\r\n      this.$ajax(addRoles)\r\n    },\r\n    platformOk: function () {\r\n      const platformIds = this.platformDlg.targetData\r\n      let authSystems = 'ROLE_ADMIN' // store.getters.getSystems\r\n      let param = authSystems.find(item => { if (item.indexOf('*') > -1) { return item } })\r\n      const addResources = {\r\n        method: 'POST',\r\n        url: `/user/${this.roleDlg.userId}/platform`,\r\n        data: { 'platformIds': platformIds.toString(), 'authps': param }\r\n      }\r\n      this.$ajax(addResources)\r\n    },\r\n    systemOk: function () {\r\n      let checkeds = this.$refs['systemTree'].getCheckedNodes()\r\n      if (!checkeds || checkeds.length === 0) {\r\n        this.$Modal.error({\r\n          title: '提示',\r\n          content: '未选择平台！！'\r\n        })\r\n        return\r\n      }\r\n      // let flatState = this.$refs['systemTree'].flatState\r\n      // for (const t of checkeds) {\r\n      //   this.recusiveNode(checkeds, flatState[t.nodeKey], flatState)\r\n      // }\r\n      // const systemIds = Array.from(checkeds, e => e.Key)\r\n      let permissList = []\r\n      for (const t of checkeds) {\r\n        let userSystems = {}\r\n        userSystems.userId = this.roleDlg.userId\r\n        userSystems.systemsId = t.Key\r\n        if (t.permissions === undefined || t.permissions === '') {\r\n          t.permissions = 'R'\r\n        }\r\n        userSystems.permissions = t.permissions\r\n        permissList.push(userSystems)\r\n      }\r\n      const addPermiss = {\r\n        method: 'POST',\r\n        url: `/user/${this.roleDlg.userId}/allot/permiss`,\r\n        data: permissList,\r\n        contentType: 'json'\r\n      }\r\n      this.$ajax(addPermiss)\r\n        .then(resp => {\r\n          if (resp.status && resp.status === 200) {\r\n            if (this.roleDlg.userId === this.$store.getters.getUserId) {\r\n              utils.getUserPlatform(this.$store.getters.getUserId)\r\n            }\r\n          }\r\n        })\r\n    },\r\n    filterRole: function (data, query) {\r\n      return data.label.indexOf(query) > -1\r\n    },\r\n    handleChange: function (newTarget) {\r\n      this.roleDlg.targetData = newTarget\r\n    },\r\n    filterResource: function (data, query) {\r\n      return data.label.indexOf(query) > -1\r\n    },\r\n    renderResource: function (item) {\r\n      return `<span class=\"resource-label\">${item.label}</span>\r\n\t\t\t\t\t<span class=\"resource-method\">${item.method}</span>`\r\n    },\r\n    platformHandleChange: function (newTarget) {\r\n      this.platformDlg.targetData = newTarget\r\n    },\r\n    systemHandleChange: function (newTarget) {\r\n      this.systemDlg.targetData = newTarget\r\n    }\r\n  },\r\n  mounted () {\r\n    //\r\n  },\r\n  computed: {\r\n    resourceStyle () {\r\n      return {\r\n        width: '250px',\r\n        height: '300px'\r\n      }\r\n    },\r\n    systemDlgNew () {\r\n      if (this.systemDlg.systemTreeData) {\r\n        return JSON.parse(JSON.stringify(this.systemDlg.systemTreeData))\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    systemDlgNew: {\r\n      handler (newVal, oldVal) {\r\n        for (let i = 0; i < newVal.length; i++) {\r\n          if (oldVal[i] && newVal[i].permissions && oldVal[i].permissions && newVal[i].permissions !== oldVal[i].permissions) {\r\n            this.systemDlg.systemTreeData[i].children.forEach(children => {\r\n              if (children.checked) {\r\n                children.permissions = newVal[i].permissions\r\n              }\r\n            })\r\n          }\r\n        }\r\n      },\r\n      deep: true\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style>\r\n/* .spdb-toolbar .i1\r\n{\r\n position: relative;\r\n top: 5px;\r\n left: 0px;\r\n} */\r\n\r\n.resource-method {\r\n\tfloat: right;\r\n\tcolor: green;\r\n}\r\n</style>\r\n"]}]}