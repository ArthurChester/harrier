{"remainingRequest":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\view\\single-page\\home\\home.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\view\\single-page\\home\\home.vue","mtime":1681468306527},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport utils from '@/common/utils'\r\nimport * as echarts from 'echarts'\r\nimport InforCard from '_c/info-card-new'\r\nimport InfoCircle from '_c/info-circle'\r\nimport CountTo from '_c/count-to'\r\nimport { ChartPie, ChartBar } from '_c/charts'\r\nimport Example from './example.vue'\r\nconst RESOURCE_PATH = '/firstPage'\r\nexport default {\r\n  name: 'home',\r\n  components: {\r\n    InfoCircle,\r\n    InforCard,\r\n    CountTo,\r\n    ChartPie,\r\n    ChartBar,\r\n    Example\r\n  },\r\n  created () {\r\n    this.$nextTick(() => {\r\n      setTimeout(() => {\r\n        this.getBar()\r\n        this.queryNodeList()\r\n        this.queryPlatformList()\r\n      }, 20)\r\n    })\r\n  },\r\n  data () {\r\n    return {\r\n      platformStartTime: utils.fmtDate(new Date(new Date().getTime() - 3 * 60 * 60 * 1000), 'yyyy-MM-dd hh:mm:ss'),\r\n      platformEndTime: utils.fmtDate(new Date(), 'yyyy-MM-dd hh:mm:ss'),\r\n      nodeStartTime: utils.fmtDate(new Date(new Date().getTime() - 3 * 60 * 60 * 1000), 'yyyy-MM-dd hh:mm:ss'),\r\n      nodeEndTime: utils.fmtDate(new Date(), 'yyyy-MM-dd hh:mm:ss'),\r\n      nodeFormBean: {},\r\n      timeFormBean: { show: false },\r\n      intervalDataspace: '',\r\n      timeList: [ { value: '10', label: '近六个月' }, { value: '20', label: '近一年' } ],\r\n      jobBean: {},\r\n      haveNode: false,\r\n      inforCardData: [\r\n        { title: '平台总数', name: 'sumPlatforms', iconUrl: 'platformC', count: 0, color: '#2d8cf0' },\r\n        { title: '应用总数', name: 'sumSystems', iconUrl: 'systemC', count: 0, color: '#19be6b' },\r\n        { title: '作业总数', name: 'sumJobs', iconUrl: 'jobC', count: 0, color: '#ed3f14' },\r\n        { title: '未完成平台', name: 'sumUndonePlatforms', iconUrl: 'unPlatformC', count: 0, color: '#E0E7FA' },\r\n        { title: '未完成应用', name: 'sumUndoneSystems', iconUrl: 'unSystemC', count: 0, color: '#D9F3E7' },\r\n        { title: '未完成作业', name: 'sumUndoneJobs', iconUrl: 'unJobC', count: 0, color: '#FCEBE3' }\r\n      ],\r\n      pieData: [\r\n        { value: 335, name: '直接访问' },\r\n        { value: 310, name: '邮件营销' },\r\n        { value: 234, name: '联盟广告' },\r\n        { value: 135, name: '视频广告' },\r\n        { value: 1548, name: '搜索引擎' }\r\n      ],\r\n      barData: {\r\n        Mon: 13253,\r\n        Tue: 34235,\r\n        Wed: 26321,\r\n        Thu: 12340,\r\n        Fri: 24643,\r\n        Sat: 1322,\r\n        Sun: 1324\r\n      },\r\n      showCarousel: false,\r\n      jobData: [],\r\n      dataMap: {},\r\n      myBarGraphOption: {},\r\n      majorNodeSetting: {\r\n        loop: false,\r\n        autoplay: false,\r\n        autoplaySpeed: 20000,\r\n        dots: 'none',\r\n        radiusDot: false,\r\n        trigger: 'click',\r\n        arrow: 'hover'\r\n      },\r\n      childNodeSetting: {\r\n        loop: false,\r\n        autoplay: false,\r\n        autoplaySpeed: 20000,\r\n        dots: 'none',\r\n        radiusDot: false,\r\n        trigger: 'click',\r\n        arrow: 'hover'\r\n      },\r\n      setting: {\r\n        loop: false,\r\n        autoplay: false,\r\n        autoplaySpeed: 20000,\r\n        dots: 'none',\r\n        radiusDot: false,\r\n        trigger: 'click',\r\n        arrow: 'hover'\r\n      },\r\n      clusterstats: {},\r\n      majorNodeList: [],\r\n      childNodeList: [],\r\n      platformList: [],\r\n      announcementList: [],\r\n      nodeList: [],\r\n      value1: 0,\r\n      value2: 0,\r\n      value3: 0,\r\n      value4: 0,\r\n      graph7: null,\r\n      graph8: null\r\n    }\r\n  },\r\n  methods: {\r\n    init () {\r\n      this.setting = {\r\n        loop: true,\r\n        autoplay: true,\r\n        autoplaySpeed: 20000,\r\n        dots: 'none',\r\n        radiusDot: false,\r\n        trigger: 'click',\r\n        arrow: 'hover'\r\n      }\r\n      this.getPsjStats()\r\n      this.getClusterStats()\r\n      this.graph8 = this.$echarts.init(document.getElementById('main8'))\r\n      this.graph7 = this.$echarts.init(document.getElementById('main7'))\r\n    },\r\n    getBar () { // 各平台应用作业量\r\n      const sumAllPatformJobConfig = {\r\n        method: 'GET',\r\n        url: RESOURCE_PATH + '/sumAllPatformJob ',\r\n        params: {}\r\n      }\r\n      this.$ajax(sumAllPatformJobConfig).then(resp => {\r\n        if (resp.data) {\r\n          this.jobData = resp.data\r\n          let obj = {}\r\n          let xAxisArr = {}\r\n          for (let i = 1; i <= Math.ceil(this.jobData.length / 10 % 10); i++) {\r\n            let tmp = {}\r\n            tmp[i] = []\r\n            let xAxis = {}\r\n            xAxis[i] = []\r\n            let k = this.jobData.length <= 10 * i ? this.jobData.length : 10 * i\r\n            for (let j = (i - 1) * 10; j < k; j++) {\r\n              tmp[i][j] = {\r\n                name: this.jobData[j].platform,\r\n                value: this.jobData[j].num\r\n              }\r\n              xAxis[i][j] = this.jobData[j].platform\r\n            }\r\n            tmp[i] = tmp[i].filter(d => d)\r\n            Object.assign(obj, tmp)\r\n            xAxis[i] = xAxis[i].filter(d => d)\r\n            Object.assign(xAxisArr, xAxis)\r\n          }\r\n          this.dataMap.jobCount = obj\r\n          this.dataMap.count = Math.ceil(this.jobData.length / 10 % 10)\r\n          this.dataMap.xAxisArr = xAxisArr\r\n          let myBar = this.$echarts.init(document.getElementById('main6'))\r\n          myBar.setOption(this.myBarGraph(this.dataMap))\r\n        }\r\n      })\r\n    },\r\n    myBarGraph (dataMap) {\r\n      let yArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n      this.myBarGraphOption = {\r\n        baseOption: {\r\n          timeline: {\r\n            axisType: 'category',\r\n            autoPlay: true,\r\n            playInterval: 3000,\r\n            data: yArr.splice(0, dataMap.count),\r\n            label: {\r\n              formatter: function (s) {\r\n                return ''\r\n              }\r\n            },\r\n            lineStyle: { // 时间轴\r\n              show: true,\r\n              color: 'rgba(225,225,225,0)'\r\n            },\r\n            checkpointStyle: { // 时间轴上的点\r\n              symbol: 'circle',\r\n              color: '#316bf3',\r\n              borderColor: 'rgba(49,107,243,0.5)'\r\n            },\r\n            controlStyle: { // 控制\r\n              show: false,\r\n              color: '#343434',\r\n              borderColor: '#343434',\r\n              showPlayBtn: false // 播放按钮\r\n            },\r\n            emphasis: {\r\n              controlStyle: { // hover样式\r\n                color: 'rgba(225,225,225,0.8)',\r\n                borderColor: 'rgba(225,225,225,0.8)'\r\n              }\r\n            }\r\n          },\r\n          title: {\r\n            subtext: '' // 小标题,\r\n          },\r\n          tooltip: {\r\n\r\n          },\r\n          legend: {\r\n            left: 'right',\r\n            data: []\r\n          },\r\n          calculable: true,\r\n          grid: {\r\n            top: 50,\r\n            bottom: 80,\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'shadow',\r\n                label: {\r\n                  show: true,\r\n                  formatter: function (params) {\r\n                    return params.value.replace('\\n', '')\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          },\r\n          xAxis: [\r\n            {\r\n              'type': 'category',\r\n              'axisLabel': { 'interval': 0 },\r\n              splitLine: { show: false }\r\n            }\r\n          ],\r\n          yAxis: [\r\n            {\r\n              type: 'value',\r\n              name: '作业数'\r\n            }\r\n          ],\r\n          series: [\r\n            {\r\n              name: '作业数',\r\n              type: 'bar',\r\n              color: '#3858F9',\r\n              barWidth: 30,\r\n              label: {\r\n                show: true,\r\n                position: 'top',\r\n                textStyle: {\r\n                  color: '#3858F9',\r\n                  fontSize: 12\r\n                }\r\n              }\r\n            }\r\n          ]\r\n        },\r\n        options: [\r\n          {\r\n            xAxis: [\r\n              { data: dataMap.xAxisArr[1] }\r\n            ],\r\n            series: [\r\n              { data: dataMap.jobCount[1] }\r\n            ]\r\n          },\r\n          {\r\n            xAxis: [\r\n              { data: dataMap.xAxisArr[2] }\r\n            ],\r\n            series: [\r\n              { data: dataMap.jobCount[2] }\r\n            ]\r\n          },\r\n          {\r\n            xAxis: [\r\n              { data: dataMap.xAxisArr[3] }\r\n            ],\r\n            series: [\r\n              { data: dataMap.jobCount[3] }\r\n            ]\r\n          },\r\n          {\r\n            xAxis: [\r\n              { data: dataMap.xAxisArr[4] }\r\n            ],\r\n            series: [\r\n              { data: dataMap.jobCount[4] }\r\n            ]\r\n          },\r\n          {\r\n            xAxis: [\r\n              { data: dataMap.xAxisArr[5] }\r\n            ],\r\n            series: [\r\n              { data: dataMap.jobCount[5] }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n      return this.myBarGraphOption\r\n    },\r\n    changePlatform (param0, param1) {\r\n      let platform = this.platformList[param1].value\r\n      this.getPlatformconcData(platform) // 平台作业状态折线图\r\n    },\r\n    changeNode (param0, param1) {\r\n      let node = this.nodeList[param1]\r\n      this.getNodeData(node) // 节点作业状态折线图\r\n    },\r\n    // 查询节点名称数据\r\n    queryNodeList () {\r\n      let loadConfig = {\r\n        method: 'GET',\r\n        url: RESOURCE_PATH + '/ListAllWorker'\r\n      }\r\n      this.nodeList = []\r\n      this.haveNode = false\r\n      this.$ajax(loadConfig).then(resp => {\r\n        resp.data.forEach(data => {\r\n          this.nodeList.push(data)\r\n        })\r\n        if (this.nodeList.length == 0) {\r\n          this.haveNode = true\r\n        }\r\n        this.getNodeData(this.nodeList[0])\r\n      })\r\n    },\r\n    queryPlatformList () {\r\n      this.platformList = []\r\n      const loadConfig = {\r\n        method: 'GET',\r\n        url: RESOURCE_PATH + '/ListAllPlatform',\r\n        params: {}\r\n      }\r\n      this.$ajax(loadConfig).then(resp => {\r\n        if (resp.status && resp.status === 200 && resp.data) {\r\n          resp.data.forEach(data1 => {\r\n            let temp = {}\r\n            temp.key = data1\r\n            temp.value = data1\r\n            temp.label = data1\r\n            this.platformList.push(temp)\r\n          })\r\n          this.getPlatformconcData(this.platformList[0].value)\r\n        }\r\n      })\r\n    },\r\n    getNodeData (node) {\r\n      let loadConfig = {\r\n        method: 'GET',\r\n        url: RESOURCE_PATH + '/serverJobStatus',\r\n        params: {\r\n          start: this.nodeStartTime,\r\n          node: node,\r\n          end: this.nodeEndTime\r\n        }\r\n      }\r\n      this.$ajax(loadConfig).then(resp => {\r\n        let option = {\r\n          tooltip: {\r\n            trigger: 'axis'\r\n          },\r\n          legend: {\r\n            data: ['runningNum'],\r\n            top: '7%'\r\n          },\r\n          xAxis: {\r\n            type: 'category',\r\n            data: resp.data.timeList\r\n          },\r\n          yAxis: {\r\n            type: 'value'\r\n          },\r\n          grid: {\r\n            x: 60,\r\n            y: 60,\r\n            x2: 60,\r\n            y2: 60\r\n          },\r\n          series: [{\r\n            data: resp.data.running,\r\n            type: 'line',\r\n            symbol: 'none',\r\n            lineStyle: {\r\n              color: '#3858F9'\r\n            },\r\n            areaStyle: {\r\n              color: {\r\n                type: 'linear',\r\n                x: 0,\r\n                y: 0,\r\n                x2: 0,\r\n                y2: 1,\r\n                colorStops: [\r\n                  { offset: 0, color: '#3858F9' },\r\n                  { offset: 1, color: 'white' }\r\n                ]\r\n              }\r\n            }\r\n          }\r\n          ]\r\n        }\r\n        this.graph8.setOption(option, true)\r\n        this.graph8.resize()\r\n      })\r\n    },\r\n    getPlatformconcData (platform) {\r\n      let loadConfig = {\r\n        method: 'GET',\r\n        url: RESOURCE_PATH + '/platformJobStatus',\r\n        params: {\r\n          start: this.platformStartTime,\r\n          platform: platform,\r\n          end: this.platformEndTime\r\n        }\r\n      }\r\n      this.$ajax(loadConfig).then(resp => {\r\n        let option = {\r\n          tooltip: {\r\n            trigger: 'axis'\r\n          },\r\n          legend: {\r\n            data: ['runningNum', 'dispatcherNum', 'pendingNum'],\r\n            top: '7%',\r\n            x: '5%'\r\n          },\r\n          xAxis: {\r\n            type: 'category',\r\n            data: resp.data['timeList']\r\n          },\r\n          yAxis: {\r\n            type: 'value',\r\n            axisLabel: {\r\n              formatter: '{value}'\r\n            }\r\n          },\r\n          grid: {\r\n            x: 60,\r\n            y: 60,\r\n            x2: 60,\r\n            y2: 60\r\n          },\r\n\r\n          series: [{\r\n            name: 'runningNum',\r\n            data: resp.data['running'],\r\n            type: 'line',\r\n            markPoint: {\r\n              data: [\r\n                { type: 'max', name: '峰值:{value}' }\r\n              ]\r\n            }\r\n          },\r\n          {\r\n            name: 'dispatcherNum',\r\n            data: resp.data['dispatcher'],\r\n            type: 'line',\r\n            markPoint: {\r\n              data: [\r\n                { type: 'max', name: '峰值:{value}' }\r\n              ]\r\n            }\r\n          },\r\n          {\r\n            name: 'pendingNum',\r\n            data: resp.data['pending'],\r\n            type: 'line',\r\n            markPoint: {\r\n              data: [\r\n                { type: 'max', name: '峰值:{value}' }\r\n              ]\r\n            }\r\n          }]\r\n        }\r\n        this.graph7.setOption(option, true)\r\n        this.graph7.resize()\r\n      })\r\n    },\r\n    getPsjStats () {\r\n      const psjStatsConfig = {\r\n        method: 'GET',\r\n        url: RESOURCE_PATH + '/psjStats',\r\n        params: {}\r\n      }\r\n      this.$ajax(psjStatsConfig).then(resp => {\r\n        if (resp.data) {\r\n          let psjStatsKeys = Object.keys(resp.data)\r\n          let psjStatsValues = Object.values(resp.data)\r\n          for (let i = 0; i < this.inforCardData.length; i++) {\r\n            for (let j = 0; j < psjStatsKeys.length; j++) {\r\n              if (psjStatsKeys[j] === this.inforCardData[i].name) {\r\n                this.inforCardData[i].count = psjStatsValues[j]\r\n              }\r\n            }\r\n          }\r\n        }\r\n      })\r\n    },\r\n    getPercent (num, total) {\r\n      num = parseFloat(num)\r\n      total = parseFloat(total)\r\n      if (isNaN(num) || isNaN(total)) {\r\n        return '-'\r\n      }\r\n      return total <= 0 ? 0 : Math.round((num / total) * 10000) / 100.0\r\n    },\r\n    getClusterStats () {\r\n      this.clusterstats = {}\r\n      let workerDataList = []\r\n      let masterDataList = []\r\n      this.majorNodeList = []\r\n      this.childNodeList = []\r\n      const clusterStatsConfig = {\r\n        method: 'GET',\r\n        url: RESOURCE_PATH + '/clusterStats',\r\n        params: {}\r\n      }\r\n      this.$ajax(clusterStatsConfig).then(resp => {\r\n        if (resp.data) {\r\n          let data = resp.data\r\n          for (let i = 0; i < data.length; i++) {\r\n            if (i === data.length - 1) {\r\n              this.clusterstats = JSON.parse(data[i].clusterstats)\r\n              this.clusterstats.serverPercent = this.getPercent(this.clusterstats.runservernum, this.clusterstats.allservernum)\r\n              this.clusterstats.cpuPercent = this.getPercent(this.clusterstats.usedclustercpu, this.clusterstats.allclustercpu)\r\n              this.clusterstats.memoryPercent = this.getPercent(this.clusterstats.usedclustermem, this.clusterstats.allclustermem)\r\n              this.clusterstats.usedclustermem = this.getTwoNumber(this.clusterstats.usedclustermem)\r\n              this.clusterstats.allservernum = this.getTwoNumber(this.clusterstats.allservernum)\r\n              this.clusterstats.usedclustercpu = this.getTwoNumber(this.clusterstats.usedclustercpu)\r\n              this.clusterstats.allclustercpu = this.getTwoNumber(this.clusterstats.allclustercpu)\r\n              this.clusterstats.usedclustermem = this.getTwoNumber(this.clusterstats.usedclustermem)\r\n              this.clusterstats.allclustermem = this.getTwoNumber(this.clusterstats.allclustermem)\r\n              break\r\n            }\r\n            if (data[i].type === 'Worker-Server') {\r\n              let worderData = data[i]\r\n              worderData.cpuPercent = this.getPercent(worderData.usedcpu, worderData.allcpu)\r\n              worderData.memoryPercent = this.getPercent(worderData.usedmem, worderData.allmem)\r\n\r\n              worderData.usedcpu = this.getTwoNumber(worderData.usedcpu)\r\n              worderData.allcpu = this.getTwoNumber(worderData.allcpu)\r\n\r\n              worderData.usedmem = this.getTwoNumber(worderData.usedmem)\r\n              worderData.allmem = this.getTwoNumber(worderData.allmem)\r\n              workerDataList.push(worderData)\r\n            }\r\n            if (data[i].type === 'Master-Server') {\r\n              let masterData = data[i]\r\n              masterData.cpuPercent = this.getPercent(masterData.usedcpu, masterData.allcpu)\r\n              masterData.memoryPercent = this.getPercent(masterData.usedmem, masterData.allmem)\r\n\r\n              masterData.usedcpu = this.getTwoNumber(masterData.usedcpu)\r\n              masterData.allcpu = this.getTwoNumber(masterData.allcpu)\r\n\r\n              masterData.usedmem = this.getTwoNumber(masterData.usedmem)\r\n              masterData.allmem = this.getTwoNumber(masterData.allmem)\r\n              masterDataList.push(masterData)\r\n            }\r\n          }\r\n          this.getMajorNodeList(masterDataList)\r\n          this.getChildNodeList(workerDataList)\r\n          this.showCarousel = true\r\n        }\r\n      })\r\n    },\r\n    getTwoNumber (num) {\r\n      var s = num + ''\r\n      if (s.indexOf('.')) {\r\n        var str = s.substring(0, s.indexOf('.') + 3)\r\n        return str\r\n      } else {\r\n        return str\r\n      }\r\n    },\r\n    getMajorNodeList (majorNodeData) {\r\n      for (let i = 0; i < majorNodeData.length; i = i + 2) {\r\n        let majorNode = []\r\n        majorNode.push(majorNodeData[i])\r\n        if (majorNodeData.length > i + 1) {\r\n          majorNode.push(majorNodeData[i + 1])\r\n        }\r\n        this.majorNodeList.push(majorNode)\r\n      }\r\n      console.log(this.majorNodeList)\r\n    },\r\n    getChildNodeList (childNodeData) {\r\n      for (let i = 0; i < childNodeData.length; i = i + 2) {\r\n        let childNode = []\r\n        childNode.push(childNodeData[i])\r\n        if (childNodeData.length > i + 1) {\r\n          childNode.push(childNodeData[i + 1])\r\n        }\r\n        this.childNodeList.push(childNode)\r\n      }\r\n    },\r\n    platformSearch (type) {\r\n      this.timeFormBean.show = true\r\n      this.timeFormBean.type = type\r\n      if (type === 'platform') {\r\n        this.timeFormBean.title = '平台作业时间筛选'\r\n        this.timeFormBean.startTime = this.platformStartTime\r\n        this.timeFormBean.endTime = this.platformEndTime\r\n      } else {\r\n        this.timeFormBean.title = '节点作业时间筛选'\r\n        this.timeFormBean.startTime = this.nodeStartTime\r\n        this.timeFormBean.endTime = this.nodeEndTime\r\n      }\r\n    },\r\n    timeSave () {\r\n      let starttime = this.timeFormBean.startTime\r\n      let endtime = this.timeFormBean.endTime\r\n      let t = (endtime - starttime) / (1000 * 3600)\r\n      if (starttime === '') {\r\n        this.$Message.warning('请输入开始时间')\r\n      } else if (endtime === '') {\r\n        this.$Message.warning('请输入结束时间')\r\n      } else if (starttime > endtime) {\r\n        this.$Message.warning('开始时间大于结束时间')\r\n      } else if (t > 3) {\r\n        this.$Message.warning('时间差值超过3小时')\r\n      } else {\r\n        this.timeFormBean.show = false\r\n        if (this.timeFormBean.type === 'platform') {\r\n          this.platformStartTime = utils.fmtDate(this.timeFormBean.startTime, 'yyyy-MM-dd hh:mm:ss')\r\n          this.platformEndTime = utils.fmtDate(this.timeFormBean.endTime, 'yyyy-MM-dd hh:mm:ss')\r\n          this.getPlatformconcData(this.platformList[this.value1].value) // 平台作业状态折线图\r\n        } else {\r\n          this.nodeStartTime = utils.fmtDate(this.timeFormBean.startTime, 'yyyy-MM-dd hh:mm:ss')\r\n          this.nodeEndTime = utils.fmtDate(this.timeFormBean.endTime, 'yyyy-MM-dd hh:mm:ss')\r\n          this.getNodeData(this.nodeList[this.value2])\r\n        }\r\n      }\r\n    }\r\n  },\r\n  mounted () {\r\n    this.init()\r\n  }\r\n\r\n}\r\n",{"version":3,"sources":["home.vue"],"names":[],"mappings":";AAgfile":"home.vue","sourceRoot":"src/view/single-page/home","sourcesContent":["<template>\r\n  <div>\r\n    <Row :gutter=\"20\">\r\n      <Col :xs=\"12\" :md=\"8\" :lg=\"4\" v-for=\"(infor, i) in inforCardData\" :key=\"`infor-${i}`\" style=\"height: 144px;padding-bottom: 10px\">\r\n        <infor-card style=\"border-radius: 10px\" shadow :color=\"infor.color\" :iconUrl=\"infor.iconUrl\" :backImgUrl=\"infor.backImgUrl\">\r\n          <count-to :end=\"infor.count\"  :count-class=\" i>2? 'count-style-black':'count-style' \"/>\r\n          <p :style=\"i>2?'color:#0B1131':'color: #FFFFFF'  \">{{ infor.title }}</p>\r\n        </infor-card>\r\n      </Col>\r\n    </Row>\r\n    <Row :gutter=\"20\" style=\"margin-top: 10px;\">\r\n      <Col :md=\"24\" :lg=\"12\" style=\"margin-bottom: 10px;\">\r\n        <Card shadow style=\"border-radius: 10px\">\r\n          <Row :gutter=\"20\" style=\"margin-top: 10px;height:52px\">\r\n            <Col :md=\"24\" :lg=\"18\" style=\"margin-bottom: 20px;\">\r\n            <p class=\"carousel-title\">集群资源利用率统计</p>\r\n            </Col>\r\n            <Col :md=\"24\" :lg=\"6\" style=\"margin-bottom: 20px;\">\r\n            </Col>\r\n          </Row>\r\n          <div style=\"width: 100%;height:296px\">\r\n            <Row :gutter=\"20\" style=\"margin-left:3% ;\">\r\n              <Col :md=\"24\" :lg=\"6\" >\r\n                <p class=\"circle-title\" >\r\n                  <span class=\"circlr-dot\" style=\"background-color:#FF8E16\"></span>集群就绪节点</p>\r\n                <Row class=\"circle-row\" >\r\n                  <div style=\"display:flex;text-align:center;padding:10px;\">\r\n                    <i-circle style=\"margin:auto;color:#FF8E16\" stroke-color=\"#FF8E16\" :percent=\"clusterstats.serverPercent\" :size=\"80\">\r\n                      <span class=\"demo-Circle-inner\" style=\"font-size:28px\">{{clusterstats.serverPercent}}<span style=\"font-size:16px\">%</span>\r\n                      </span>\r\n                    </i-circle>\r\n                    <div style=\"margin:auto\">\r\n                      <p><span style=\"font-size:18px\">{{clusterstats.runservernum}}</span><span style=\"font-size:12px\">/{{clusterstats.allservernum}}</span></p>\r\n                    </div>\r\n                  </div>\r\n                </Row>\r\n              </Col>\r\n              <Col :md=\"24\" :lg=\"18\">\r\n                <p class=\"circle-title\" >\r\n                  <span class=\"circlr-dot\" style=\"background-color:#2589FF\"></span>主节点资源利用率\r\n                </p>\r\n                <Row class=\"circle-row\" >\r\n                  <Col :xs=\"12\"  :lg=\"24\" >\r\n                    <Carousel\r\n                      v-if=\"showCarousel\"\r\n                      :autoplay=\"majorNodeSetting.autoplay\"\r\n                      :autoplay-speed=\"majorNodeSetting.autoplaySpeed\"\r\n                      v-model=\"value3\"\r\n                      :loop=\"majorNodeSetting.loop\"\r\n                      :dots=\"majorNodeSetting.dots\"\r\n                      :arrow=\"majorNodeSetting.arrow\"\r\n                      >\r\n                      <div>\r\n                        <div v-for=\"(item,index) in majorNodeList\" :key=\"index\" style=\"width:100%\">\r\n                          <CarouselItem>\r\n                            <div style=\"display: inline-flex; text-align: center;width:49%;\">\r\n                              <info-circle color=\"#2589FF\" :name=\"item[0].name\" :cpuPercent=\"item[0].cpuPercent\"\r\n                              :usedcpu=\"item[0].usedcpu\" :allcpu=\"item[0].allcpu\" :ip=\"item[0].ip\" :memoryPercent = item[0].memoryPercent :usedmem=\"item[0].usedmem\" :allmem=\"item[0].allmem\">\r\n                              </info-circle>\r\n                            </div>\r\n                            <div style=\"display: inline-flex; text-align: center;width:49%\" >\r\n                              <info-circle color=\"#2589FF\" :name=\"item[1].name\" :cpuPercent=\"item[1].cpuPercent\" :usedcpu=\"item[1].usedcpu\" :allcpu=\"item[1].allcpu\" :ip=\"item[1].ip\" :memoryPercent = item[1].memoryPercent :usedmem=\"item[1].usedmem\" :allmem=\"item[1].allmem\" v-if=\"item.length == 2\">\r\n                              </info-circle>\r\n                            </div>\r\n                          </CarouselItem>\r\n                        </div>\r\n                      </div>\r\n                    </Carousel>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n            <Row :gutter=\"20\" style=\"margin-top: 10px;margin-left:2%;\">\r\n              <Col :md=\"24\" :lg=\"6\" style=\"margin-bottom: 20px;\">\r\n              <p class=\"circle-title show-one \">\r\n                <span class=\"circlr-dot\" style=\"background-color:#15C75B\"></span>集群计算资源总利用率</p>\r\n              <Row class=\"circle-row\" >\r\n                <Col :md=\"24\" :lg=\"12\" style=\"text-align:center;padding:5px\">\r\n                  <i-circle :percent=\"clusterstats.cpuPercent\" :size=\"50\" stroke-color=\"#15C75B\" >\r\n                    <span class=\"demo-Circle-inner\" style=\"color:#15C75B\">{{clusterstats.cpuPercent}}%</span>\r\n                  </i-circle>\r\n                  <p style=\"font-size:14px;font-weight: 400\">cpu</p>\r\n                  <p style=\"font-size: 12px;color: #B5BBCD;font-weight: 400;\">{{clusterstats.usedclustercpu}}/{{clusterstats.allclustercpu}}</p>\r\n\r\n                </Col>\r\n                <Col :md=\"24\" :lg=\"12\" style=\"text-align:center;padding:5px\">\r\n                    <i-circle :percent=\"clusterstats.memoryPercent\" :size=\"50\" stroke-color=\"#15C75B\">\r\n                      <span class=\"demo-Circle-inner\" style=\"color:#15C75B\">{{clusterstats.memoryPercent}}%</span>\r\n                    </i-circle>\r\n                    <p style=\"font-size:14px;font-weight: 400\">内存</p>\r\n                    <p style=\"font-size: 12px;color: #B5BBCD;font-weight: 400;\">{{clusterstats.usedclustermem}}/{{clusterstats.allclustermem}}</p>\r\n                </Col>\r\n              </Row>\r\n              </Col>\r\n              <Col :md=\"24\" :lg=\"18\" style=\"margin-bottom: 20px;\">\r\n              <p class=\"circle-title\" >\r\n                <span class=\"circlr-dot\" style=\"background-color:#7B4CFE;\"></span>子节点资源利用率</p>\r\n              <Row class=\"circle-row\" >\r\n                <Col :xs=\"12\"  :lg=\"24\" >\r\n                  <Carousel\r\n                    v-if=\"showCarousel\"\r\n                    :autoplay=\"childNodeSetting.autoplay\"\r\n                    :autoplay-speed=\"childNodeSetting.autoplaySpeed\"\r\n                    v-model=\"value4\"\r\n                    :loop=\"childNodeSetting.loop\"\r\n                    :dots=\"childNodeSetting.dots\"\r\n                    :arrow=\"childNodeSetting.arrow\"\r\n                  >\r\n                    <div>\r\n                      <div v-for=\"(item,index) in childNodeList\" :key=\"index\" style=\"width:100%\">\r\n                        <CarouselItem  >\r\n                          <div style=\"display: inline-flex; text-align: center;width:49%\">\r\n                            <info-circle color=\"#7B4CFE\" :name=\"item[0].name\" :cpuPercent=\"item[0].cpuPercent\"\r\n                              :usedcpu=\"item[0].usedcpu\" :allcpu=\"item[0].allcpu\" :ip=\"item[0].ip\" :memoryPercent = item[0].memoryPercent :usedmem=\"item[0].usedmem\" :allmem=\"item[0].allmem\">\r\n                            </info-circle>\r\n                          </div>\r\n                          <div style=\"display: inline-flex; text-align: center;width:49%\" >\r\n                            <info-circle color=\"#7B4CFE\" :name=\"item[1].name\" :cpuPercent=\"item[1].cpuPercent\"\r\n                              :usedcpu=\"item[1].usedcpu\" :allcpu=\"item[1].allcpu\" :ip=\"item[1].ip\" :memoryPercent = item[1].memoryPercent :usedmem=\"item[1].usedmem\" :allmem=\"item[1].allmem\" v-if=\"item.length == 2\">\r\n                            </info-circle>\r\n                          </div>\r\n                        </CarouselItem>\r\n                      </div>\r\n                    </div>\r\n                  </Carousel>\r\n                </Col>\r\n              </Row>\r\n              </Col>\r\n            </Row>\r\n        </div>\r\n        </Card>\r\n      </Col>\r\n      <Col :md=\"24\" :lg=\"12\" style=\"margin-bottom: 10px;\">\r\n        <Card shadow style=\"border-radius: 10px\">\r\n          <Row :gutter=\"20\" style=\"margin-top: 10px;\">\r\n            <Col :md=\"24\" :lg=\"18\" style=\"margin-bottom: 20px;\">\r\n            <p class=\"carousel-title\">各平台应用作业量</p>\r\n            </Col>\r\n          </Row>\r\n          <div id=\"main6\" ref=\"main6\" style=\"width: 100%;height:300px\"></div>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n    <Row :gutter=\"20\" style=\"margin-top: 10px;\">\r\n      <Col :md=\"24\" :lg=\"12\" style=\"margin-bottom: 10px;\">\r\n        <Card shadow style=\"border-radius: 10px\">\r\n          <Row :gutter=\"20\" style=\"margin-top: 10px;\">\r\n            <Col :md=\"24\" :lg=\"18\" style=\"margin-bottom: 20px;\">\r\n              <Carousel\r\n                :autoplay=\"setting.autoplay\"\r\n                :autoplay-speed=\"setting.autoplaySpeed\"\r\n                v-model=\"value1\"\r\n                :loop=\"setting.loop\"\r\n                :dots=\"setting.dots\"\r\n                :arrow=\"setting.arrow\"\r\n                @on-change=\"changePlatform\"\r\n                >\r\n                  <div v-for=\"(item,index) in platformList\" :key=\"index\">\r\n                    <CarouselItem>\r\n                      <div class=\"carousel-title\">\r\n                        <span>{{item.value}}</span>\r\n                        <span>—平台作业状态折线图</span>\r\n                      </div>\r\n                    </CarouselItem>\r\n                  </div>\r\n              </Carousel>\r\n            </Col>\r\n            <Col :md=\"24\" :lg=\"6\" style=\"margin-bottom: 20px;\">\r\n              <Button type=\"primary\"  @click=\"platformSearch('platform')\">时间筛选</Button>\r\n            </Col>\r\n          </Row>\r\n          <div id=\"main7\" ref=\"main7\" style=\"width:100%;height:320px\"></div>\r\n        </Card>\r\n      </Col>\r\n      <Col :md=\"24\" :lg=\"12\" style=\"margin-bottom: 10px;\">\r\n         <Card shadow style=\"border-radius: 10px\">\r\n          <Row :gutter=\"20\" style=\"margin-top: 10px;\">\r\n            <Col :md=\"24\" :lg=\"18\" style=\"margin-bottom: 20px;\">\r\n              <Carousel\r\n              :autoplay=\"setting.autoplay\"\r\n              :autoplay-speed=\"setting.autoplaySpeed\"\r\n              v-model=\"value2\"\r\n              :loop=\"setting.loop\"\r\n              :dots=\"setting.dots\"\r\n              :arrow=\"setting.arrow\"\r\n              @on-change=\"changeNode\"\r\n              >\r\n                <div v-for=\"(item,index) in nodeList\" :key=\"index\">\r\n                  <CarouselItem>\r\n                    <div >\r\n                      <Row class=\"carousel-title\">{{item}}—节点作业状态折线图</Row>\r\n                    </div>\r\n                  </CarouselItem>\r\n                </div>\r\n              </Carousel>\r\n            </Col>\r\n            <Col :md=\"24\" :lg=\"6\" style=\"margin-bottom: 20px;\">\r\n              <Button type=\"primary\"  @click=\"platformSearch('node')\">时间筛选</Button>\r\n            </Col>\r\n          </Row>\r\n           <!-- 节点作业状态折线图 -->\r\n          <div id=\"main8\" ref=\"main8\"  style=\"width: 100%;height:320px\"></div>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n    <Modal\r\n    v-model=\"timeFormBean.show\"\r\n    :title=\"timeFormBean.title\"\r\n    :mask-closable=\"false\"\r\n    >\r\n    <div>\r\n      <div>\r\n        <Form :label-width=\"80\"  inline>\r\n          <Row>\r\n            <Col span=\"24\">\r\n              <FormItem  label=\"开始时间\">\r\n                <DatePicker :transfer=\"true\" type=\"datetime\" parse=\"yyyy-MM-dd HH:mm:ss\" format=\"yyyy-MM-dd HH:mm:ss\" v-model=\"timeFormBean.startTime\"></DatePicker>\r\n              </FormItem>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span=\"24\">\r\n              <FormItem  label=\"结束时间\">\r\n                <DatePicker :transfer=\"true\" type=\"datetime\" parse=\"yyyy-MM-dd HH:mm:ss\" format=\"yyyy-MM-dd HH:mm:ss\" v-model=\"timeFormBean.endTime\"></DatePicker>\r\n              </FormItem>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Button type=\"primary\"  @click=\"timeSave\">确定</Button>\r\n            <Button type=\"primary\"  @click=\"timeFormBean.show=false\">取消</Button>\r\n          </Row>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n    <div slot=\"footer\"></div>\r\n  </Modal>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport utils from '@/common/utils'\r\nimport * as echarts from 'echarts'\r\nimport InforCard from '_c/info-card-new'\r\nimport InfoCircle from '_c/info-circle'\r\nimport CountTo from '_c/count-to'\r\nimport { ChartPie, ChartBar } from '_c/charts'\r\nimport Example from './example.vue'\r\nconst RESOURCE_PATH = '/firstPage'\r\nexport default {\r\n  name: 'home',\r\n  components: {\r\n    InfoCircle,\r\n    InforCard,\r\n    CountTo,\r\n    ChartPie,\r\n    ChartBar,\r\n    Example\r\n  },\r\n  created () {\r\n    this.$nextTick(() => {\r\n      setTimeout(() => {\r\n        this.getBar()\r\n        this.queryNodeList()\r\n        this.queryPlatformList()\r\n      }, 20)\r\n    })\r\n  },\r\n  data () {\r\n    return {\r\n      platformStartTime: utils.fmtDate(new Date(new Date().getTime() - 3 * 60 * 60 * 1000), 'yyyy-MM-dd hh:mm:ss'),\r\n      platformEndTime: utils.fmtDate(new Date(), 'yyyy-MM-dd hh:mm:ss'),\r\n      nodeStartTime: utils.fmtDate(new Date(new Date().getTime() - 3 * 60 * 60 * 1000), 'yyyy-MM-dd hh:mm:ss'),\r\n      nodeEndTime: utils.fmtDate(new Date(), 'yyyy-MM-dd hh:mm:ss'),\r\n      nodeFormBean: {},\r\n      timeFormBean: { show: false },\r\n      intervalDataspace: '',\r\n      timeList: [ { value: '10', label: '近六个月' }, { value: '20', label: '近一年' } ],\r\n      jobBean: {},\r\n      haveNode: false,\r\n      inforCardData: [\r\n        { title: '平台总数', name: 'sumPlatforms', iconUrl: 'platformC', count: 0, color: '#2d8cf0' },\r\n        { title: '应用总数', name: 'sumSystems', iconUrl: 'systemC', count: 0, color: '#19be6b' },\r\n        { title: '作业总数', name: 'sumJobs', iconUrl: 'jobC', count: 0, color: '#ed3f14' },\r\n        { title: '未完成平台', name: 'sumUndonePlatforms', iconUrl: 'unPlatformC', count: 0, color: '#E0E7FA' },\r\n        { title: '未完成应用', name: 'sumUndoneSystems', iconUrl: 'unSystemC', count: 0, color: '#D9F3E7' },\r\n        { title: '未完成作业', name: 'sumUndoneJobs', iconUrl: 'unJobC', count: 0, color: '#FCEBE3' }\r\n      ],\r\n      pieData: [\r\n        { value: 335, name: '直接访问' },\r\n        { value: 310, name: '邮件营销' },\r\n        { value: 234, name: '联盟广告' },\r\n        { value: 135, name: '视频广告' },\r\n        { value: 1548, name: '搜索引擎' }\r\n      ],\r\n      barData: {\r\n        Mon: 13253,\r\n        Tue: 34235,\r\n        Wed: 26321,\r\n        Thu: 12340,\r\n        Fri: 24643,\r\n        Sat: 1322,\r\n        Sun: 1324\r\n      },\r\n      showCarousel: false,\r\n      jobData: [],\r\n      dataMap: {},\r\n      myBarGraphOption: {},\r\n      majorNodeSetting: {\r\n        loop: false,\r\n        autoplay: false,\r\n        autoplaySpeed: 20000,\r\n        dots: 'none',\r\n        radiusDot: false,\r\n        trigger: 'click',\r\n        arrow: 'hover'\r\n      },\r\n      childNodeSetting: {\r\n        loop: false,\r\n        autoplay: false,\r\n        autoplaySpeed: 20000,\r\n        dots: 'none',\r\n        radiusDot: false,\r\n        trigger: 'click',\r\n        arrow: 'hover'\r\n      },\r\n      setting: {\r\n        loop: false,\r\n        autoplay: false,\r\n        autoplaySpeed: 20000,\r\n        dots: 'none',\r\n        radiusDot: false,\r\n        trigger: 'click',\r\n        arrow: 'hover'\r\n      },\r\n      clusterstats: {},\r\n      majorNodeList: [],\r\n      childNodeList: [],\r\n      platformList: [],\r\n      announcementList: [],\r\n      nodeList: [],\r\n      value1: 0,\r\n      value2: 0,\r\n      value3: 0,\r\n      value4: 0,\r\n      graph7: null,\r\n      graph8: null\r\n    }\r\n  },\r\n  methods: {\r\n    init () {\r\n      this.setting = {\r\n        loop: true,\r\n        autoplay: true,\r\n        autoplaySpeed: 20000,\r\n        dots: 'none',\r\n        radiusDot: false,\r\n        trigger: 'click',\r\n        arrow: 'hover'\r\n      }\r\n      this.getPsjStats()\r\n      this.getClusterStats()\r\n      this.graph8 = this.$echarts.init(document.getElementById('main8'))\r\n      this.graph7 = this.$echarts.init(document.getElementById('main7'))\r\n    },\r\n    getBar () { // 各平台应用作业量\r\n      const sumAllPatformJobConfig = {\r\n        method: 'GET',\r\n        url: RESOURCE_PATH + '/sumAllPatformJob ',\r\n        params: {}\r\n      }\r\n      this.$ajax(sumAllPatformJobConfig).then(resp => {\r\n        if (resp.data) {\r\n          this.jobData = resp.data\r\n          let obj = {}\r\n          let xAxisArr = {}\r\n          for (let i = 1; i <= Math.ceil(this.jobData.length / 10 % 10); i++) {\r\n            let tmp = {}\r\n            tmp[i] = []\r\n            let xAxis = {}\r\n            xAxis[i] = []\r\n            let k = this.jobData.length <= 10 * i ? this.jobData.length : 10 * i\r\n            for (let j = (i - 1) * 10; j < k; j++) {\r\n              tmp[i][j] = {\r\n                name: this.jobData[j].platform,\r\n                value: this.jobData[j].num\r\n              }\r\n              xAxis[i][j] = this.jobData[j].platform\r\n            }\r\n            tmp[i] = tmp[i].filter(d => d)\r\n            Object.assign(obj, tmp)\r\n            xAxis[i] = xAxis[i].filter(d => d)\r\n            Object.assign(xAxisArr, xAxis)\r\n          }\r\n          this.dataMap.jobCount = obj\r\n          this.dataMap.count = Math.ceil(this.jobData.length / 10 % 10)\r\n          this.dataMap.xAxisArr = xAxisArr\r\n          let myBar = this.$echarts.init(document.getElementById('main6'))\r\n          myBar.setOption(this.myBarGraph(this.dataMap))\r\n        }\r\n      })\r\n    },\r\n    myBarGraph (dataMap) {\r\n      let yArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n      this.myBarGraphOption = {\r\n        baseOption: {\r\n          timeline: {\r\n            axisType: 'category',\r\n            autoPlay: true,\r\n            playInterval: 3000,\r\n            data: yArr.splice(0, dataMap.count),\r\n            label: {\r\n              formatter: function (s) {\r\n                return ''\r\n              }\r\n            },\r\n            lineStyle: { // 时间轴\r\n              show: true,\r\n              color: 'rgba(225,225,225,0)'\r\n            },\r\n            checkpointStyle: { // 时间轴上的点\r\n              symbol: 'circle',\r\n              color: '#316bf3',\r\n              borderColor: 'rgba(49,107,243,0.5)'\r\n            },\r\n            controlStyle: { // 控制\r\n              show: false,\r\n              color: '#343434',\r\n              borderColor: '#343434',\r\n              showPlayBtn: false // 播放按钮\r\n            },\r\n            emphasis: {\r\n              controlStyle: { // hover样式\r\n                color: 'rgba(225,225,225,0.8)',\r\n                borderColor: 'rgba(225,225,225,0.8)'\r\n              }\r\n            }\r\n          },\r\n          title: {\r\n            subtext: '' // 小标题,\r\n          },\r\n          tooltip: {\r\n\r\n          },\r\n          legend: {\r\n            left: 'right',\r\n            data: []\r\n          },\r\n          calculable: true,\r\n          grid: {\r\n            top: 50,\r\n            bottom: 80,\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'shadow',\r\n                label: {\r\n                  show: true,\r\n                  formatter: function (params) {\r\n                    return params.value.replace('\\n', '')\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          },\r\n          xAxis: [\r\n            {\r\n              'type': 'category',\r\n              'axisLabel': { 'interval': 0 },\r\n              splitLine: { show: false }\r\n            }\r\n          ],\r\n          yAxis: [\r\n            {\r\n              type: 'value',\r\n              name: '作业数'\r\n            }\r\n          ],\r\n          series: [\r\n            {\r\n              name: '作业数',\r\n              type: 'bar',\r\n              color: '#3858F9',\r\n              barWidth: 30,\r\n              label: {\r\n                show: true,\r\n                position: 'top',\r\n                textStyle: {\r\n                  color: '#3858F9',\r\n                  fontSize: 12\r\n                }\r\n              }\r\n            }\r\n          ]\r\n        },\r\n        options: [\r\n          {\r\n            xAxis: [\r\n              { data: dataMap.xAxisArr[1] }\r\n            ],\r\n            series: [\r\n              { data: dataMap.jobCount[1] }\r\n            ]\r\n          },\r\n          {\r\n            xAxis: [\r\n              { data: dataMap.xAxisArr[2] }\r\n            ],\r\n            series: [\r\n              { data: dataMap.jobCount[2] }\r\n            ]\r\n          },\r\n          {\r\n            xAxis: [\r\n              { data: dataMap.xAxisArr[3] }\r\n            ],\r\n            series: [\r\n              { data: dataMap.jobCount[3] }\r\n            ]\r\n          },\r\n          {\r\n            xAxis: [\r\n              { data: dataMap.xAxisArr[4] }\r\n            ],\r\n            series: [\r\n              { data: dataMap.jobCount[4] }\r\n            ]\r\n          },\r\n          {\r\n            xAxis: [\r\n              { data: dataMap.xAxisArr[5] }\r\n            ],\r\n            series: [\r\n              { data: dataMap.jobCount[5] }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n      return this.myBarGraphOption\r\n    },\r\n    changePlatform (param0, param1) {\r\n      let platform = this.platformList[param1].value\r\n      this.getPlatformconcData(platform) // 平台作业状态折线图\r\n    },\r\n    changeNode (param0, param1) {\r\n      let node = this.nodeList[param1]\r\n      this.getNodeData(node) // 节点作业状态折线图\r\n    },\r\n    // 查询节点名称数据\r\n    queryNodeList () {\r\n      let loadConfig = {\r\n        method: 'GET',\r\n        url: RESOURCE_PATH + '/ListAllWorker'\r\n      }\r\n      this.nodeList = []\r\n      this.haveNode = false\r\n      this.$ajax(loadConfig).then(resp => {\r\n        resp.data.forEach(data => {\r\n          this.nodeList.push(data)\r\n        })\r\n        if (this.nodeList.length == 0) {\r\n          this.haveNode = true\r\n        }\r\n        this.getNodeData(this.nodeList[0])\r\n      })\r\n    },\r\n    queryPlatformList () {\r\n      this.platformList = []\r\n      const loadConfig = {\r\n        method: 'GET',\r\n        url: RESOURCE_PATH + '/ListAllPlatform',\r\n        params: {}\r\n      }\r\n      this.$ajax(loadConfig).then(resp => {\r\n        if (resp.status && resp.status === 200 && resp.data) {\r\n          resp.data.forEach(data1 => {\r\n            let temp = {}\r\n            temp.key = data1\r\n            temp.value = data1\r\n            temp.label = data1\r\n            this.platformList.push(temp)\r\n          })\r\n          this.getPlatformconcData(this.platformList[0].value)\r\n        }\r\n      })\r\n    },\r\n    getNodeData (node) {\r\n      let loadConfig = {\r\n        method: 'GET',\r\n        url: RESOURCE_PATH + '/serverJobStatus',\r\n        params: {\r\n          start: this.nodeStartTime,\r\n          node: node,\r\n          end: this.nodeEndTime\r\n        }\r\n      }\r\n      this.$ajax(loadConfig).then(resp => {\r\n        let option = {\r\n          tooltip: {\r\n            trigger: 'axis'\r\n          },\r\n          legend: {\r\n            data: ['runningNum'],\r\n            top: '7%'\r\n          },\r\n          xAxis: {\r\n            type: 'category',\r\n            data: resp.data.timeList\r\n          },\r\n          yAxis: {\r\n            type: 'value'\r\n          },\r\n          grid: {\r\n            x: 60,\r\n            y: 60,\r\n            x2: 60,\r\n            y2: 60\r\n          },\r\n          series: [{\r\n            data: resp.data.running,\r\n            type: 'line',\r\n            symbol: 'none',\r\n            lineStyle: {\r\n              color: '#3858F9'\r\n            },\r\n            areaStyle: {\r\n              color: {\r\n                type: 'linear',\r\n                x: 0,\r\n                y: 0,\r\n                x2: 0,\r\n                y2: 1,\r\n                colorStops: [\r\n                  { offset: 0, color: '#3858F9' },\r\n                  { offset: 1, color: 'white' }\r\n                ]\r\n              }\r\n            }\r\n          }\r\n          ]\r\n        }\r\n        this.graph8.setOption(option, true)\r\n        this.graph8.resize()\r\n      })\r\n    },\r\n    getPlatformconcData (platform) {\r\n      let loadConfig = {\r\n        method: 'GET',\r\n        url: RESOURCE_PATH + '/platformJobStatus',\r\n        params: {\r\n          start: this.platformStartTime,\r\n          platform: platform,\r\n          end: this.platformEndTime\r\n        }\r\n      }\r\n      this.$ajax(loadConfig).then(resp => {\r\n        let option = {\r\n          tooltip: {\r\n            trigger: 'axis'\r\n          },\r\n          legend: {\r\n            data: ['runningNum', 'dispatcherNum', 'pendingNum'],\r\n            top: '7%',\r\n            x: '5%'\r\n          },\r\n          xAxis: {\r\n            type: 'category',\r\n            data: resp.data['timeList']\r\n          },\r\n          yAxis: {\r\n            type: 'value',\r\n            axisLabel: {\r\n              formatter: '{value}'\r\n            }\r\n          },\r\n          grid: {\r\n            x: 60,\r\n            y: 60,\r\n            x2: 60,\r\n            y2: 60\r\n          },\r\n\r\n          series: [{\r\n            name: 'runningNum',\r\n            data: resp.data['running'],\r\n            type: 'line',\r\n            markPoint: {\r\n              data: [\r\n                { type: 'max', name: '峰值:{value}' }\r\n              ]\r\n            }\r\n          },\r\n          {\r\n            name: 'dispatcherNum',\r\n            data: resp.data['dispatcher'],\r\n            type: 'line',\r\n            markPoint: {\r\n              data: [\r\n                { type: 'max', name: '峰值:{value}' }\r\n              ]\r\n            }\r\n          },\r\n          {\r\n            name: 'pendingNum',\r\n            data: resp.data['pending'],\r\n            type: 'line',\r\n            markPoint: {\r\n              data: [\r\n                { type: 'max', name: '峰值:{value}' }\r\n              ]\r\n            }\r\n          }]\r\n        }\r\n        this.graph7.setOption(option, true)\r\n        this.graph7.resize()\r\n      })\r\n    },\r\n    getPsjStats () {\r\n      const psjStatsConfig = {\r\n        method: 'GET',\r\n        url: RESOURCE_PATH + '/psjStats',\r\n        params: {}\r\n      }\r\n      this.$ajax(psjStatsConfig).then(resp => {\r\n        if (resp.data) {\r\n          let psjStatsKeys = Object.keys(resp.data)\r\n          let psjStatsValues = Object.values(resp.data)\r\n          for (let i = 0; i < this.inforCardData.length; i++) {\r\n            for (let j = 0; j < psjStatsKeys.length; j++) {\r\n              if (psjStatsKeys[j] === this.inforCardData[i].name) {\r\n                this.inforCardData[i].count = psjStatsValues[j]\r\n              }\r\n            }\r\n          }\r\n        }\r\n      })\r\n    },\r\n    getPercent (num, total) {\r\n      num = parseFloat(num)\r\n      total = parseFloat(total)\r\n      if (isNaN(num) || isNaN(total)) {\r\n        return '-'\r\n      }\r\n      return total <= 0 ? 0 : Math.round((num / total) * 10000) / 100.0\r\n    },\r\n    getClusterStats () {\r\n      this.clusterstats = {}\r\n      let workerDataList = []\r\n      let masterDataList = []\r\n      this.majorNodeList = []\r\n      this.childNodeList = []\r\n      const clusterStatsConfig = {\r\n        method: 'GET',\r\n        url: RESOURCE_PATH + '/clusterStats',\r\n        params: {}\r\n      }\r\n      this.$ajax(clusterStatsConfig).then(resp => {\r\n        if (resp.data) {\r\n          let data = resp.data\r\n          for (let i = 0; i < data.length; i++) {\r\n            if (i === data.length - 1) {\r\n              this.clusterstats = JSON.parse(data[i].clusterstats)\r\n              this.clusterstats.serverPercent = this.getPercent(this.clusterstats.runservernum, this.clusterstats.allservernum)\r\n              this.clusterstats.cpuPercent = this.getPercent(this.clusterstats.usedclustercpu, this.clusterstats.allclustercpu)\r\n              this.clusterstats.memoryPercent = this.getPercent(this.clusterstats.usedclustermem, this.clusterstats.allclustermem)\r\n              this.clusterstats.usedclustermem = this.getTwoNumber(this.clusterstats.usedclustermem)\r\n              this.clusterstats.allservernum = this.getTwoNumber(this.clusterstats.allservernum)\r\n              this.clusterstats.usedclustercpu = this.getTwoNumber(this.clusterstats.usedclustercpu)\r\n              this.clusterstats.allclustercpu = this.getTwoNumber(this.clusterstats.allclustercpu)\r\n              this.clusterstats.usedclustermem = this.getTwoNumber(this.clusterstats.usedclustermem)\r\n              this.clusterstats.allclustermem = this.getTwoNumber(this.clusterstats.allclustermem)\r\n              break\r\n            }\r\n            if (data[i].type === 'Worker-Server') {\r\n              let worderData = data[i]\r\n              worderData.cpuPercent = this.getPercent(worderData.usedcpu, worderData.allcpu)\r\n              worderData.memoryPercent = this.getPercent(worderData.usedmem, worderData.allmem)\r\n\r\n              worderData.usedcpu = this.getTwoNumber(worderData.usedcpu)\r\n              worderData.allcpu = this.getTwoNumber(worderData.allcpu)\r\n\r\n              worderData.usedmem = this.getTwoNumber(worderData.usedmem)\r\n              worderData.allmem = this.getTwoNumber(worderData.allmem)\r\n              workerDataList.push(worderData)\r\n            }\r\n            if (data[i].type === 'Master-Server') {\r\n              let masterData = data[i]\r\n              masterData.cpuPercent = this.getPercent(masterData.usedcpu, masterData.allcpu)\r\n              masterData.memoryPercent = this.getPercent(masterData.usedmem, masterData.allmem)\r\n\r\n              masterData.usedcpu = this.getTwoNumber(masterData.usedcpu)\r\n              masterData.allcpu = this.getTwoNumber(masterData.allcpu)\r\n\r\n              masterData.usedmem = this.getTwoNumber(masterData.usedmem)\r\n              masterData.allmem = this.getTwoNumber(masterData.allmem)\r\n              masterDataList.push(masterData)\r\n            }\r\n          }\r\n          this.getMajorNodeList(masterDataList)\r\n          this.getChildNodeList(workerDataList)\r\n          this.showCarousel = true\r\n        }\r\n      })\r\n    },\r\n    getTwoNumber (num) {\r\n      var s = num + ''\r\n      if (s.indexOf('.')) {\r\n        var str = s.substring(0, s.indexOf('.') + 3)\r\n        return str\r\n      } else {\r\n        return str\r\n      }\r\n    },\r\n    getMajorNodeList (majorNodeData) {\r\n      for (let i = 0; i < majorNodeData.length; i = i + 2) {\r\n        let majorNode = []\r\n        majorNode.push(majorNodeData[i])\r\n        if (majorNodeData.length > i + 1) {\r\n          majorNode.push(majorNodeData[i + 1])\r\n        }\r\n        this.majorNodeList.push(majorNode)\r\n      }\r\n      console.log(this.majorNodeList)\r\n    },\r\n    getChildNodeList (childNodeData) {\r\n      for (let i = 0; i < childNodeData.length; i = i + 2) {\r\n        let childNode = []\r\n        childNode.push(childNodeData[i])\r\n        if (childNodeData.length > i + 1) {\r\n          childNode.push(childNodeData[i + 1])\r\n        }\r\n        this.childNodeList.push(childNode)\r\n      }\r\n    },\r\n    platformSearch (type) {\r\n      this.timeFormBean.show = true\r\n      this.timeFormBean.type = type\r\n      if (type === 'platform') {\r\n        this.timeFormBean.title = '平台作业时间筛选'\r\n        this.timeFormBean.startTime = this.platformStartTime\r\n        this.timeFormBean.endTime = this.platformEndTime\r\n      } else {\r\n        this.timeFormBean.title = '节点作业时间筛选'\r\n        this.timeFormBean.startTime = this.nodeStartTime\r\n        this.timeFormBean.endTime = this.nodeEndTime\r\n      }\r\n    },\r\n    timeSave () {\r\n      let starttime = this.timeFormBean.startTime\r\n      let endtime = this.timeFormBean.endTime\r\n      let t = (endtime - starttime) / (1000 * 3600)\r\n      if (starttime === '') {\r\n        this.$Message.warning('请输入开始时间')\r\n      } else if (endtime === '') {\r\n        this.$Message.warning('请输入结束时间')\r\n      } else if (starttime > endtime) {\r\n        this.$Message.warning('开始时间大于结束时间')\r\n      } else if (t > 3) {\r\n        this.$Message.warning('时间差值超过3小时')\r\n      } else {\r\n        this.timeFormBean.show = false\r\n        if (this.timeFormBean.type === 'platform') {\r\n          this.platformStartTime = utils.fmtDate(this.timeFormBean.startTime, 'yyyy-MM-dd hh:mm:ss')\r\n          this.platformEndTime = utils.fmtDate(this.timeFormBean.endTime, 'yyyy-MM-dd hh:mm:ss')\r\n          this.getPlatformconcData(this.platformList[this.value1].value) // 平台作业状态折线图\r\n        } else {\r\n          this.nodeStartTime = utils.fmtDate(this.timeFormBean.startTime, 'yyyy-MM-dd hh:mm:ss')\r\n          this.nodeEndTime = utils.fmtDate(this.timeFormBean.endTime, 'yyyy-MM-dd hh:mm:ss')\r\n          this.getNodeData(this.nodeList[this.value2])\r\n        }\r\n      }\r\n    }\r\n  },\r\n  mounted () {\r\n    this.init()\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n.count-style{\r\n  font-size: 32px;\r\n  color: #FFFFFF;\r\n}\r\n.count-style-black{\r\n  font-size: 32px;\r\n  color: #0B1131;\r\n}\r\n.carousel-title {\r\n  margin-left: 5%;\r\n  color:#516b91;\r\n  font-size:18px;\r\n  font-weight:600\r\n}\r\n.show-one {\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden\r\n}\r\n.circlr-dot {\r\n    width: 5px;\r\n    height: 5px;\r\n    border-radius: 50%;\r\n    vertical-align: middle;\r\n    margin-right: 4px;\r\n    display: inline-block\r\n}\r\n.circle-title {\r\n  font-size: 14px;\r\n  color: #000000;\r\n  font-weight: 400;\r\n}\r\n.circle-row {\r\n  background:#F8FAFD;\r\n  height:100px;\r\n  margin-top:10px\r\n}\r\n</style>\r\n"]}]}