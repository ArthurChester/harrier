{"remainingRequest":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\components\\s-tree-table\\cell.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\components\\s-tree-table\\cell.vue","mtime":1681468306476},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport Cell from \"./expand\";\r\nimport Icon from \"iview/src/components/icon/icon.vue\";\r\nimport Checkbox from \"iview/src/components/checkbox/checkbox.vue\";\r\n\r\nexport default {\r\n  name: \"TableCell\",\r\n  components: { Icon, Checkbox, Cell },\r\n  props: {\r\n    prefixCls: String,\r\n    row: Object,\r\n    column: Object,\r\n    naturalIndex: Number, // index of rebuildData\r\n    index: Number, // _index of data\r\n    checked: Boolean,\r\n    disabled: Boolean,\r\n    expanded: Boolean,\r\n    folded: Boolean,\r\n    parentlevel: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    fixed: {\r\n      type: [Boolean, String],\r\n      default: false\r\n    },\r\n    addShow:Boolean\r\n  },\r\n  data() {\r\n    return {\r\n      renderType: \"\",\r\n      uid: -1,\r\n      context: this.$parent.$parent.$parent.currentContext\r\n    };\r\n  },\r\n  computed: {\r\n    parentLevelIndent() {\r\n      return { \"text-indent\": this.parentlevel*0.5+\"em\" };\r\n    },\r\n    classes() {\r\n      return [\r\n        `${this.prefixCls}-cell`,\r\n        {\r\n          [`${this.prefixCls}-hidden`]:\r\n            !this.fixed &&\r\n            this.column.fixed &&\r\n            (this.column.fixed === \"left\" || this.column.fixed === \"right\"),\r\n          [`${this.prefixCls}-cell-ellipsis`]: this.column.ellipsis || false,\r\n          [`${this.prefixCls}-cell-with-expand`]: this.renderType === \"expand\"\r\n        }\r\n      ];\r\n    },\r\n    expandCls() {\r\n      return [\r\n        `${this.prefixCls}-cell-expand`,\r\n        {\r\n          [`${this.prefixCls}-cell-expand-expanded`]: this.expanded\r\n        }\r\n      ];\r\n    }\r\n  },\r\n  methods: {\r\n    toggleSelect() {\r\n      this.$parent.$parent.$parent.toggleSelect(this.index);\r\n    },\r\n    toggleExpand() {\r\n      this.$parent.$parent.$parent.toggleExpand(this.index);\r\n    },\r\n    toggleTree() {\r\n      this.$parent.$parent.$parent.toggleTree(this.index);\r\n    },\r\n    handleClick() {\r\n      // 放置 Checkbox 冒泡\r\n    }\r\n  },\r\n  created() {\r\n    if (this.column.type === \"index\") {\r\n      this.renderType = \"index\";\r\n    } else if (this.column.type === \"selection\") {\r\n      this.renderType = \"selection\";\r\n    } else if (this.column.type === \"html\") {\r\n      this.renderType = \"html\";\r\n    } else if (this.column.type === \"expand\") {\r\n      this.renderType = \"expand\";\r\n    } else if (this.column.render) {\r\n      this.renderType = \"render\";\r\n    } else if (this.column.type === \"tree\") {\r\n      this.renderType = \"tree\";\r\n    } else {\r\n      this.renderType = \"normal\";\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["cell.vue"],"names":[],"mappings":";AA6BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"cell.vue","sourceRoot":"src/components/s-tree-table","sourcesContent":["<template>\r\n    <div :class=\"classes\" ref=\"cell\">\r\n        <template v-if=\"renderType === 'index'\">{{naturalIndex + 1}}</template>\r\n        <template v-if=\"renderType === 'selection'\">\r\n            <Checkbox :value=\"checked\" @click.native.stop=\"handleClick\" @on-change=\"toggleSelect\" :disabled=\"disabled\"></Checkbox>\r\n        </template>\r\n        <template v-if=\"renderType === 'html'\"><span v-html=\"row[column.key]\"></span></template>\r\n        <template v-if=\"renderType === 'normal'\"><span>{{row[column.key]}}</span></template>\r\n        <template v-if=\"renderType === 'expand' && !row._disableExpand\">\r\n            <div :class=\"expandCls\" @click=\"toggleExpand\">\r\n                <Icon type=\"ios-arrow-right\"></Icon>\r\n            </div>\r\n        </template>\r\n        <!--增加列的Tree节点属性-->\r\n        <template v-if=\"renderType === 'tree'\">\r\n            <div :class=\"expandCls\" @click=\"toggleTree\" :style=\"parentLevelIndent\" v-show=\"addShow\">\r\n                <Icon v-if=\"this.folded\" type=\"android-add\"></Icon>\r\n                <Icon v-else type=\"ios-minus-empty\"></Icon>\r\n            </div>\r\n        </template>\r\n        <Cell\r\n            v-if=\"renderType === 'render'\"\r\n            :row=\"row\"\r\n            :column=\"column\"\r\n            :index=\"index\"\r\n            :render=\"column.render\"></Cell>\r\n    </div>\r\n</template>\r\n<script>\r\nimport Cell from \"./expand\";\r\nimport Icon from \"iview/src/components/icon/icon.vue\";\r\nimport Checkbox from \"iview/src/components/checkbox/checkbox.vue\";\r\n\r\nexport default {\r\n  name: \"TableCell\",\r\n  components: { Icon, Checkbox, Cell },\r\n  props: {\r\n    prefixCls: String,\r\n    row: Object,\r\n    column: Object,\r\n    naturalIndex: Number, // index of rebuildData\r\n    index: Number, // _index of data\r\n    checked: Boolean,\r\n    disabled: Boolean,\r\n    expanded: Boolean,\r\n    folded: Boolean,\r\n    parentlevel: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    fixed: {\r\n      type: [Boolean, String],\r\n      default: false\r\n    },\r\n    addShow:Boolean\r\n  },\r\n  data() {\r\n    return {\r\n      renderType: \"\",\r\n      uid: -1,\r\n      context: this.$parent.$parent.$parent.currentContext\r\n    };\r\n  },\r\n  computed: {\r\n    parentLevelIndent() {\r\n      return { \"text-indent\": this.parentlevel*0.5+\"em\" };\r\n    },\r\n    classes() {\r\n      return [\r\n        `${this.prefixCls}-cell`,\r\n        {\r\n          [`${this.prefixCls}-hidden`]:\r\n            !this.fixed &&\r\n            this.column.fixed &&\r\n            (this.column.fixed === \"left\" || this.column.fixed === \"right\"),\r\n          [`${this.prefixCls}-cell-ellipsis`]: this.column.ellipsis || false,\r\n          [`${this.prefixCls}-cell-with-expand`]: this.renderType === \"expand\"\r\n        }\r\n      ];\r\n    },\r\n    expandCls() {\r\n      return [\r\n        `${this.prefixCls}-cell-expand`,\r\n        {\r\n          [`${this.prefixCls}-cell-expand-expanded`]: this.expanded\r\n        }\r\n      ];\r\n    }\r\n  },\r\n  methods: {\r\n    toggleSelect() {\r\n      this.$parent.$parent.$parent.toggleSelect(this.index);\r\n    },\r\n    toggleExpand() {\r\n      this.$parent.$parent.$parent.toggleExpand(this.index);\r\n    },\r\n    toggleTree() {\r\n      this.$parent.$parent.$parent.toggleTree(this.index);\r\n    },\r\n    handleClick() {\r\n      // 放置 Checkbox 冒泡\r\n    }\r\n  },\r\n  created() {\r\n    if (this.column.type === \"index\") {\r\n      this.renderType = \"index\";\r\n    } else if (this.column.type === \"selection\") {\r\n      this.renderType = \"selection\";\r\n    } else if (this.column.type === \"html\") {\r\n      this.renderType = \"html\";\r\n    } else if (this.column.type === \"expand\") {\r\n      this.renderType = \"expand\";\r\n    } else if (this.column.render) {\r\n      this.renderType = \"render\";\r\n    } else if (this.column.type === \"tree\") {\r\n      this.renderType = \"tree\";\r\n    } else {\r\n      this.renderType = \"normal\";\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n"]}]}