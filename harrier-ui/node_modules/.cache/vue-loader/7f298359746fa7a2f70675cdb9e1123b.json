{"remainingRequest":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\view\\spdb\\job\\jobList\\jobimgs\\lineage.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\view\\spdb\\job\\jobList\\jobimgs\\lineage.vue","mtime":1681468306541},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\n\r\nimport elementResizeDetectorMaker from 'element-resize-detector'\r\n\r\nexport default {\r\n  props: {\r\n    transData: {\r\n      type: Object,\r\n      default: function () {\r\n        return {}\r\n      }\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      // platformCnt: 0,\r\n      systemCnt: -1,\r\n      jobCnt: -1,\r\n      nodeColors: [ // { color: '#187a2f' }, { color: '#5e9a80' },\r\n        { color: '#0aa3b5' }, { color: '#76c0cb' }, { color: '#9db2b7' }, { color: '#caa465' }, { color: '#be8663' }, { color: '#dd4c51' }, { color: '#d45a59' }, { color: '#d0545f' }, { color: '#e75b68' }, { color: '#f37674' }, { color: '#f7a128' }, { color: '#ebb40f' }, { color: '#e1c315' }, { color: '#b09733' }, { color: '#a2b029' }, { color: '#3aa255' }\r\n      ],\r\n      graph: null,\r\n      option: {\r\n        tooltip: {\r\n          formatter: function (value) {\r\n            return value.name\r\n          }\r\n        },\r\n        series: {\r\n          type: 'sunburst',\r\n          center: ['50%', '50%'],\r\n          radius: [0, '95%'], // 半径\r\n          // sort: null,\r\n          emphasis: {\r\n            itemStyle: {\r\n              focus: 'ancestor' // descendant ancestor\r\n            }\r\n          },\r\n          levels: [{}, {\r\n            r0: '15%',\r\n            r: '55%',\r\n            itemStyle: {\r\n              borderWidth: 4\r\n            }\r\n          }, {\r\n            r0: '55%',\r\n            r: '60%',\r\n            itemStyle: {\r\n              borderWidth: 4\r\n            },\r\n            label: {\r\n              color: '#2f4554',\r\n              position: 'outside',\r\n              padding: 3\r\n              // silent: false\r\n            }\r\n          }],\r\n          data: this.jobLineageData,\r\n          label: {\r\n            rotate: 'radial',\r\n            formatter: function (param) {\r\n              let depth = param.treePathInfo.length\r\n              if (depth === 3) {\r\n                let jobNameEn = param.name\r\n                // return jobNameEn\r\n                // let jobNameEn = ''\r\n                let half = jobNameEn.length / 2\r\n                return jobNameEn.substring(0, half) + '\\n' + jobNameEn.substring(half)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n    }\r\n  },\r\n  methods: {\r\n    init () {\r\n      this.graph = this.$echarts.init(document.getElementById('maind'))\r\n      this.getData(this.transData.jobData)\r\n    },\r\n    getData (jobData) {\r\n      let params = {}\r\n      params.platform = jobData.platform\r\n      // params.system = jobData.system\r\n      params.job = jobData.job\r\n      let loadConfig = {\r\n        method: 'GET',\r\n        url: '/jobimg/upjobs',\r\n        params: params\r\n      }\r\n      this.$ajax(loadConfig)\r\n        .then(resp => {\r\n          this.formatData(resp.data)\r\n        })\r\n    },\r\n    formatData (upJobData) {\r\n      this.jobCnt = upJobData.length\r\n      let node = []\r\n      let index = 0\r\n      let systemNameArr = []\r\n      if (upJobData) {\r\n        for (let i = 0; i < upJobData.length; i++) {\r\n          let platindex = upJobData[i].indexOf('_')\r\n          let sysindex = upJobData[i].indexOf('_', platindex + 1)\r\n          let systemName = upJobData[i].substring(platindex + 1, sysindex)\r\n          index = i\r\n          while (index > 17) {\r\n            index = index - 18\r\n          }\r\n          if (systemNameArr.indexOf(systemName) === -1) {\r\n            let nodeTemp = { name: systemName, itemStyle: this.nodeColors[index] }\r\n            systemNameArr.push(systemName)\r\n            node.push(nodeTemp)\r\n          }\r\n        }\r\n        this.systemCnt = systemNameArr.length\r\n        this.formatChild(upJobData, node)\r\n      }\r\n    },\r\n    formatChild (upJobData, node) {\r\n      let maxNum = node.length\r\n      if (node.length > 10) { // 平台数\r\n        maxNum = 10\r\n      }\r\n      for (let i = 0; i < maxNum; i++) {\r\n        let childrenArr = []\r\n        let index = 0\r\n        for (let j = 0; j < upJobData.length; j++) {\r\n          let systemName = upJobData[j].substring(upJobData[j].indexOf('_') + 1, upJobData[j].indexOf('_', upJobData[j].indexOf('_') + 1))\r\n          index = j\r\n          while (index > 17) {\r\n            index = index - 18\r\n          }\r\n          if (node[i].name === systemName) {\r\n            let obj = {\r\n              name: upJobData[j],\r\n              value: 1,\r\n              itemStyle: this.nodeColors[index]\r\n            }\r\n            childrenArr.push(obj)\r\n            if (childrenArr.length > 2) { // 应用数\r\n              break\r\n            }\r\n          }\r\n        }\r\n        node[i].children = childrenArr\r\n      }\r\n      this.option['series']['data'] = node// node\r\n      this.graph.setOption(this.option)\r\n      window.addEventListener('resize', () => {\r\n        this.graph.resize()\r\n      })\r\n      const _this = this\r\n      let erd = elementResizeDetectorMaker()\r\n      erd.listenTo(this.$refs.lineage, () => {\r\n        _this.$nextTick(() => {\r\n          _this.graph.resize()\r\n        })\r\n      })\r\n    },\r\n    getSumData () {\r\n      let tmp = {}\r\n      tmp.systemCnt = this.systemCnt\r\n      tmp.jobCnt = this.jobCnt\r\n      return tmp\r\n      // let str = '总共' + this.systemCnt + '个系统' + this.jobCnt + '个作业'\r\n      // return str\r\n    }\r\n  },\r\n  mounted () {\r\n    this.init()\r\n  }\r\n}\r\n",{"version":3,"sources":["lineage.vue"],"names":[],"mappingsfile":"lineage.vue","sourceRoot":"src/view/spdb/job/jobList/jobimgs","sourcesContent":["<template>\r\n  <div id=\"maind\" ref=\"lineage\" ></div>\r\n</template>\r\n<script>\r\n\r\nimport elementResizeDetectorMaker from 'element-resize-detector'\r\n\r\nexport default {\r\n  props: {\r\n    transData: {\r\n      type: Object,\r\n      default: function () {\r\n        return {}\r\n      }\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      // platformCnt: 0,\r\n      systemCnt: -1,\r\n      jobCnt: -1,\r\n      nodeColors: [ // { color: '#187a2f' }, { color: '#5e9a80' },\r\n        { color: '#0aa3b5' }, { color: '#76c0cb' }, { color: '#9db2b7' }, { color: '#caa465' }, { color: '#be8663' }, { color: '#dd4c51' }, { color: '#d45a59' }, { color: '#d0545f' }, { color: '#e75b68' }, { color: '#f37674' }, { color: '#f7a128' }, { color: '#ebb40f' }, { color: '#e1c315' }, { color: '#b09733' }, { color: '#a2b029' }, { color: '#3aa255' }\r\n      ],\r\n      graph: null,\r\n      option: {\r\n        tooltip: {\r\n          formatter: function (value) {\r\n            return value.name\r\n          }\r\n        },\r\n        series: {\r\n          type: 'sunburst',\r\n          center: ['50%', '50%'],\r\n          radius: [0, '95%'], // 半径\r\n          // sort: null,\r\n          emphasis: {\r\n            itemStyle: {\r\n              focus: 'ancestor' // descendant ancestor\r\n            }\r\n          },\r\n          levels: [{}, {\r\n            r0: '15%',\r\n            r: '55%',\r\n            itemStyle: {\r\n              borderWidth: 4\r\n            }\r\n          }, {\r\n            r0: '55%',\r\n            r: '60%',\r\n            itemStyle: {\r\n              borderWidth: 4\r\n            },\r\n            label: {\r\n              color: '#2f4554',\r\n              position: 'outside',\r\n              padding: 3\r\n              // silent: false\r\n            }\r\n          }],\r\n          data: this.jobLineageData,\r\n          label: {\r\n            rotate: 'radial',\r\n            formatter: function (param) {\r\n              let depth = param.treePathInfo.length\r\n              if (depth === 3) {\r\n                let jobNameEn = param.name\r\n                // return jobNameEn\r\n                // let jobNameEn = ''\r\n                let half = jobNameEn.length / 2\r\n                return jobNameEn.substring(0, half) + '\\n' + jobNameEn.substring(half)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n    }\r\n  },\r\n  methods: {\r\n    init () {\r\n      this.graph = this.$echarts.init(document.getElementById('maind'))\r\n      this.getData(this.transData.jobData)\r\n    },\r\n    getData (jobData) {\r\n      let params = {}\r\n      params.platform = jobData.platform\r\n      // params.system = jobData.system\r\n      params.job = jobData.job\r\n      let loadConfig = {\r\n        method: 'GET',\r\n        url: '/jobimg/upjobs',\r\n        params: params\r\n      }\r\n      this.$ajax(loadConfig)\r\n        .then(resp => {\r\n          this.formatData(resp.data)\r\n        })\r\n    },\r\n    formatData (upJobData) {\r\n      this.jobCnt = upJobData.length\r\n      let node = []\r\n      let index = 0\r\n      let systemNameArr = []\r\n      if (upJobData) {\r\n        for (let i = 0; i < upJobData.length; i++) {\r\n          let platindex = upJobData[i].indexOf('_')\r\n          let sysindex = upJobData[i].indexOf('_', platindex + 1)\r\n          let systemName = upJobData[i].substring(platindex + 1, sysindex)\r\n          index = i\r\n          while (index > 17) {\r\n            index = index - 18\r\n          }\r\n          if (systemNameArr.indexOf(systemName) === -1) {\r\n            let nodeTemp = { name: systemName, itemStyle: this.nodeColors[index] }\r\n            systemNameArr.push(systemName)\r\n            node.push(nodeTemp)\r\n          }\r\n        }\r\n        this.systemCnt = systemNameArr.length\r\n        this.formatChild(upJobData, node)\r\n      }\r\n    },\r\n    formatChild (upJobData, node) {\r\n      let maxNum = node.length\r\n      if (node.length > 10) { // 平台数\r\n        maxNum = 10\r\n      }\r\n      for (let i = 0; i < maxNum; i++) {\r\n        let childrenArr = []\r\n        let index = 0\r\n        for (let j = 0; j < upJobData.length; j++) {\r\n          let systemName = upJobData[j].substring(upJobData[j].indexOf('_') + 1, upJobData[j].indexOf('_', upJobData[j].indexOf('_') + 1))\r\n          index = j\r\n          while (index > 17) {\r\n            index = index - 18\r\n          }\r\n          if (node[i].name === systemName) {\r\n            let obj = {\r\n              name: upJobData[j],\r\n              value: 1,\r\n              itemStyle: this.nodeColors[index]\r\n            }\r\n            childrenArr.push(obj)\r\n            if (childrenArr.length > 2) { // 应用数\r\n              break\r\n            }\r\n          }\r\n        }\r\n        node[i].children = childrenArr\r\n      }\r\n      this.option['series']['data'] = node// node\r\n      this.graph.setOption(this.option)\r\n      window.addEventListener('resize', () => {\r\n        this.graph.resize()\r\n      })\r\n      const _this = this\r\n      let erd = elementResizeDetectorMaker()\r\n      erd.listenTo(this.$refs.lineage, () => {\r\n        _this.$nextTick(() => {\r\n          _this.graph.resize()\r\n        })\r\n      })\r\n    },\r\n    getSumData () {\r\n      let tmp = {}\r\n      tmp.systemCnt = this.systemCnt\r\n      tmp.jobCnt = this.jobCnt\r\n      return tmp\r\n      // let str = '总共' + this.systemCnt + '个系统' + this.jobCnt + '个作业'\r\n      // return str\r\n    }\r\n  },\r\n  mounted () {\r\n    this.init()\r\n  }\r\n}\r\n</script>\r\n"]}]}