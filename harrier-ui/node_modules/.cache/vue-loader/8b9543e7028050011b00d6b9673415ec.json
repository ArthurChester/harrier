{"remainingRequest":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\view\\app\\alarm\\alarmusergroup\\Form.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\view\\app\\alarm\\alarmusergroup\\Form.vue","mtime":1681468306503},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nconst RESOURCE_PATH = '/alarm/group'\r\n\r\nexport default {\r\n  props: {\r\n    transData: {\r\n      type: Object,\r\n      default: function () {\r\n        return {}\r\n      }\r\n    }\r\n  },\r\n  data () {\r\n    const checkEmail = (rule, value, callback) => {\r\n      if (value) {\r\n        let reg = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})(,([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4}))*$/\r\n        if (!reg.test(value)) {\r\n          callback(new Error('电子邮件格式不正确'))\r\n        } else {\r\n          callback()\r\n        }\r\n\r\n      } else {\r\n        callback(new Error('请输入数据'))\r\n      }\r\n    }\r\n    return {\r\n      formBean: {},\r\n      loading: false,\r\n      sendTypeList: [],\r\n      sendTypeDataBean: {},\r\n      sendTypeBean: {},\r\n      customParams: [],\r\n      showSendTypeData: [],\r\n      showSendType: false,\r\n      platformData: [],\r\n      alarmTypeData: [],\r\n      codeTypeData: [],\r\n      serverityTypeData: [],\r\n      jobTypeData: [],\r\n      noticeObjData: [],\r\n      model1: [],\r\n      isEdit: false,\r\n      noticeTypeData: [{ label: '邮件', value: 'email' }],\r\n\r\n      sendTypeformRule: {\r\n        receivers: [{\r\n          required: true,\r\n          validator: checkEmail,\r\n          trigger: 'blur'\r\n        }],\r\n        receiverCcs: [{\r\n          required: true,\r\n          validator: checkEmail,\r\n          trigger: 'blur'\r\n        }],\r\n        sender: [{\r\n          required: true,\r\n          validator: checkEmail,\r\n          trigger: 'blur'\r\n        }],\r\n        user: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }],\r\n        passwd: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }],\r\n        serverHost: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }],\r\n        serverPort: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }],\r\n        url: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }],\r\n        headerParams: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }],\r\n        bodyParams: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }],\r\n        requestType: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }],\r\n        contentField: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }]\r\n      },\r\n      formRule: {\r\n        platform: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }],\r\n        systems: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }],\r\n        groupName: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }],\r\n        sendType: [{\r\n          required: true,\r\n          message: '请选择'\r\n        }],\r\n        sendParams: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }]\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    /**\r\n     * 初始化\r\n     **/\r\n    init () {\r\n      if (this.transData.row) { // 如果传过来的存在ID则说明是编辑功能跳转过来\r\n        this.formBean = Object.assign({}, this.transData.row)\r\n        console.log(this.formBean)\r\n        this.getsendTypeList(this.formBean.id)\r\n      } else {\r\n        this.bindData()\r\n        this.getsendTypeList()\r\n      }\r\n      // this.queryCodeType()\r\n      this.queryPlatform()\r\n      // this.queryNoticeObj()\r\n      // this.queryJobType()\r\n      // this.queryServerityType()\r\n      // this.queryAlarmType()\r\n    },\r\n    addParams () {\r\n      let param = { key: '', value: '' }\r\n      this.customParams.push(param)\r\n\r\n    },\r\n    delParams (i) {\r\n      this.customParams.splice(i, 1)\r\n    },\r\n    getsendTypeList (id) {\r\n      let httpConfig = {\r\n        method: 'GET',\r\n        url: RESOURCE_PATH + '/sendType'\r\n      }\r\n      this.$ajax(httpConfig)\r\n        .then(resp => {\r\n          if (resp.data) {\r\n            this.sendTypeList = []\r\n            let keys = Object.keys(resp.data)\r\n            let values = Object.values(resp.data)\r\n            for (let i = 0; i < keys.length; i++) {\r\n              let valueData = values[i]\r\n              let sendType = keys[i].split(';')\r\n              this.sendTypeList.push(sendType)\r\n              this.sendTypeDataBean[sendType[0]] = valueData\r\n            }\r\n            if (id) {\r\n              // 编辑页面进来\r\n              let oldSendType = JSON.parse(this.formBean.sendParams)\r\n              this.showSendTypeData = this.sendTypeDataBean[this.formBean.sendType]\r\n              console.log(this.showSendTypeData)\r\n              // 循环取出自定义的key和系统中的key\r\n              let oldSendTypeKeys = Object.keys(oldSendType)\r\n              for (let i = 0; i < oldSendTypeKeys.length; i++) {\r\n                let key = oldSendTypeKeys[i]\r\n                let haveData = false\r\n                for (let j = 0; j < this.showSendTypeData.length; j++) {\r\n                  if (key === this.showSendTypeData[j][1]) {\r\n                    haveData = true\r\n                    break\r\n                  }\r\n                }\r\n                if (haveData) {\r\n                  this.sendTypeBean[key] = oldSendType[key]\r\n                } else {\r\n                  let param = { key: key, value: oldSendType[key] }\r\n                  this.customParams.push(param)\r\n                }\r\n              }\r\n              this.showSendType = true\r\n            }\r\n          }\r\n        })\r\n    },\r\n    sendTypeChange (sendType) {\r\n      this.showSendType = false\r\n      this.sendTypeBean = {}\r\n      this.showSendTypeData = this.sendTypeDataBean[sendType]\r\n      this.showSendType = true\r\n      this.customParams = []\r\n      this.$forceUpdate()\r\n    },\r\n    /**\r\n     * 如果传过来的有初始数据则进行数据绑定\r\n     **/\r\n    bindData () {\r\n      try {\r\n        this.formBean = Object.assign({}, this.transData.initFormBean)\r\n      } catch (error) {\r\n        console.error(error)\r\n      }\r\n    },\r\n    /**\r\n     * 保存表单\r\n     **/\r\n    save () {\r\n      this.$refs.alarmUserGroupForm.validate(valid => {\r\n        if (!valid) return\r\n        this.$refs.sendTypeForm.validate(typeValid => {\r\n          if (!typeValid) return\r\n          let str = this.model1\r\n          // if(''==this.model1){\r\n          // this.$Message.error('未填写通知对象');\r\n          // return;\r\n          // }\r\n          this.formBean.noticeObj = str.join()\r\n          let params = {}\r\n          params.authps = this.formBean.platform + '*'\r\n          Object.assign(params, this.formBean)\r\n          for (let i = 0; i < this.customParams.length; i++) {\r\n            let customParam = this.customParams[i]\r\n            this.sendTypeBean[customParam.key + ' '] = customParam.value\r\n          }\r\n          params.sendParams = JSON.stringify(this.sendTypeBean)\r\n          let httpConfig = {\r\n            url: RESOURCE_PATH,\r\n            data: params\r\n          }\r\n          if (this.transData.row) {\r\n            httpConfig.method = 'POST'\r\n            httpConfig.url = RESOURCE_PATH + '/update'\r\n          } else {\r\n            httpConfig.url = RESOURCE_PATH + '/add'\r\n            httpConfig.method = 'PUT'\r\n          }\r\n          this.loading = true\r\n          this.$ajax(httpConfig)\r\n            .then(resp => {\r\n              this.cancel()\r\n            })\r\n        })   \r\n      })\r\n    },\r\n    filterMethod (value, option) {\r\n      return option.toUpperCase().indexOf(value.toUpperCase()) !== -1\r\n    },\r\n    queryPlatform () {\r\n      let loadConfig = {\r\n        method: 'GET',\r\n        url: '/udsSystem/listQuery'\r\n        // params: { systems: '*' }\r\n      }\r\n      this.$ajax(loadConfig)\r\n        .then(resp => {\r\n          // resp.data.forEach(data => {\r\n          //   let tmp = {}\r\n          //   tmp.value = data\r\n          //   tmp.label = data\r\n          //   this.platformData.push(tmp)\r\n          // })\r\n          console.log(resp)\r\n          // this.platformData = resp.data\r\n        })\r\n    },\r\n    queryAlarmType () {\r\n      this.alarmTypeData = []\r\n      let params = { dictcode: 'm_alarm_type' }\r\n      const loadConfig = {\r\n        method: 'GET',\r\n        url: 'file/loadList',\r\n        params: params\r\n      }\r\n      this.$ajax(loadConfig)\r\n        .then(resp => {\r\n          if (resp.data) {\r\n            resp.data.forEach(data1 => {\r\n              let temp = {}\r\n              temp.key = data1.dicName\r\n              temp.value = data1.dicValue\r\n              temp.label = data1.dicName\r\n              this.alarmTypeData.push(temp)\r\n            })\r\n          }\r\n        })\r\n    },\r\n    queryServerityType () {\r\n      this.serverityTypeData = []\r\n      let params = { dictcode: 'm_alarm_level' }\r\n      const loadConfig = {\r\n        method: 'GET',\r\n        url: 'file/loadList',\r\n        params: params\r\n      }\r\n      this.$ajax(loadConfig)\r\n        .then(resp => {\r\n          if (resp.data) {\r\n            resp.data.forEach(data1 => {\r\n              let temp = {}\r\n              temp.key = data1.dicName\r\n              temp.value = data1.dicValue\r\n              temp.label = data1.dicName\r\n              this.serverityTypeData.push(temp)\r\n            })\r\n          }\r\n        })\r\n    },\r\n    queryJobType () {\r\n      this.jobTypeData = []\r\n      let params = { dictcode: 'm_alarm_bus_type' }\r\n      const loadConfig = {\r\n        method: 'GET',\r\n        url: 'file/loadList',\r\n        params: params\r\n      }\r\n      this.$ajax(loadConfig)\r\n        .then(resp => {\r\n          if (resp.data) {\r\n            resp.data.forEach(data1 => {\r\n              let temp = {}\r\n              temp.key = data1.dicName\r\n              temp.value = data1.dicValue\r\n              temp.label = data1.dicName\r\n              this.jobTypeData.push(temp)\r\n            })\r\n          }\r\n        })\r\n    },\r\n    queryNoticeObj () {\r\n      this.noticeObjData = []\r\n      let params = { dictcode: 'm_alarm_not' }\r\n      const loadConfig = {\r\n        method: 'GET',\r\n        url: 'file/loadList',\r\n        params: params\r\n      }\r\n      this.$ajax(loadConfig)\r\n        .then(resp => {\r\n          if (resp.data) {\r\n            resp.data.forEach(data1 => {\r\n              let temp = {}\r\n              temp.key = data1.dicName\r\n              temp.value = data1.dicValue\r\n              temp.label = data1.dicName\r\n              this.noticeObjData.push(temp)\r\n            })\r\n          }\r\n        })\r\n    },\r\n    queryCodeType () {\r\n      this.codeTypeData = []\r\n      let params = { dictcode: 'm_alarm_code' }\r\n      const loadConfig = {\r\n        method: 'GET',\r\n        url: 'file/loadList',\r\n        params: params\r\n      }\r\n      this.$ajax(loadConfig)\r\n        .then(resp => {\r\n          if (resp.data) {\r\n            resp.data.forEach(data1 => {\r\n              let temp = {}\r\n              temp.key = data1.dicName\r\n              temp.value = data1.dicValue\r\n              temp.label = data1.dicName\r\n              this.codeTypeData.push(temp)\r\n            })\r\n          }\r\n        })\r\n    },\r\n    /**\r\n     * 返回到数据视图\r\n     **/\r\n    cancel () {\r\n      let prevTab = ''\r\n      if (this.transData.tabObj) {\r\n        prevTab = this.transData.tabObj.prevTab\r\n      } else if (this.transData.prevTab) {\r\n        prevTab = this.transData.prevTab\r\n      }\r\n\r\n      let backParam = { id: this.transData.id, statusName: 'emailTable', prevTab: prevTab, curTab: 'emailForm' }\r\n\r\n      let queryCache = { formBean: this.transData.formBean, currentPage: this.transData.currentPage, pageSize: this.transData.pageSize }\r\n      this.$emit('switch', Object.assign({}, queryCache, backParam))\r\n    }\r\n  },\r\n  /**\r\n   * 视图挂载\r\n   **/\r\n  mounted () {\r\n    this.init()\r\n  }\r\n}\r\n\r\n",{"version":3,"sources":["Form.vue"],"names":[],"mappings":";AAsfile":"Form.vue","sourceRoot":"src/view/app/alarm/alarmusergroup","sourcesContent":["<template>\r\n  <div>\r\n    <Form ref=\"alarmUserGroupForm\" :model=\"formBean\" :label-width=\"100\" :rules=\"formRule\">\r\n      <Row>\r\n        <Col span=\"6\">\r\n          <FormItem prop=\"platform\" label=\"平台名\">\r\n            <Input v-model=\"formBean.platform\"/>\r\n          </FormItem>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col span=\"6\">\r\n          <FormItem prop=\"systems\" label=\"应用名\">\r\n            <Input v-model=\"formBean.systems\"/>\r\n          </FormItem>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col span=\"6\">\r\n          <FormItem prop=\"groupName\" label=\"组名\">\r\n            <Input v-model=\"formBean.groupName\"/>\r\n          </FormItem>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col span=\"6\">\r\n          <FormItem  style='width:75%' prop=\"sendType\" label=\"发送类型\">\r\n            <Select clearable filterable   v-model=\"formBean.sendType\" @on-change=\"sendTypeChange\">\r\n              <Option v-for=\"item in sendTypeList\" :value=\"item[0]\" :key=\"item[0]\">{{ item[1] }}</Option>\r\n            </Select>\r\n          </FormItem>\r\n        </Col>\r\n      </Row>\r\n      <Form v-if=\"showSendType\" ref=\"sendTypeForm\" :model=\"sendTypeBean\" :label-width=\"100\" :rules=\"sendTypeformRule\">\r\n        <Row  v-for=\"(infor, i) in showSendTypeData\" :key=\"`infor-${i}`\">\r\n          <Col span=\"6\">\r\n            <FormItem   :prop=\"infor[1]\" :label=\"infor[0]\">\r\n              <Input v-model=\"sendTypeBean[infor[1]]\" />\r\n            </FormItem>\r\n          </Col>\r\n          <Col v-if=\"i === showSendTypeData.length-1\" span=\"6\" :offset=\"1\" >\r\n            <Button type=\"primary\" icon=\"md-add\" @click=\"addParams\">添加参数</Button>\r\n          </Col>    \r\n        </Row>\r\n        <Row  v-for=\"(infor, i) in customParams\" :key=\"`param-${i}`\">\r\n          <Col span=\"4\">\r\n            <FormItem    :label=\"'参数名'+(i+1)\">\r\n              <Input v-model=\"infor.key\" />\r\n            </FormItem>\r\n          </Col>\r\n          <Col span=\"4\">\r\n            <FormItem    :label=\"'参数值'+(i+1)\">\r\n              <Input v-model=\"infor.value\" />\r\n            </FormItem>\r\n          </Col>\r\n          <Col span=\"4\" :offset=\"1\" >\r\n            <Button type=\"primary\" @click=\"delParams(i)\">删除</Button>\r\n          </Col>  \r\n        </Row>\r\n      </Form>\r\n    </Form>\r\n\r\n    <div>\r\n      <Button type=\"primary\" :loading=\"loading\" icon=\"md-add\" @click=\"save\">保存</Button>\r\n      <Button type=\"primary\" icon=\"ios-trash-outline\" @click=\"cancel\">取消</Button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nconst RESOURCE_PATH = '/alarm/group'\r\n\r\nexport default {\r\n  props: {\r\n    transData: {\r\n      type: Object,\r\n      default: function () {\r\n        return {}\r\n      }\r\n    }\r\n  },\r\n  data () {\r\n    const checkEmail = (rule, value, callback) => {\r\n      if (value) {\r\n        let reg = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})(,([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4}))*$/\r\n        if (!reg.test(value)) {\r\n          callback(new Error('电子邮件格式不正确'))\r\n        } else {\r\n          callback()\r\n        }\r\n\r\n      } else {\r\n        callback(new Error('请输入数据'))\r\n      }\r\n    }\r\n    return {\r\n      formBean: {},\r\n      loading: false,\r\n      sendTypeList: [],\r\n      sendTypeDataBean: {},\r\n      sendTypeBean: {},\r\n      customParams: [],\r\n      showSendTypeData: [],\r\n      showSendType: false,\r\n      platformData: [],\r\n      alarmTypeData: [],\r\n      codeTypeData: [],\r\n      serverityTypeData: [],\r\n      jobTypeData: [],\r\n      noticeObjData: [],\r\n      model1: [],\r\n      isEdit: false,\r\n      noticeTypeData: [{ label: '邮件', value: 'email' }],\r\n\r\n      sendTypeformRule: {\r\n        receivers: [{\r\n          required: true,\r\n          validator: checkEmail,\r\n          trigger: 'blur'\r\n        }],\r\n        receiverCcs: [{\r\n          required: true,\r\n          validator: checkEmail,\r\n          trigger: 'blur'\r\n        }],\r\n        sender: [{\r\n          required: true,\r\n          validator: checkEmail,\r\n          trigger: 'blur'\r\n        }],\r\n        user: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }],\r\n        passwd: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }],\r\n        serverHost: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }],\r\n        serverPort: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }],\r\n        url: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }],\r\n        headerParams: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }],\r\n        bodyParams: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }],\r\n        requestType: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }],\r\n        contentField: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }]\r\n      },\r\n      formRule: {\r\n        platform: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }],\r\n        systems: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }],\r\n        groupName: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }],\r\n        sendType: [{\r\n          required: true,\r\n          message: '请选择'\r\n        }],\r\n        sendParams: [{\r\n          required: true,\r\n          message: '请输入数据！'\r\n        }]\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    /**\r\n     * 初始化\r\n     **/\r\n    init () {\r\n      if (this.transData.row) { // 如果传过来的存在ID则说明是编辑功能跳转过来\r\n        this.formBean = Object.assign({}, this.transData.row)\r\n        console.log(this.formBean)\r\n        this.getsendTypeList(this.formBean.id)\r\n      } else {\r\n        this.bindData()\r\n        this.getsendTypeList()\r\n      }\r\n      // this.queryCodeType()\r\n      this.queryPlatform()\r\n      // this.queryNoticeObj()\r\n      // this.queryJobType()\r\n      // this.queryServerityType()\r\n      // this.queryAlarmType()\r\n    },\r\n    addParams () {\r\n      let param = { key: '', value: '' }\r\n      this.customParams.push(param)\r\n\r\n    },\r\n    delParams (i) {\r\n      this.customParams.splice(i, 1)\r\n    },\r\n    getsendTypeList (id) {\r\n      let httpConfig = {\r\n        method: 'GET',\r\n        url: RESOURCE_PATH + '/sendType'\r\n      }\r\n      this.$ajax(httpConfig)\r\n        .then(resp => {\r\n          if (resp.data) {\r\n            this.sendTypeList = []\r\n            let keys = Object.keys(resp.data)\r\n            let values = Object.values(resp.data)\r\n            for (let i = 0; i < keys.length; i++) {\r\n              let valueData = values[i]\r\n              let sendType = keys[i].split(';')\r\n              this.sendTypeList.push(sendType)\r\n              this.sendTypeDataBean[sendType[0]] = valueData\r\n            }\r\n            if (id) {\r\n              // 编辑页面进来\r\n              let oldSendType = JSON.parse(this.formBean.sendParams)\r\n              this.showSendTypeData = this.sendTypeDataBean[this.formBean.sendType]\r\n              console.log(this.showSendTypeData)\r\n              // 循环取出自定义的key和系统中的key\r\n              let oldSendTypeKeys = Object.keys(oldSendType)\r\n              for (let i = 0; i < oldSendTypeKeys.length; i++) {\r\n                let key = oldSendTypeKeys[i]\r\n                let haveData = false\r\n                for (let j = 0; j < this.showSendTypeData.length; j++) {\r\n                  if (key === this.showSendTypeData[j][1]) {\r\n                    haveData = true\r\n                    break\r\n                  }\r\n                }\r\n                if (haveData) {\r\n                  this.sendTypeBean[key] = oldSendType[key]\r\n                } else {\r\n                  let param = { key: key, value: oldSendType[key] }\r\n                  this.customParams.push(param)\r\n                }\r\n              }\r\n              this.showSendType = true\r\n            }\r\n          }\r\n        })\r\n    },\r\n    sendTypeChange (sendType) {\r\n      this.showSendType = false\r\n      this.sendTypeBean = {}\r\n      this.showSendTypeData = this.sendTypeDataBean[sendType]\r\n      this.showSendType = true\r\n      this.customParams = []\r\n      this.$forceUpdate()\r\n    },\r\n    /**\r\n     * 如果传过来的有初始数据则进行数据绑定\r\n     **/\r\n    bindData () {\r\n      try {\r\n        this.formBean = Object.assign({}, this.transData.initFormBean)\r\n      } catch (error) {\r\n        console.error(error)\r\n      }\r\n    },\r\n    /**\r\n     * 保存表单\r\n     **/\r\n    save () {\r\n      this.$refs.alarmUserGroupForm.validate(valid => {\r\n        if (!valid) return\r\n        this.$refs.sendTypeForm.validate(typeValid => {\r\n          if (!typeValid) return\r\n          let str = this.model1\r\n          // if(''==this.model1){\r\n          // this.$Message.error('未填写通知对象');\r\n          // return;\r\n          // }\r\n          this.formBean.noticeObj = str.join()\r\n          let params = {}\r\n          params.authps = this.formBean.platform + '*'\r\n          Object.assign(params, this.formBean)\r\n          for (let i = 0; i < this.customParams.length; i++) {\r\n            let customParam = this.customParams[i]\r\n            this.sendTypeBean[customParam.key + ' '] = customParam.value\r\n          }\r\n          params.sendParams = JSON.stringify(this.sendTypeBean)\r\n          let httpConfig = {\r\n            url: RESOURCE_PATH,\r\n            data: params\r\n          }\r\n          if (this.transData.row) {\r\n            httpConfig.method = 'POST'\r\n            httpConfig.url = RESOURCE_PATH + '/update'\r\n          } else {\r\n            httpConfig.url = RESOURCE_PATH + '/add'\r\n            httpConfig.method = 'PUT'\r\n          }\r\n          this.loading = true\r\n          this.$ajax(httpConfig)\r\n            .then(resp => {\r\n              this.cancel()\r\n            })\r\n        })   \r\n      })\r\n    },\r\n    filterMethod (value, option) {\r\n      return option.toUpperCase().indexOf(value.toUpperCase()) !== -1\r\n    },\r\n    queryPlatform () {\r\n      let loadConfig = {\r\n        method: 'GET',\r\n        url: '/udsSystem/listQuery'\r\n        // params: { systems: '*' }\r\n      }\r\n      this.$ajax(loadConfig)\r\n        .then(resp => {\r\n          // resp.data.forEach(data => {\r\n          //   let tmp = {}\r\n          //   tmp.value = data\r\n          //   tmp.label = data\r\n          //   this.platformData.push(tmp)\r\n          // })\r\n          console.log(resp)\r\n          // this.platformData = resp.data\r\n        })\r\n    },\r\n    queryAlarmType () {\r\n      this.alarmTypeData = []\r\n      let params = { dictcode: 'm_alarm_type' }\r\n      const loadConfig = {\r\n        method: 'GET',\r\n        url: 'file/loadList',\r\n        params: params\r\n      }\r\n      this.$ajax(loadConfig)\r\n        .then(resp => {\r\n          if (resp.data) {\r\n            resp.data.forEach(data1 => {\r\n              let temp = {}\r\n              temp.key = data1.dicName\r\n              temp.value = data1.dicValue\r\n              temp.label = data1.dicName\r\n              this.alarmTypeData.push(temp)\r\n            })\r\n          }\r\n        })\r\n    },\r\n    queryServerityType () {\r\n      this.serverityTypeData = []\r\n      let params = { dictcode: 'm_alarm_level' }\r\n      const loadConfig = {\r\n        method: 'GET',\r\n        url: 'file/loadList',\r\n        params: params\r\n      }\r\n      this.$ajax(loadConfig)\r\n        .then(resp => {\r\n          if (resp.data) {\r\n            resp.data.forEach(data1 => {\r\n              let temp = {}\r\n              temp.key = data1.dicName\r\n              temp.value = data1.dicValue\r\n              temp.label = data1.dicName\r\n              this.serverityTypeData.push(temp)\r\n            })\r\n          }\r\n        })\r\n    },\r\n    queryJobType () {\r\n      this.jobTypeData = []\r\n      let params = { dictcode: 'm_alarm_bus_type' }\r\n      const loadConfig = {\r\n        method: 'GET',\r\n        url: 'file/loadList',\r\n        params: params\r\n      }\r\n      this.$ajax(loadConfig)\r\n        .then(resp => {\r\n          if (resp.data) {\r\n            resp.data.forEach(data1 => {\r\n              let temp = {}\r\n              temp.key = data1.dicName\r\n              temp.value = data1.dicValue\r\n              temp.label = data1.dicName\r\n              this.jobTypeData.push(temp)\r\n            })\r\n          }\r\n        })\r\n    },\r\n    queryNoticeObj () {\r\n      this.noticeObjData = []\r\n      let params = { dictcode: 'm_alarm_not' }\r\n      const loadConfig = {\r\n        method: 'GET',\r\n        url: 'file/loadList',\r\n        params: params\r\n      }\r\n      this.$ajax(loadConfig)\r\n        .then(resp => {\r\n          if (resp.data) {\r\n            resp.data.forEach(data1 => {\r\n              let temp = {}\r\n              temp.key = data1.dicName\r\n              temp.value = data1.dicValue\r\n              temp.label = data1.dicName\r\n              this.noticeObjData.push(temp)\r\n            })\r\n          }\r\n        })\r\n    },\r\n    queryCodeType () {\r\n      this.codeTypeData = []\r\n      let params = { dictcode: 'm_alarm_code' }\r\n      const loadConfig = {\r\n        method: 'GET',\r\n        url: 'file/loadList',\r\n        params: params\r\n      }\r\n      this.$ajax(loadConfig)\r\n        .then(resp => {\r\n          if (resp.data) {\r\n            resp.data.forEach(data1 => {\r\n              let temp = {}\r\n              temp.key = data1.dicName\r\n              temp.value = data1.dicValue\r\n              temp.label = data1.dicName\r\n              this.codeTypeData.push(temp)\r\n            })\r\n          }\r\n        })\r\n    },\r\n    /**\r\n     * 返回到数据视图\r\n     **/\r\n    cancel () {\r\n      let prevTab = ''\r\n      if (this.transData.tabObj) {\r\n        prevTab = this.transData.tabObj.prevTab\r\n      } else if (this.transData.prevTab) {\r\n        prevTab = this.transData.prevTab\r\n      }\r\n\r\n      let backParam = { id: this.transData.id, statusName: 'emailTable', prevTab: prevTab, curTab: 'emailForm' }\r\n\r\n      let queryCache = { formBean: this.transData.formBean, currentPage: this.transData.currentPage, pageSize: this.transData.pageSize }\r\n      this.$emit('switch', Object.assign({}, queryCache, backParam))\r\n    }\r\n  },\r\n  /**\r\n   * 视图挂载\r\n   **/\r\n  mounted () {\r\n    this.init()\r\n  }\r\n}\r\n\r\n</script>\r\n"]}]}