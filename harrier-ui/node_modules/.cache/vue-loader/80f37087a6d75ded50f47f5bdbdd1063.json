{"remainingRequest":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\view\\spdb\\job\\jobList\\jobimgs\\resource.vue?vue&type=style&index=0&id=5b66394e&scoped=true&lang=css&","dependencies":[{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\src\\view\\spdb\\job\\jobList\\jobimgs\\resource.vue","mtime":1681468306541},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\WorkSpace\\IdeaProjects\\harrier\\harrier-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n.container {\n  color : rgb(3, 58, 240)\n}\n",{"version":3,"sources":["resource.vue"],"names":[],"mappings":";AAkSA;AACA;AACA","file":"resource.vue","sourceRoot":"src/view/spdb/job/jobList/jobimgs","sourcesContent":["<template>\r\n  <div id=\"Resource\"></div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    transData: {\r\n      type: Object,\r\n      default: function () {\r\n        return {}\r\n      }\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      jobResusgList: [],\r\n      graph: '',\r\n      option: {},\r\n      jobstat: []\r\n    }\r\n  },\r\n  methods: {\r\n    init () {\r\n      this.getResUsgInfo() // 获取作业对应的资源消耗情况，包括内存和CPU\r\n      this.graph = this.$echarts.init(document.getElementById('Resource'))\r\n    },\r\n    // 获取作业对应的资源消耗情况，包括内存和CPU\r\n    getResUsgInfo () {\r\n      let job = this.transData.job\r\n      let httpConfig = {\r\n        method: 'GET',\r\n        url: '/mjobresusginfo/getResUsgInfo',\r\n        params: {\r\n          job: job\r\n        }\r\n      }\r\n      this.jobResusgList = []\r\n      this.$ajax(httpConfig)\r\n        .then(resp => {\r\n          if (resp.status && resp.status === 200) {\r\n            this.jobResusgList = resp.data\r\n            let valueList1 = this.jobResusgList.map(function (item) {\r\n              return item['CpuTime']\r\n            })\r\n            var avg = 0\r\n            var sum = 0\r\n            for (var i = 0; i < valueList1.length; i++) {\r\n              sum += valueList1[i]\r\n            }\r\n            avg = sum / valueList1.length\r\n            if (avg > 0) {\r\n              this.getResUsgView()\r\n            } else {\r\n              this.getTimeUsgView()\r\n            }\r\n          }\r\n        })\r\n    },\r\n    getResUsgView () {\r\n      let data = this.jobResusgList\r\n      let dateList = data.map(function (item) {\r\n        return item['LogDate']\r\n      })\r\n      let valueList1 = data.map(function (item) {\r\n        return item['CpuTime']\r\n      })\r\n      let valueList2 = data.map(function (item) {\r\n        return item['SpaceTime']\r\n      })\r\n      let option = {\r\n        title: {\r\n          text: '近一个月资源消耗',\r\n          x: 'center',\r\n          align: 'right'\r\n        },\r\n        grid: {\r\n          bottom: 20\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          axisPointer: {\r\n            type: 'cross',\r\n            animation: false,\r\n            label: {\r\n              backgroundColor: '#505765'\r\n            }\r\n          }\r\n        },\r\n        legend: {\r\n          data: ['CPU消耗', 'Spool空间消耗'],\r\n          x: 'right'\r\n        },\r\n        lineStyle: {\r\n          width: 4\r\n        },\r\n        xAxis: [\r\n          {\r\n            type: 'category',\r\n            boundaryGap: false,\r\n            axisLine: { onZero: false },\r\n            data: dateList\r\n          }\r\n        ],\r\n        yAxis: [\r\n          {\r\n            name: 'CPU消耗(秒)',\r\n            type: 'value'\r\n          },\r\n          {\r\n            name: 'Spool空间消耗(GB)',\r\n            type: 'value'\r\n          }\r\n        ],\r\n        series: [\r\n          {\r\n            name: 'CPU消耗',\r\n            type: 'line',\r\n            smooth: true,\r\n            animation: true,\r\n            areaStyle: {\r\n              color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n                {\r\n                  offset: 0,\r\n                  color: '#1370D8'\r\n                },\r\n                {\r\n                  offset: 0.5,\r\n                  color: '#FFFFFF'\r\n                }\r\n              ])\r\n            },\r\n            lineStyle: {\r\n              width: 3\r\n            },\r\n            color: '#1370D8',\r\n            data: valueList1,\r\n            markPoint: {\r\n              data: [\r\n                { type: 'max', name: 'Max' },\r\n                { type: 'min', name: 'Min' }\r\n              ]\r\n            },\r\n            markLine: {\r\n              data: [\r\n                { type: 'average', name: 'Avg' }\r\n              ]\r\n            }\r\n          },\r\n          {\r\n            name: 'Spool空间消耗',\r\n            type: 'line',\r\n            yAxisIndex: 1,\r\n            smooth: true,\r\n            animation: true,\r\n            areaStyle: {\r\n              color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n                {\r\n                  offset: 0,\r\n                  color: '#3AA255'\r\n                },\r\n                {\r\n                  offset: 0.5,\r\n                  color: '#FFFFFF'\r\n                }\r\n              ])\r\n            },\r\n            lineStyle: {\r\n              width: 3\r\n            },\r\n            color: '#3AA255',\r\n            data: valueList2,\r\n            markPoint: {\r\n              data: [\r\n                { type: 'max', name: 'Max' },\r\n                { type: 'min', name: 'Min' }\r\n              ]\r\n            },\r\n            markLine: {\r\n              data: [\r\n                { type: 'average', name: 'Avg' }\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n      this.graph.setOption(option)\r\n      window.addEventListener('resize', () => {\r\n        this.graph.resize()\r\n      })\r\n    },\r\n    getTimeUsgView () {\r\n      let data = this.jobResusgList\r\n      let dateList = data.map(function (item) {\r\n        return item['LogDate']\r\n      })\r\n      let valueList1 = data.map(function (item) {\r\n        return item['RunningTime']\r\n      })\r\n      let option = {\r\n        title: {\r\n          text: '近一个月作业耗时情况',\r\n          x: 'center',\r\n          align: 'right'\r\n        },\r\n        grid: {\r\n          bottom: 20\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis',\r\n          axisPointer: {\r\n            type: 'cross',\r\n            animation: false,\r\n            label: {\r\n              backgroundColor: '#505765'\r\n            }\r\n          }\r\n        },\r\n        legend: {\r\n          data: ['作业运行耗时'],\r\n          x: 'right'\r\n        },\r\n        lineStyle: {\r\n          width: 4\r\n        },\r\n        xAxis: [\r\n          {\r\n            type: 'category',\r\n            boundaryGap: false,\r\n            axisLine: { onZero: false },\r\n            data: dateList\r\n          }\r\n        ],\r\n        yAxis: [\r\n          {\r\n            name: '运行耗时(分钟)',\r\n            type: 'value'\r\n          }\r\n        ],\r\n        series: [\r\n          {\r\n            name: '运行耗时',\r\n            type: 'line',\r\n            smooth: true,\r\n            animation: true,\r\n            areaStyle: {\r\n              color: new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n                {\r\n                  offset: 0,\r\n                  color: '#1370D8'\r\n                },\r\n                {\r\n                  offset: 0.5,\r\n                  color: '#FFFFFF'\r\n                }\r\n              ])\r\n            },\r\n            lineStyle: {\r\n              width: 3\r\n            },\r\n            color: '#1370D8',\r\n            data: valueList1,\r\n            markPoint: {\r\n              data: [\r\n                { type: 'max', name: 'Max' },\r\n                { type: 'min', name: 'Min' }\r\n              ]\r\n            },\r\n            markLine: {\r\n              data: [\r\n                { type: 'average', name: 'Avg' }\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n      this.graph.setOption(option)\r\n    }\r\n  },\r\n  mounted () {\r\n    this.init()\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n  .container {\r\n    color : rgb(3, 58, 240)\r\n  }\r\n</style>\r\n"]}]}